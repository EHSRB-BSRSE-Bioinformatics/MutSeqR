% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lollipop_mutations.R
\name{lollipop_ggplot}
\alias{lollipop_ggplot}
\title{Plot recurrent mutations in a lollipop plot using ggplot2}
\usage{
lollipop_ggplot(
  mutations,
  min_recurrence = 2,
  group_by_col = "dose_group",
  custom_palette = NULL
)
}
\arguments{
\item{mutations}{A data frame containing mutation data. It must contain columns
for genomic start position (\code{start}), \code{variation_type}, \code{normalized_subtype},
and a column to group by (see \code{group_by_col}).}

\item{min_recurrence}{An integer specifying the minimum number of times a
mutation must be observed at the same position to be plotted. Defaults to 2.}

\item{group_by_col}{A string specifying the column name to group mutations by,
typically representing chromosomes or contigs (e.g., "seqnames", "chr").
Defaults to "seqnames".}

\item{custom_palette}{A named character vector for coloring the mutation
subtypes. The names should match the levels in \code{normalized_subtype}. If NULL
(default), a default palette is used.}
}
\value{
A list of ggplot objects. Each element of the list is a lollipop
plot for a specific region (e.g., a chromosome) and is named accordingly.
}
\description{
This function visualizes recurrent mutations from a data frame. It first
calculates the frequency of each mutation at specific genomic positions and
then generates a lollipop plot for each group (e.g., chromosome)
displaying mutations that meet a minimum recurrence threshold.
}
\examples{
if (requireNamespace("dplyr", quietly = TRUE) &&
    requireNamespace("ggplot2", quietly = TRUE)) {

  # 1. Create a sample mutation data frame
  # We'll make some mutations recurrent
  mutations_df <- data.frame(
    seqnames = c(rep("chr1", 6), rep("chr2", 4)),
    start = c(100, 100, 250, 500, 500, 500, 80, 80, 120, 150),
    variation_type = "snv",
    normalized_subtype = c(
      "C>A", "C>A", # Recurrent
      "C>T",
      "T>A", "T>A", "T>A", # Recurrent
      "C>G", "C>G", # Recurrent
      "T>C",
      "C>A"
    )
  )

  # 2. Generate the plots
  plot_list <- lollipop_ggplot(mutations = mutations_df, min_recurrence = 2)

  # 3. Display a plot for a specific chromosome
  # print(plot_list$chr1)
  # print(plot_list$chr2)
}
}

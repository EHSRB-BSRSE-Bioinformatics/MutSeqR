% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_trinucleotide.R
\name{plot_trinucleotide}
\alias{plot_trinucleotide}
\title{Plot the trinucleotide spectrum}
\usage{
plot_trinucleotide(
  mf_96_data,
  response = c("frequency", "proportion", "sum"),
  mf_type = "min",
  group_col = "dose",
  max_y = c("individual", "group"),
  sum_totals = TRUE,
  output_path = NULL,
  output_type = "tiff"
)
}
\arguments{
\item{mf_96_data}{A data frame containing the mutation frequency data at the 96-base resolution.
This should be obtained using the 'calculate_mut_freq' with subtype_resolution set to 'base_96'.
Generally, cols_to_group should be the same as 'group_col'.}

\item{response}{A character string specifying the type of response to plot.
Must be one of 'frequency', 'proportion', or 'sum'.}

\item{mf_type}{A character string specifying the mutation count method to
plot. Must be one of 'min' or 'max'. Default is 'min'.}

\item{group_col}{A character string specifying the column(s) in 'mf_96_data'
to group the data by. Default is 'sample'. The sum, proportion, or frequency
will be plotted for all unique levels of this
group. You can specify more than one column to group by. Generally the same as
the 'cols_to_group' parameter in 'calculate_mut_freq' when generating mf_96_data.}

\item{max_y}{A character string specifying the max response value for the y-axis.
Must be one of 'individual' or 'group'.'individual' will adjust the maximum y-axis
value for each level of the group independently of the others. 'group' will set the
maximum y-axis value based on the entire dataset such that all plots will have the
same scale. Default is 'group'.}

\item{sum_totals}{A logical value specifying whether to sum the total mutations.}

\item{output_path}{A character string specifying the path to save the output plot.
Default is NULL. This will create an output directory in the current working
directory.}

\item{output_type}{A character string specifying the type of output file.
Options are  'jpeg', 'pdf', 'png', 'svg', or 'tiff'. Default is 'svg'.}
}
\description{
Creates barplots of the trinucleotide spectrum for all levels of
a given group based on the mutation data. All plots are exported.
}
\details{
The function plots the trinucleotide spectrum for all levels of a given
group from the provided mf_96 data; the output of calculate_mut_freq with
subtype_resolution = "base_96".
}
\examples{
# Load example data
example_file <- system.file("extdata", "example_mutation_data_filtered.rds", package = "MutSeqR")
example_data <- readRDS(example_file)

# Use a temporary directory to save the example plots.
temp_output <- tempdir()

# Calculate the mutation frequency data at the 96-base resolution
mf_96 <- calculate_mut_freq(mutation_data = example_data,
                            cols_to_group = "dose_group",
                            subtype_resolution = "base_96",
                            variant_types = "snv")
# Plot the trinucleotide proportions for each dose group
# Scale y-axis the same for all groups
plot_trinucleotide(mf_96_data = mf_96,
                   response = "proportion",
                   mf_type = "min",
                   group_col = "dose_group",
                   max_y = "group",
                   output_path = temp_output)
# Plot the trinucleotide sums for each dose group
# Scale y-axis the differently for each group
plot_trinucleotide(mf_96_data = mf_96,
                   response = "sum",
                   mf_type = "min",
                   group_col = "dose_group",
                   max_y = "individual",
                   output_path = temp_output)

# Plot the mean mutation frequency for each dose group
mf_96_sample <- calculate_mut_freq(mutation_data = example_data,
                                   cols_to_group = "sample",
                                   subtype_resolution = "base_96",
                                   variant_types = "snv",
                                   retain_metadata_cols = "dose_group")
mean_mf_96 <- mf_96_sample \%>\%
 dplyr::group_by(dose_group, normalized_context_with_mutation) \%>\%
 dplyr::summarise(mf_min = mean(mf_min), .groups = "drop_last")
plot_trinucleotide(mf_96_data = mean_mf_96,
                   response = "frequency",
                   mf_type = "min",
                   group_col = "dose_group",
                   max_y = "individual",
                   output_path = temp_output)
list.files(temp_output)
# Note: The plots are saved as image files in the temporary directory.
# To view the plots, use the following code:
## if (!requireNamespace("tiff", quietly = TRUE)) install.packages("tiff")
## library(tiff)
## example_plot <- file.path(temp_output, "plot_Control_trinucleotide_proportion.tiff")
## image <- tiff::readTIFF(example_plot)
## plot(as.raster(image))
}

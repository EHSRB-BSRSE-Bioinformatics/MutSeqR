[{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Error-corrected next-generation sequencing (ECS) uses various methods combine multiple independent raw sequence reads derived original starting molecule, thereby subtracting artifacts introduced sequencing library preparation. results highly accurate representation original molecule. ECS particularly useful detecting rare somatic mutations (mutations induced germ cells), arise mutagen exposure sources DNA damage. ECS powerful tool assessing mutagenicity chemicals, drugs, agents, can used identify mutational signatures agents. ECS can also used detect rare mutations cancer diseases, track clonal evolution diseases time. background ECS works context regulatory toxicology testing genetic toxicology, see following articles: Menon Brash (2023) Marchetti, Cardoso, Chen, Douglas, Elloway, Escobar, Harper, et al. (2023) Marchetti, Cardoso, Chen, Douglas, Elloway, Escobar, Harper Jr, et al. (2023) Kennedy et al. (2014) R package meant facilitate import, cleaning, analysis ECS data, beginning table variant calls variant call file (VCF). package designed flexible enable users perform common statistical analyses visualisations.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"what-is-ecs","dir":"Articles","previous_headings":"","what":"What is ECS?","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Error-corrected next-generation sequencing (ECS) uses various methods combine multiple independent raw sequence reads derived original starting molecule, thereby subtracting artifacts introduced sequencing library preparation. results highly accurate representation original molecule. ECS particularly useful detecting rare somatic mutations (mutations induced germ cells), arise mutagen exposure sources DNA damage. ECS powerful tool assessing mutagenicity chemicals, drugs, agents, can used identify mutational signatures agents. ECS can also used detect rare mutations cancer diseases, track clonal evolution diseases time. background ECS works context regulatory toxicology testing genetic toxicology, see following articles: Menon Brash (2023) Marchetti, Cardoso, Chen, Douglas, Elloway, Escobar, Harper, et al. (2023) Marchetti, Cardoso, Chen, Douglas, Elloway, Escobar, Harper Jr, et al. (2023) Kennedy et al. (2014) R package meant facilitate import, cleaning, analysis ECS data, beginning table variant calls variant call file (VCF). package designed flexible enable users perform common statistical analyses visualisations.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Install package github: Install package Bioconductor (currently implemented): Load package","code":"install.packages(\"devtools\")  devtools::install_github(   \"EHSRB-BSRSE-Bioinformatics/MutSeqR\",   auth_token = \"your personal_access_token from GitHub\" ) if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"MutSeqR\") library(MutSeqR)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"data-import","dir":"Articles","previous_headings":"","what":"Data import","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"main goal MutSeqR generate summary statistics, visualizations, exploratory analyses, post-processing tasks mutational signature analysis generalized linear modeling. Mutation data supplied table variants genomic positions. Mutation data can imported either VCF files tabular data using functions import_vcf_data import_mut_data, respectively. reccomended files include record every sequenced position, regardless whether variant called , along total_depth record. enables site-specific depth calculations required calculation mutation subtype frequencies ad site-specific frequemcies. data set can pared later include mutations interest (SNVs, indels, SVs, combination). Required columns mutation data import. VCF files follow VCF specification (version 4.5; Danecek et al. (2011)). VCF files may bg/g-zipped. individual VCF file contain mutation data single sample library. Multiple alt alleles called single position represented separate rows data. extra columns, INFO fields, FORMAT fields retained upon import. Upon import, records categorized within variation_type column based REF ALT. Categories listed . Definitions Variation types. Additional columns created characterise variants. Definitions Mutation data columns. Indicate filepath mutation data file(s) using vcf_file/ mut_file parameter. can either single file directory containing multiple files. provide directory, files within bound single data frame. important component importing data proper use assign mutation biological sample, also make sure additional information sample present (ex., chemical treatment, dose, etc.). done providing sample_data. parameter can take data frame, can read file provided filepath. using filepath, specify proper delimiter using sd_sep parameter. Sample metadata joined mutation data using “sample” column capture information associate mutation. Specify appropriate BS genome populate context column supplying species, genome, masked_BS_genome parameters. function browse BSgenome::available.genomes appropriate reference genome install corresponding package. Context information extracted installed BSgenome object. BSgenome offers genomes masked sequences. wish use masked version genome, set masked_BS_genome TRUE. VCF Tabular Example 1.1. Import example .vcf.bgz file. Provided genomic vcf.gz file sample dna00996.1. comprised record 48K positions sequenced Mouse Mutagenesis Panel alt_depth tota_depth values record. Data Table 1. Mutation data imported VCF sample dna00996.1. Displays first 6 rows. Example 1.2. Import example tabular data. equivalent file example vcf file. stored .rds file. load dataframe supply import_mut_data. mut_file parameter can accept file paths data frames input. Data Table 2. Mutation data imported data.frame object sample dna00996.1. Displays first 6 rows. Similar sample metadata, may supply file containing metadata genomic regions regions parameter. file, genomic regions defined name reference sequence plus start end coordinates. Additional columns added describe features genomic regions (Ex. transcription status, GC content, etc.). Region metadata joined mutation data checking overlap target region ranges position record. regions parameter can either filepath, data frame, GRanges object (see GenomicRanges). Filepaths read using rg_sep. Users can also choose built-TwinStrand DuplexSeq™ Mutagenesis Panels inputting “TSpanel_human”, “TSpanel_mouse”, “TSpanel_rat”. Required columns regions file “contig”, “start”, “end”. GRanges object, required columns “seqnames”, “start”, “end”. Users must indicate whether region coordinates 0-based 1-based is_0_based_rg. Mutation data region coordinates converted 1-based. wish specify regions, set regions parameter NULL (default). Example 1.3. Add metadata TwinStrand’s Mouse Mutagenesis panel example tabular file. Data Table 3. Mutation data imported data.frame object sample dna00996.1 added metadata Mouse Mutagenesis Panels sequencing targets. Displays first 6 rows. Added columns ‘target_size’, ‘label’, ‘genic_context’, ‘region_GC_content’, ‘genome’, ‘in_regions’. Users can load example TwinStrand Mutagenesis Panels load_regions(). function output GRanges object. Custom panels may also loaded function providing file path regions parameter. recognize column names may differ specified Table ?@tbl-required-columns. Therefore, implemented default column name synonyms. column name matches one listed synonyms, automatically changed match set values. example, contig column may named chr chromosome. importing data, synonymous column name changed contig. Column names case-insensitive. list column name synonyms listed . Predefined column name synonyms. Synonyms automatically changed default Column value upon import. data contains column synonymous one required columns, name included synonyms list, column name may substituted using custom_column_names parameter. Provide parameter list names specify meaning column headers. Data Table 4. Mutation data imported tabular file custom column names. Displays first 6 rows. Custom column names changed default values. Mutation data can output either data frame GRanges object (see GenomicRanges) downstream analysis. Use output_granges parameter specify output. GRanges may faciliate use packages makes genomic based analyses ranges significantly easier. downstream analyses provided MutSeqR use data frame.","code":"example_file <- system.file(   \"extdata\",   \"Example_files\",   \"example_import_vcf_data_cleaned.vcf.bgz\",   package = \"MutSeqR\" ) sample_metadata <- data.frame(   sample = \"dna00996.1\",   dose = \"50\",   dose_group = \"High\" ) # Import the data imported_example_data <- import_vcf_data(   vcf_file = example_file,   sample_data = sample_metadata,   genome = \"mm10\",   species = \"mouse\",   masked_BS_genome = FALSE ) example_file <- system.file(   \"extdata\",   \"Example_files\",   \"example_import_mut_data.rds\",   package = \"MutSeqR\" ) example_data <- readRDS(example_file)  sample_metadata <- data.frame(   sample = \"dna00996.1\",   dose = \"50\",   dose_group = \"High\" ) # Import the data imported_example_data <- import_mut_data(   mut_file = example_data,   sample_data = sample_metadata,   genome = \"mm10\",   species = \"mouse\",   masked_BS_genome = FALSE,   is_0_based_mut = TRUE # indicates that the genomic coordinates are 0-based. # Coordinates will be changed to 1-based upon import. ) imported_example_data <- import_mut_data(   mut_file = example_data,   sample_data = sample_metadata,   genome = \"mm10\",   species = \"mouse\",   masked_BS_genome = FALSE,   is_0_based_mut = TRUE,   regions = \"TSpanel_mouse\" ) region_example <- load_regions_file(\"TSpanel_mouse\") region_example GRanges object with 20 ranges and 5 metadata columns:        seqnames              ranges strand | target_size       label           <Rle>           <IRanges>  <Rle> |   <integer> <character>    [1]     chr1   69304218-69306617      * |        2400        chr1    [2]     chr1 155235939-155238338      * |        2400      chr1.2    [3]     chr2   50833176-50835575      * |        2400        chr2    [4]     chr3 109633161-109635560      * |        2400        chr3    [5]     chr4   96825281-96827680      * |        2400        chr4    ...      ...                 ...    ... .         ...         ...   [16]    chr15   66779763-66782162      * |        2400       chr15   [17]    chr16   72381581-72383980      * |        2400       chr16   [18]    chr17   94009029-94011428      * |        2400       chr17   [19]    chr18   81262079-81264478      * |        2400       chr18   [20]    chr19     4618814-4621213      * |        2400       chr19        genic_context region_GC_content      genome          <character>         <numeric> <character>    [1]    intergenic              37.3        mm10    [2]         genic              54.0        mm10    [3]    intergenic              45.3        mm10    [4]         genic              39.2        mm10    [5]    intergenic              39.4        mm10    ...           ...               ...         ...   [16]         genic              44.0        mm10   [17]    intergenic              38.3        mm10   [18]    intergenic              35.2        mm10   [19]    intergenic              47.3        mm10   [20]         genic              56.1        mm10   -------   seqinfo: 19 sequences from an unspecified genome; no seqlengths mut_data <- system.file(   \"extdata\", \"Example_files\",   \"example_import_mut_data_custom_col_names.txt\",   package = \"MutSeqR\" ) imported_example_data_custom <- import_mut_data(   mut_file = mut_data,   custom_column_names = list(my_contig_name = \"contig\",                              my_sample_name = \"sample\") ) Expected 'contig' but found 'my_contig_name', renaming it. Expected 'sample' but found 'my_sample_name', renaming it."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage","dir":"Articles","previous_headings":"","what":"General Usage","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Indicate filepath mutation data file(s) using vcf_file/ mut_file parameter. can either single file directory containing multiple files. provide directory, files within bound single data frame. important component importing data proper use assign mutation biological sample, also make sure additional information sample present (ex., chemical treatment, dose, etc.). done providing sample_data. parameter can take data frame, can read file provided filepath. using filepath, specify proper delimiter using sd_sep parameter. Sample metadata joined mutation data using “sample” column capture information associate mutation. Specify appropriate BS genome populate context column supplying species, genome, masked_BS_genome parameters. function browse BSgenome::available.genomes appropriate reference genome install corresponding package. Context information extracted installed BSgenome object. BSgenome offers genomes masked sequences. wish use masked version genome, set masked_BS_genome TRUE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"VCF Tabular Example 1.1. Import example .vcf.bgz file. Provided genomic vcf.gz file sample dna00996.1. comprised record 48K positions sequenced Mouse Mutagenesis Panel alt_depth tota_depth values record. Data Table 1. Mutation data imported VCF sample dna00996.1. Displays first 6 rows. Example 1.2. Import example tabular data. equivalent file example vcf file. stored .rds file. load dataframe supply import_mut_data. mut_file parameter can accept file paths data frames input. Data Table 2. Mutation data imported data.frame object sample dna00996.1. Displays first 6 rows.","code":"example_file <- system.file(   \"extdata\",   \"Example_files\",   \"example_import_vcf_data_cleaned.vcf.bgz\",   package = \"MutSeqR\" ) sample_metadata <- data.frame(   sample = \"dna00996.1\",   dose = \"50\",   dose_group = \"High\" ) # Import the data imported_example_data <- import_vcf_data(   vcf_file = example_file,   sample_data = sample_metadata,   genome = \"mm10\",   species = \"mouse\",   masked_BS_genome = FALSE ) example_file <- system.file(   \"extdata\",   \"Example_files\",   \"example_import_mut_data.rds\",   package = \"MutSeqR\" ) example_data <- readRDS(example_file)  sample_metadata <- data.frame(   sample = \"dna00996.1\",   dose = \"50\",   dose_group = \"High\" ) # Import the data imported_example_data <- import_mut_data(   mut_file = example_data,   sample_data = sample_metadata,   genome = \"mm10\",   species = \"mouse\",   masked_BS_genome = FALSE,   is_0_based_mut = TRUE # indicates that the genomic coordinates are 0-based. # Coordinates will be changed to 1-based upon import. )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"region-metadata","dir":"Articles","previous_headings":"","what":"Region Metadata","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Similar sample metadata, may supply file containing metadata genomic regions regions parameter. file, genomic regions defined name reference sequence plus start end coordinates. Additional columns added describe features genomic regions (Ex. transcription status, GC content, etc.). Region metadata joined mutation data checking overlap target region ranges position record. regions parameter can either filepath, data frame, GRanges object (see GenomicRanges). Filepaths read using rg_sep. Users can also choose built-TwinStrand DuplexSeq™ Mutagenesis Panels inputting “TSpanel_human”, “TSpanel_mouse”, “TSpanel_rat”. Required columns regions file “contig”, “start”, “end”. GRanges object, required columns “seqnames”, “start”, “end”. Users must indicate whether region coordinates 0-based 1-based is_0_based_rg. Mutation data region coordinates converted 1-based. wish specify regions, set regions parameter NULL (default). Example 1.3. Add metadata TwinStrand’s Mouse Mutagenesis panel example tabular file. Data Table 3. Mutation data imported data.frame object sample dna00996.1 added metadata Mouse Mutagenesis Panels sequencing targets. Displays first 6 rows. Added columns ‘target_size’, ‘label’, ‘genic_context’, ‘region_GC_content’, ‘genome’, ‘in_regions’. Users can load example TwinStrand Mutagenesis Panels load_regions(). function output GRanges object. Custom panels may also loaded function providing file path regions parameter.","code":"imported_example_data <- import_mut_data(   mut_file = example_data,   sample_data = sample_metadata,   genome = \"mm10\",   species = \"mouse\",   masked_BS_genome = FALSE,   is_0_based_mut = TRUE,   regions = \"TSpanel_mouse\" ) region_example <- load_regions_file(\"TSpanel_mouse\") region_example GRanges object with 20 ranges and 5 metadata columns:        seqnames              ranges strand | target_size       label           <Rle>           <IRanges>  <Rle> |   <integer> <character>    [1]     chr1   69304218-69306617      * |        2400        chr1    [2]     chr1 155235939-155238338      * |        2400      chr1.2    [3]     chr2   50833176-50835575      * |        2400        chr2    [4]     chr3 109633161-109635560      * |        2400        chr3    [5]     chr4   96825281-96827680      * |        2400        chr4    ...      ...                 ...    ... .         ...         ...   [16]    chr15   66779763-66782162      * |        2400       chr15   [17]    chr16   72381581-72383980      * |        2400       chr16   [18]    chr17   94009029-94011428      * |        2400       chr17   [19]    chr18   81262079-81264478      * |        2400       chr18   [20]    chr19     4618814-4621213      * |        2400       chr19        genic_context region_GC_content      genome          <character>         <numeric> <character>    [1]    intergenic              37.3        mm10    [2]         genic              54.0        mm10    [3]    intergenic              45.3        mm10    [4]         genic              39.2        mm10    [5]    intergenic              39.4        mm10    ...           ...               ...         ...   [16]         genic              44.0        mm10   [17]    intergenic              38.3        mm10   [18]    intergenic              35.2        mm10   [19]    intergenic              47.3        mm10   [20]         genic              56.1        mm10   -------   seqinfo: 19 sequences from an unspecified genome; no seqlengths"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"custom-column-names","dir":"Articles","previous_headings":"","what":"Custom Column Names","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"recognize column names may differ specified Table ?@tbl-required-columns. Therefore, implemented default column name synonyms. column name matches one listed synonyms, automatically changed match set values. example, contig column may named chr chromosome. importing data, synonymous column name changed contig. Column names case-insensitive. list column name synonyms listed . Predefined column name synonyms. Synonyms automatically changed default Column value upon import. data contains column synonymous one required columns, name included synonyms list, column name may substituted using custom_column_names parameter. Provide parameter list names specify meaning column headers. Data Table 4. Mutation data imported tabular file custom column names. Displays first 6 rows. Custom column names changed default values.","code":"mut_data <- system.file(   \"extdata\", \"Example_files\",   \"example_import_mut_data_custom_col_names.txt\",   package = \"MutSeqR\" ) imported_example_data_custom <- import_mut_data(   mut_file = mut_data,   custom_column_names = list(my_contig_name = \"contig\",                              my_sample_name = \"sample\") ) Expected 'contig' but found 'my_contig_name', renaming it. Expected 'sample' but found 'my_sample_name', renaming it."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutation data can output either data frame GRanges object (see GenomicRanges) downstream analysis. Use output_granges parameter specify output. GRanges may faciliate use packages makes genomic based analyses ranges significantly easier. downstream analyses provided MutSeqR use data frame.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"variant-filtering","dir":"Articles","previous_headings":"","what":"Variant Filtering","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Following data import, mutation data may filtered using filter_mut() function. function flag variants based various parameters filter_mut column. Variants flagged TRUE filter_mut column automatically excluded downstream analyses calculate_mf(), plot_bubbles, signature_fitting. specified, function may also remove records mutation data. Flagging variants filter_mut column remove mutation data, however, excluded mutation counts downstream analyses. Filtered variants retained data total_depth values may still used frequency calculations. default, filtering parameters disabled. Users mindful filters use, ensuring first applicable data. Germline variants may identified flagged filtering setting vaf_cutoff parameter. variant allele fraction (vaf) fraction haploid genomes original sample harbor specific mutation specific base-pair coordinate reference genome. Specifically, calculated dividing number variant reads total sequencing depth specific base pair coordinate (alt_depth / total_depth). typical diploid cell, homozygous germline variant appear alleles, every cell. , expect variant occur every read, giving us vaf = 1. heterozygous germline variant occurs one two alleles every cell, expect variant occur half reads, giving vaf = 0.5. Somatic variants occur small portion cells, thus expect appear small percentage reads. Typical vaf values somatic variants less 0.01 - 0.1. Setting vaf_cutoff parameter flag variants vaf greater value germline within is_germline column. also flag variants filter_mut exclude downstream analyses. vaf germline filtering applicable users whose data sequenced sufficient depth. High coverage/low depth sequencing used calculate vaf, thus recommended filter germline mutations contrasting database known polymorphisms, using conventional whole-genome sequencing identify germline variants sample. filter_mut() function offers filtering options ensure quality mutation data. snv_in_germ_mnv = TRUE flag snvs overlap germline mnvs. Germline mnvs defined vaf > vaf_cutoff. snvs often artifacts variant calling. -calls reads supporting germline mnv create false minor-haplotypes original mnv can appear sub-clonal snvs, thus variants excluded downstream analyses. rm_abnormal_vaf = TRUE parameter identifies rows abnormal vaf values removes mutation data. Abnormal vaf values defined 0.05-0.45 0.55-0.95. typical diploid organism, expect variants vaf ~0, 0.5, 1, reflecting rare somatic variants, heterozygous variants, homozygous variants respectively. Users aware ploidy model system using filter. Non-diploid organisms may exhibit different vafs. rm_filtered_mut_from_depth = TRUE Variants flagged filter_mut column alt_depth subtracted total_depth. TRUE, parameter treats flagged variants -calls. apply variants idenfied germline variants. Users may use filter_mut() function flag remove variants based custom column. record contains custom_filter_val value within custom_filter_col column mutation data either flagged filter_mut column , specified custom_filter_rm parameter, removed mutation data. Users may remove rows either within outside specified genomic regions. Provide region ranges regions parameter. may provided either filepath, data frame, GRanges object. regions must contain contig (seqnames GRanges), start, end. function check whether record falls within given regions. Users can define filter used regions_filter. region_filter = \"remove_within\" remove rows whose positions overlap provided regions. region_filter = \"keep_within\" remove rows whose positions outside provided regions. default, records > 1bp must start end within regions count within region. allow_half_overlap = TRUE allow records start end within regions extend outside counted within region. Twinstrand Mutagenesis Panels may used setting regions one “TSpanel_human”, “TSpanel_mouse”, “TSpanel_rat”. function return mutation data data.frame object rows removed flagged depending input parameters. Added columns ‘filter_mut’, ‘filter_reason’, ‘is_germline’, ‘snv_mnv_overlaps’. return_filtered_rows = TRUE function return data.frame containing processed mutation data data.frame containing rows removed/flagged filtering process. two dataframes returned inside list, names mutation_data filtered_rows. function also print number mutations/rows filtered according parameter. Example 2. example file “example_mutation_data.rds” output import_mut_data() run 24 mouse libraries LeBlanc et al. (2022). Filters used: Filter germline variants: vaf < 0.01 Filter snvs overlapping germline variants alt_depth removed total_depth. Remove records outside TwinStrand Mouse Mutagenesis Panel. Filter variants contain “EndRepairFillInArtifact” “filter” column. alt_depth removed total_depth. Data Table 5. Filtered Mutation data 24 samples. Displayed 6 variants flagged filtering.","code":"# load the example data example_file <- system.file(   \"extdata\", \"Example_files\",   \"example_mutation_data.rds\",   package = \"MutSeqR\" ) example_data <- readRDS(example_file)  # Filter filtered_example_mutation_data <- filter_mut(   mutation_data = example_data,   vaf_cutoff = 0.01,   regions = \"TSpanel_mouse\",   regions_filter = \"keep_within\",   custom_filter_col = \"filter\",   custom_filter_val = \"EndRepairFillInArtifact\",   custom_filter_rm = FALSE,   snv_in_germ_mnv = TRUE,   rm_filtered_mut_from_depth = TRUE,   return_filtered_rows = FALSE ) Flagging germline mutations... Found 612 germline mutations. Flagging SNVs overlapping with germline MNVs... Found 20 SNVs overlapping with germline MNVs. Applying custom filter... Flagged 2021 rows with values in <filter> column that matched EndRepairFillInArtifact Applying region filter... Removed 22 rows based on regions. Removing filtered mutations from the total_depth... Filtering complete."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"germline-variants","dir":"Articles","previous_headings":"","what":"Germline Variants","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Germline variants may identified flagged filtering setting vaf_cutoff parameter. variant allele fraction (vaf) fraction haploid genomes original sample harbor specific mutation specific base-pair coordinate reference genome. Specifically, calculated dividing number variant reads total sequencing depth specific base pair coordinate (alt_depth / total_depth). typical diploid cell, homozygous germline variant appear alleles, every cell. , expect variant occur every read, giving us vaf = 1. heterozygous germline variant occurs one two alleles every cell, expect variant occur half reads, giving vaf = 0.5. Somatic variants occur small portion cells, thus expect appear small percentage reads. Typical vaf values somatic variants less 0.01 - 0.1. Setting vaf_cutoff parameter flag variants vaf greater value germline within is_germline column. also flag variants filter_mut exclude downstream analyses. vaf germline filtering applicable users whose data sequenced sufficient depth. High coverage/low depth sequencing used calculate vaf, thus recommended filter germline mutations contrasting database known polymorphisms, using conventional whole-genome sequencing identify germline variants sample.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"quality-assurance","dir":"Articles","previous_headings":"","what":"Quality Assurance","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"filter_mut() function offers filtering options ensure quality mutation data. snv_in_germ_mnv = TRUE flag snvs overlap germline mnvs. Germline mnvs defined vaf > vaf_cutoff. snvs often artifacts variant calling. -calls reads supporting germline mnv create false minor-haplotypes original mnv can appear sub-clonal snvs, thus variants excluded downstream analyses. rm_abnormal_vaf = TRUE parameter identifies rows abnormal vaf values removes mutation data. Abnormal vaf values defined 0.05-0.45 0.55-0.95. typical diploid organism, expect variants vaf ~0, 0.5, 1, reflecting rare somatic variants, heterozygous variants, homozygous variants respectively. Users aware ploidy model system using filter. Non-diploid organisms may exhibit different vafs. rm_filtered_mut_from_depth = TRUE Variants flagged filter_mut column alt_depth subtracted total_depth. TRUE, parameter treats flagged variants -calls. apply variants idenfied germline variants.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"custom-filtering","dir":"Articles","previous_headings":"","what":"Custom Filtering","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Users may use filter_mut() function flag remove variants based custom column. record contains custom_filter_val value within custom_filter_col column mutation data either flagged filter_mut column , specified custom_filter_rm parameter, removed mutation data.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"filtering-by-regions","dir":"Articles","previous_headings":"","what":"Filtering by Regions","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Users may remove rows either within outside specified genomic regions. Provide region ranges regions parameter. may provided either filepath, data frame, GRanges object. regions must contain contig (seqnames GRanges), start, end. function check whether record falls within given regions. Users can define filter used regions_filter. region_filter = \"remove_within\" remove rows whose positions overlap provided regions. region_filter = \"keep_within\" remove rows whose positions outside provided regions. default, records > 1bp must start end within regions count within region. allow_half_overlap = TRUE allow records start end within regions extend outside counted within region. Twinstrand Mutagenesis Panels may used setting regions one “TSpanel_human”, “TSpanel_mouse”, “TSpanel_rat”.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"output-1","dir":"Articles","previous_headings":"","what":"Output","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"function return mutation data data.frame object rows removed flagged depending input parameters. Added columns ‘filter_mut’, ‘filter_reason’, ‘is_germline’, ‘snv_mnv_overlaps’. return_filtered_rows = TRUE function return data.frame containing processed mutation data data.frame containing rows removed/flagged filtering process. two dataframes returned inside list, names mutation_data filtered_rows. function also print number mutations/rows filtered according parameter.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Example 2. example file “example_mutation_data.rds” output import_mut_data() run 24 mouse libraries LeBlanc et al. (2022). Filters used: Filter germline variants: vaf < 0.01 Filter snvs overlapping germline variants alt_depth removed total_depth. Remove records outside TwinStrand Mouse Mutagenesis Panel. Filter variants contain “EndRepairFillInArtifact” “filter” column. alt_depth removed total_depth. Data Table 5. Filtered Mutation data 24 samples. Displayed 6 variants flagged filtering.","code":"# load the example data example_file <- system.file(   \"extdata\", \"Example_files\",   \"example_mutation_data.rds\",   package = \"MutSeqR\" ) example_data <- readRDS(example_file)  # Filter filtered_example_mutation_data <- filter_mut(   mutation_data = example_data,   vaf_cutoff = 0.01,   regions = \"TSpanel_mouse\",   regions_filter = \"keep_within\",   custom_filter_col = \"filter\",   custom_filter_val = \"EndRepairFillInArtifact\",   custom_filter_rm = FALSE,   snv_in_germ_mnv = TRUE,   rm_filtered_mut_from_depth = TRUE,   return_filtered_rows = FALSE ) Flagging germline mutations... Found 612 germline mutations. Flagging SNVs overlapping with germline MNVs... Found 20 SNVs overlapping with germline MNVs. Applying custom filter... Flagged 2021 rows with values in <filter> column that matched EndRepairFillInArtifact Applying region filter... Removed 22 rows based on regions. Removing filtered mutations from the total_depth... Filtering complete."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"calculating-mf","dir":"Articles","previous_headings":"","what":"Calculating MF","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutation Frequency (MF) calculated dividing sum mutations sum total_depth given group (units mutations/bp). function calculate_mf() sums mutation counts total_depth across user-defined groupings within mutation data calculate MF. Mutations can summarised across samples, experimental groups, mutation subtypes later statistical analyses. Variants flagged TRUE filter_mut column excluded mutation sums; however, total_depth variants counted total_depth sum. total_depth available, function sum mutations across groups, without calculating mutation frequencies. Mutations counted based two opposing assumptions (Dodge et al. 2023): Minimum Independent Mutation Counting Method (min) mutation counted , regardless number reads contain non-reference allele. method assumes multiple instances mutation within sample result clonal expansion single mutational event. summing mutations across groups using Min method (sum_min), alt_depth variant set 1. Ex. 3 variants alt_depth values 1, 2, 10, sum_min= 3. Maximum Independent Mutation Counting Method (max) Multiple identical mutations position within sample counted independent mutation events. summing mutations across groups using Max method (sum_max), alt_depth variant summed unchanged. Ex. 3 variants alt_depth values 1, 2, 10, sum_max = 13. Min Max mutation counting methods undercount overcount mutations, respectively. expect recurrent mutations result clonal expansion. also expect recurrent mutations arise independently . expect true number independent mutations somewhere middle two counting methods, calculate frequencies methods. However, Min mutation counting method generally recommended statistical analyses ensure independance values Max method tends increase sample variance significant degree. Mutation counts total_depth summed across groups can designated using cols_to_group parameter. parameter can set one columns mutation data represent experimental variables interest. Example 3.1. Calculate mutation sums frequencies per sample. file “example_mutation_data_filtered.rds” output filter_mut() Example 2 Table 6. Global Mutation Frequency per Sample Alternatively, can sum mutations experimental groups label (genomic target). Counts frequencies returned every level designated groups. Example 3.2. Calculate mutation sums frequencies per sample genomic target. Table 7. Mutation Frequency per Sample genomic target. calculate_mf() calculate mean MF given group want calculate mean MF given experimental variable, may group “sample” retain experimental variable summary table averaging using retain_metadata_cols parameter. Example 3.3. Calculate mean MF per dose Table 8. Mean Mutation Frequency per Dose Group. Mutations can also grouped mutation subtype varying degrees resolution using subtype_resolution parameter. Definitions mutation subtype resolutions. Mutations total_depth summed across groups mutation subtype calculate frequencies. SNV subtypes, total_depth summed based sequence context SNV subtype occurs (subtype_depth). simplest example, base_6 SNV subtypes, two possible reference bases C T; hence, total_depth summed separately C:G positions T:positions. Thus, MF C>T mutations calculated total number C>T mutations divided total_depth C:G positions within group: sum / subtype_depth. Non-snv mutation subtypes, mnvs, insertions, deletions, complex variants, structural variants, calculated sum / group_depth, since can occur context nucleotide. Upon import mutation data, columns created facilitate grouping SNV subtypes associated sequence context various resolutions. columns associated subtype_resolution defined: Subtype Resolutions associated subtype/context columns. function also calculate proportion mutations eachsubtype, normalized total_depth:Ps=(MsDs)∑s(MsDs)P_s = \\frac{\\left(\\frac{M_s}{D_s}\\right)}{\\sum_s \\left(\\frac{M_s}{D_s}\\right)} PsP_s normalized mutation proportion subtype ss. MsM_s group mutation sum subtype ss. DsD_s group sum subtype_depth subtype ss. total_depth available mutation data, calculate_mf() return subtype mutation counts per group. also calculate subtype proportions, without normalizing total_depth:P′s=MsMtotalP'_s = \\frac{M_s}{M_{total}} , P′sP'_s non-normalized mutation proportion subtype ss. MsM_s group mutation sum subtype ss. MtotalM_{total} total mutation sum group. Example 3.4. following code return base_6 mutation spectra samples mutation proportions normalized depth. Table 9. Frequency Proportions 6-base Mutation Subtypes per Sample. calculate_mf() can used user-defined subset variation_type values. variant_types parameter can set character string variation_type values user wants include mutation counts. calculating group mutation sums, variants specified variation_types counted. total_depth records excluded variation_types still included group_depth subtype_depth, applicable. default function calculate summary values based mutation types. Example 3.5. Calculate global mutation frequencies per sample including insertion deletion mutations count. Table 10. Indel Mutation Frequency per Sample. Users may also supply list variation_types exclude variant_types parameter, long value preceeded “-”. Example 3.6. Calculate mutation frequencies “type” subtype resolution, excluding ambiguous uncategorized mutations. Table 11. Frequency Proportions Variation Types per Sample. Example 3.7. Include snv mutations base_96 resolution Table 12. Frequency Proportions 96-base Trinucleotide Subtypes per Sample. may cases genomic position represented multiple times within mutation data single sample. instance, require multiple different alternate alleles single position reported seperate rows. Another common example observed deletion calls. Often, deletion called, no_variant call start position also present. data includes total_depth record, want prevent double-counting depth positions summing depth across groups. set TRUE, correct_depth parameter correct depth positions. positions sample, contig, start values, total_depth retained one row. rows group total_depth set 0 beign summed. import functions automatically check duplicated rows return warning advising correct depth find mutation data. recommended users whose data contain total_depth values. default, correct_depth set TRUE. NOTE: case deletions no_variants: identifying deletion, variant callers re-align sequences. second total_depth value calculated, specifically deletion. variant caller provide no_variant deletion call, former initial depth, latter re-aligned depth value. Generally, correcting depth, function retain total_depth first row group, set rest 0. However, case deletions, function may prioritize retaining re-aligned total_depth total_depth assigned no_variant. prioritization can activated correct_depth_by_indel_priority parameter. mutation data include total_depth value sequenced site, precalculated depths specified groups can supplied separately calculate_mf() precalc_depth_data parameter. Depth provided correct subtype resolution level specified grouping variable. parameter accept either data frame filepath import depth data. Required columns : user-defined cols_to_group variable(s) group_depth: total_depth summed across cols_to_group. context column specified subtype_resolution. applicable using SNV resolutions (base_6, base_12, base_96, base_192). Column names listed table . subtype_depth: total_depth summed across cols_to_group context. applicable using SNV resolutions. Example 3.8. Use precalculated depth values calculate global per sample MF. Table 13.  ‘sample_depth’ - Precalculated Depth Data per sample. Table 14. Mutation Frequency per Sample, Precalculated Depth Example. Example 3.9. Use precalculated depth values calculate base_6 per sample MF. Table 16. Precalculated Depth Data per sample base_6 subtype resolution. Table 17. Frequency Proportions 6-base Subtypes per Sample, Precalculated Depth Example. function output resulting mf_data data frame MF proportion calculated. summary parameter set TRUE, data frame summary table MF calculated group. summary set FALSE, MF appended row original mutation_data. summary table include: cols_to_group: columns used group data. Subtype column given resolution, applicable. Context column given resolution, applicable. sum_min & sum_max: min/max mutation counts group(s)/subtypes. group_depth: total_depth summed across group(s). subtype_depth: total_depth summed across group(s), given context, applicable. MF_min & MF_max: min/max MF group(s)/subtype. proportion_min & proportion_max: min/max subtype proportion, applicable. Additional columns orginal mutation data can retained using retain_metadata_cols parameter. Retaining higher-order experimental groups may useful later statistical analyses plotting. See example calculating mean MF per dose. NOTE summary table uses pre-defined list possible subtypes resolution. particular subtype within given group recorded mutation data, summary table frame reference populating metadata_cols. Thus, subtypes occur mutation data given group, corresponding metadata_col NA. plot_mf plot_mean_mf() Example 3.10. Plot Min Max MF per sample, coloured ordered dose group. See example 3.1 calculating mf_data_global  Mutation Frequency (MF) Minimum Maximum (mutations/bp) per Sample. Light colored bars represent MFmin dark coloured bars represent MFmax. Bars coloured grouped dose. Data labels number mutations per sample. Calculate plot mean MF user-defined group using plot_mean_mf(). Example 3.11. Plot mean MF min per dose, including SEM individual values coloured dose. See example 3.1 calculating mf_data_global  Mean Mutation Frequency (MF) Minimum per Dose. Lines mean ± S.E.M. Points individual samples, coloured dose.","code":"# load example data: example_file <- system.file(   \"extdata\", \"Example_files\",   \"example_mutation_data_filtered.rds\",   package = \"MutSeqR\" ) example_data <- readRDS(example_file)  mf_data_global <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   retain_metadata_cols = c(\"dose_group\", \"dose\") ) mf_data_rg <- calculate_mf(   mutation_data = example_data,   cols_to_group = c(\"sample\", \"label\"),   subtype_resolution = \"none\",   retain_metadata_cols = \"dose_group\" ) mf_data_global <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   retain_metadata_cols = c(\"dose_group\", \"dose\") ) mean_mf <- mf_data_global %>%   dplyr::group_by(dose_group) %>%   dplyr::summarise(mean_mf_min = mean(mf_min),                    SE = sd(mf_min) / sqrt(dplyr::n())) mf_data_6 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_6\" ) mf_data_global_indels <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   variant_types = c(\"insertion\", \"deletion\") ) mf_data_types <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"type\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) mf_data_96 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_96\",   variant_types = \"snv\" ) sample_depth <- data.frame(   sample = unique(example_data$sample),   group_depth = c(565395266, 755574283, 639909215, 675090988, 598104021,                   611295330, 648531765, 713240735, 669734626, 684951248,                   716913381, 692323218, 297661400, 172863681, 672259724,                   740901132, 558051386, 733727643, 703349287, 884821671,                   743311822, 799605045, 677693752, 701163532) )  DT::datatable(sample_depth) mf_data_global_precalc <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   calculate_depth = FALSE,   precalc_depth_data = sample_depth ) mf_data_6_precalc <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_6\",   calculate_depth = FALSE,   precalc_depth = system.file(\"extdata\", \"Example_files\",                               \"precalc_depth_base_6_example.txt\",                               package = \"MutSeqR\") ) # Define the order for dose groups mf_data_global$dose_group <- factor(   mf_data_global$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) plot <- plot_mf(   mf_data = mf_data_global,   group_col = \"sample\",   plot_type = \"bar\",   mf_type = \"both\",   fill_col = \"dose_group\",   group_order = \"arranged\",   group_order_input = \"dose_group\" ) plot plot_mean <- plot_mean_mf(   mf_data = mf_data_global,   group_col = \"dose_group\",   mf_type = \"min\",   fill_col = \"dose_group\",   add_labels = \"none\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   plot_legend = FALSE,   x_lab = \"Dose Group\" ) plot_mean"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mutation-counting","dir":"Articles","previous_headings":"","what":"Mutation Counting","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutations counted based two opposing assumptions (Dodge et al. 2023): Minimum Independent Mutation Counting Method (min) mutation counted , regardless number reads contain non-reference allele. method assumes multiple instances mutation within sample result clonal expansion single mutational event. summing mutations across groups using Min method (sum_min), alt_depth variant set 1. Ex. 3 variants alt_depth values 1, 2, 10, sum_min= 3. Maximum Independent Mutation Counting Method (max) Multiple identical mutations position within sample counted independent mutation events. summing mutations across groups using Max method (sum_max), alt_depth variant summed unchanged. Ex. 3 variants alt_depth values 1, 2, 10, sum_max = 13. Min Max mutation counting methods undercount overcount mutations, respectively. expect recurrent mutations result clonal expansion. also expect recurrent mutations arise independently . expect true number independent mutations somewhere middle two counting methods, calculate frequencies methods. However, Min mutation counting method generally recommended statistical analyses ensure independance values Max method tends increase sample variance significant degree.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"grouping-mutations","dir":"Articles","previous_headings":"","what":"Grouping Mutations","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutation counts total_depth summed across groups can designated using cols_to_group parameter. parameter can set one columns mutation data represent experimental variables interest. Example 3.1. Calculate mutation sums frequencies per sample. file “example_mutation_data_filtered.rds” output filter_mut() Example 2 Table 6. Global Mutation Frequency per Sample Alternatively, can sum mutations experimental groups label (genomic target). Counts frequencies returned every level designated groups. Example 3.2. Calculate mutation sums frequencies per sample genomic target. Table 7. Mutation Frequency per Sample genomic target. calculate_mf() calculate mean MF given group want calculate mean MF given experimental variable, may group “sample” retain experimental variable summary table averaging using retain_metadata_cols parameter. Example 3.3. Calculate mean MF per dose Table 8. Mean Mutation Frequency per Dose Group.","code":"# load example data: example_file <- system.file(   \"extdata\", \"Example_files\",   \"example_mutation_data_filtered.rds\",   package = \"MutSeqR\" ) example_data <- readRDS(example_file)  mf_data_global <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   retain_metadata_cols = c(\"dose_group\", \"dose\") ) mf_data_rg <- calculate_mf(   mutation_data = example_data,   cols_to_group = c(\"sample\", \"label\"),   subtype_resolution = \"none\",   retain_metadata_cols = \"dose_group\" ) mf_data_global <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   retain_metadata_cols = c(\"dose_group\", \"dose\") ) mean_mf <- mf_data_global %>%   dplyr::group_by(dose_group) %>%   dplyr::summarise(mean_mf_min = mean(mf_min),                    SE = sd(mf_min) / sqrt(dplyr::n()))"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mutation-subtypes","dir":"Articles","previous_headings":"","what":"Mutation Subtypes","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutations can also grouped mutation subtype varying degrees resolution using subtype_resolution parameter. Definitions mutation subtype resolutions. Mutations total_depth summed across groups mutation subtype calculate frequencies. SNV subtypes, total_depth summed based sequence context SNV subtype occurs (subtype_depth). simplest example, base_6 SNV subtypes, two possible reference bases C T; hence, total_depth summed separately C:G positions T:positions. Thus, MF C>T mutations calculated total number C>T mutations divided total_depth C:G positions within group: sum / subtype_depth. Non-snv mutation subtypes, mnvs, insertions, deletions, complex variants, structural variants, calculated sum / group_depth, since can occur context nucleotide. Upon import mutation data, columns created facilitate grouping SNV subtypes associated sequence context various resolutions. columns associated subtype_resolution defined: Subtype Resolutions associated subtype/context columns. function also calculate proportion mutations eachsubtype, normalized total_depth:Ps=(MsDs)∑s(MsDs)P_s = \\frac{\\left(\\frac{M_s}{D_s}\\right)}{\\sum_s \\left(\\frac{M_s}{D_s}\\right)} PsP_s normalized mutation proportion subtype ss. MsM_s group mutation sum subtype ss. DsD_s group sum subtype_depth subtype ss. total_depth available mutation data, calculate_mf() return subtype mutation counts per group. also calculate subtype proportions, without normalizing total_depth:P′s=MsMtotalP'_s = \\frac{M_s}{M_{total}} , P′sP'_s non-normalized mutation proportion subtype ss. MsM_s group mutation sum subtype ss. MtotalM_{total} total mutation sum group. Example 3.4. following code return base_6 mutation spectra samples mutation proportions normalized depth. Table 9. Frequency Proportions 6-base Mutation Subtypes per Sample. calculate_mf() can used user-defined subset variation_type values. variant_types parameter can set character string variation_type values user wants include mutation counts. calculating group mutation sums, variants specified variation_types counted. total_depth records excluded variation_types still included group_depth subtype_depth, applicable. default function calculate summary values based mutation types. Example 3.5. Calculate global mutation frequencies per sample including insertion deletion mutations count. Table 10. Indel Mutation Frequency per Sample. Users may also supply list variation_types exclude variant_types parameter, long value preceeded “-”. Example 3.6. Calculate mutation frequencies “type” subtype resolution, excluding ambiguous uncategorized mutations. Table 11. Frequency Proportions Variation Types per Sample. Example 3.7. Include snv mutations base_96 resolution Table 12. Frequency Proportions 96-base Trinucleotide Subtypes per Sample.","code":"mf_data_6 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_6\" ) mf_data_global_indels <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   variant_types = c(\"insertion\", \"deletion\") ) mf_data_types <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"type\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) mf_data_96 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_96\",   variant_types = \"snv\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"selecting-variation-types","dir":"Articles","previous_headings":"5 Calculating MF","what":"Selecting Variation Types","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"calculate_mf() can used user-defined subset variation_type values. variant_types parameter can set character string variation_type values user wants include mutation counts. calculating group mutation sums, variants specified variation_types counted. total_depth records excluded variation_types still included group_depth subtype_depth, applicable. default function calculate summary values based mutation types. Example 3.5. Calculate global mutation frequencies per sample including insertion deletion mutations count. Table 10. Indel Mutation Frequency per Sample. Users may also supply list variation_types exclude variant_types parameter, long value preceeded “-”. Example 3.6. Calculate mutation frequencies “type” subtype resolution, excluding ambiguous uncategorized mutations. Table 11. Frequency Proportions Variation Types per Sample. Example 3.7. Include snv mutations base_96 resolution Table 12. Frequency Proportions 96-base Trinucleotide Subtypes per Sample.","code":"mf_data_global_indels <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   variant_types = c(\"insertion\", \"deletion\") ) mf_data_types <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"type\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) mf_data_96 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_96\",   variant_types = \"snv\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"correcting-depth","dir":"Articles","previous_headings":"","what":"Correcting Depth","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"may cases genomic position represented multiple times within mutation data single sample. instance, require multiple different alternate alleles single position reported seperate rows. Another common example observed deletion calls. Often, deletion called, no_variant call start position also present. data includes total_depth record, want prevent double-counting depth positions summing depth across groups. set TRUE, correct_depth parameter correct depth positions. positions sample, contig, start values, total_depth retained one row. rows group total_depth set 0 beign summed. import functions automatically check duplicated rows return warning advising correct depth find mutation data. recommended users whose data contain total_depth values. default, correct_depth set TRUE. NOTE: case deletions no_variants: identifying deletion, variant callers re-align sequences. second total_depth value calculated, specifically deletion. variant caller provide no_variant deletion call, former initial depth, latter re-aligned depth value. Generally, correcting depth, function retain total_depth first row group, set rest 0. However, case deletions, function may prioritize retaining re-aligned total_depth total_depth assigned no_variant. prioritization can activated correct_depth_by_indel_priority parameter.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"precalculated-depth","dir":"Articles","previous_headings":"","what":"Precalculated Depth","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"mutation data include total_depth value sequenced site, precalculated depths specified groups can supplied separately calculate_mf() precalc_depth_data parameter. Depth provided correct subtype resolution level specified grouping variable. parameter accept either data frame filepath import depth data. Required columns : user-defined cols_to_group variable(s) group_depth: total_depth summed across cols_to_group. context column specified subtype_resolution. applicable using SNV resolutions (base_6, base_12, base_96, base_192). Column names listed table . subtype_depth: total_depth summed across cols_to_group context. applicable using SNV resolutions. Example 3.8. Use precalculated depth values calculate global per sample MF. Table 13.  ‘sample_depth’ - Precalculated Depth Data per sample. Table 14. Mutation Frequency per Sample, Precalculated Depth Example. Example 3.9. Use precalculated depth values calculate base_6 per sample MF. Table 16. Precalculated Depth Data per sample base_6 subtype resolution. Table 17. Frequency Proportions 6-base Subtypes per Sample, Precalculated Depth Example.","code":"sample_depth <- data.frame(   sample = unique(example_data$sample),   group_depth = c(565395266, 755574283, 639909215, 675090988, 598104021,                   611295330, 648531765, 713240735, 669734626, 684951248,                   716913381, 692323218, 297661400, 172863681, 672259724,                   740901132, 558051386, 733727643, 703349287, 884821671,                   743311822, 799605045, 677693752, 701163532) )  DT::datatable(sample_depth) mf_data_global_precalc <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   calculate_depth = FALSE,   precalc_depth_data = sample_depth ) mf_data_6_precalc <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_6\",   calculate_depth = FALSE,   precalc_depth = system.file(\"extdata\", \"Example_files\",                               \"precalc_depth_base_6_example.txt\",                               package = \"MutSeqR\") )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"summary-table","dir":"Articles","previous_headings":"","what":"Summary Table","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"function output resulting mf_data data frame MF proportion calculated. summary parameter set TRUE, data frame summary table MF calculated group. summary set FALSE, MF appended row original mutation_data. summary table include: cols_to_group: columns used group data. Subtype column given resolution, applicable. Context column given resolution, applicable. sum_min & sum_max: min/max mutation counts group(s)/subtypes. group_depth: total_depth summed across group(s). subtype_depth: total_depth summed across group(s), given context, applicable. MF_min & MF_max: min/max MF group(s)/subtype. proportion_min & proportion_max: min/max subtype proportion, applicable. Additional columns orginal mutation data can retained using retain_metadata_cols parameter. Retaining higher-order experimental groups may useful later statistical analyses plotting. See example calculating mean MF per dose. NOTE summary table uses pre-defined list possible subtypes resolution. particular subtype within given group recorded mutation data, summary table frame reference populating metadata_cols. Thus, subtypes occur mutation data given group, corresponding metadata_col NA.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mf-plots","dir":"Articles","previous_headings":"","what":"MF Plots","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"plot_mf plot_mean_mf() Example 3.10. Plot Min Max MF per sample, coloured ordered dose group. See example 3.1 calculating mf_data_global  Mutation Frequency (MF) Minimum Maximum (mutations/bp) per Sample. Light colored bars represent MFmin dark coloured bars represent MFmax. Bars coloured grouped dose. Data labels number mutations per sample. Calculate plot mean MF user-defined group using plot_mean_mf(). Example 3.11. Plot mean MF min per dose, including SEM individual values coloured dose. See example 3.1 calculating mf_data_global  Mean Mutation Frequency (MF) Minimum per Dose. Lines mean ± S.E.M. Points individual samples, coloured dose.","code":"# Define the order for dose groups mf_data_global$dose_group <- factor(   mf_data_global$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) plot <- plot_mf(   mf_data = mf_data_global,   group_col = \"sample\",   plot_type = \"bar\",   mf_type = \"both\",   fill_col = \"dose_group\",   group_order = \"arranged\",   group_order_input = \"dose_group\" ) plot plot_mean <- plot_mean_mf(   mf_data = mf_data_global,   group_col = \"dose_group\",   mf_type = \"min\",   fill_col = \"dose_group\",   add_labels = \"none\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   plot_legend = FALSE,   x_lab = \"Dose Group\" ) plot_mean"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"modeling-mf","dir":"Articles","previous_headings":"","what":"Modeling MF","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"important component analysing mutagencity data MF changes based experimental variables. model_mf() function can used quantitatively evaluate MF changes based experimental variables. function models proportion reads carry mutation (.e. MF) across user-supplied fixed /random effects interaction parameters. Depending supplied effects, model_mf() automatically choose fit either generalized linear model (GLM) using glm() function stats library generalized linear mixed model (GLMM) using glmer() function lme4 library. Fixed effects: experimental variable(s)/factor(s) interest. Random effects: Variable used account variability within larger group. Covariate. Interaction: product two interacting fixed_effects. interaction implies effect one fixed effect changes depending levels another fixed effect, indicating non-additive reationship. Response: function model MF, taking mutation count (sum) group_depth input. model formula built : cbind(sum, group_depth) ~ fixed_effect1 + fixed_effect2 + ... + (1|random_effect) test_interaction set TRUE, model use product fixed_effects: cbind(sum, group_depth) ~ fixed_effect1 * fixed_effect2 * ... + (1|random_effect) occurence mutations assumed follow binomial distribution : finite number sequenced bases. mutation given base equally probable. Mutations occur independently mutations. account -dispersion, function fit GLM quasibinomial distribution. dispersion parameter model less 1, model refit using binomial distribution. GLMM always use binomial distribution. model_mf function fit generalized linear model analyse effect(s) given fixed_effects(s) MF perform specified pairwise comparisons levels factors. Additional arguments can passed model customize needs. Details arguments generalized linear model can found stats::glm general linear mixed model lme4::glmer. model_mf() provides estimates mean level fixed effects. Furthermore, pairwise comparisons can performed based user-supplied table. Mean estimates comparisons conducted using doBy R library (Halekoh Højsgaard 2025). Estimates back-transformed standard errors approximated using delta method. p-values adjusted multiple comparisons using Sidak method. model_mf function output Pearson residuals appended mf_data. row highest residual printed console users may assess outlier. Additionally, Pearson residuals plotted histogram QQ-plot check deviances model assumptions. assume residuals follow normal distribution mean 0. Thus, expect histogram follow bell curve QQ-plot plotted along y=x line. Mutation data first summarised sample using calculate_mf(). mf_data output summary table. sure retain columns experimental variables interest using retain_metadata_cols parameter. may specify factors covariates model using fixed_effects random_effects parameters respectively. one fixed_effect supplied, may specify whether wish test interaction fixed_effects using test_interaction parameter. must specify columns mf_data contain mutation counts total_depth per sample using muts total_counts parameters respectively. perform pairwise comparisons levels fixed effects, supply constrast table using contrasts parameter. can either data frame filepath text file loaded R. table must consist two columns, containing levels within fixed_effects. level first column compared level second column row. also provide reference level fixed effect using reference_level parameter. specify multiple pairwise comparisons, p-values automatically corrected multiple comparisons using Sidak method. multiple fixed effects, user must include levels fixed_effects value contrasts table. Within value, levels different fixed_effects seperated colon. function output list results. model: glmm glmer model object. model_formula: formula given glm glmer. model_data: supplied mf_data added column Pearson residuals. summary: summary model. anova: analysis variance models two fixed_effects. See car::Anova.. residuals_histogram: Pearson residuals plotted histogram. used check whether variance normally distributed. symmetric bell-shaped histogram, evenly distributed around zero indicates normality assumption likely true. residuals_qq_plot: Pearson residuals plotted quantile-quantile plot. normal distribution, expect points roughly follow y=x line. point_estimates_matrix: contrast matrix used generate point-estimates fixed effects. point_estimates: point estimates fixed effects. pairwise_comparisons_matrix: contrast matrix used conduct pairwise comparisons specified contrasts. pairwise_comparisons: results pairwise comparisons specified contrasts. Residuals Histogram Residuals QQ-plot Model Summary Model Estimates Pairwise Comparisons  GLM residuals MFmin modelled effect Dose. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLM residuals MFmin modelled effect Dose expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 18. model_by_dose$point_estimates: Estimated Mean Mutation Frequency per Dose. Table 19. model_by_dose$pairwise_comparisons Residuals Histogram Residuals QQ-plot Model Summary ANOVA Model Estimates Pairwise Comparisons  GLMM residuals MFmin modelled effect Dose Genomic Target. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLMM residuals MFmin modelled effect Dose Genomic Target expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 20. model_by_target$point_estimates: Estimated Mean Mutation Frequency per Dose Genomic Target. Table 21. model_by_target$pairwise_comparisons. Plot Model Dose Plot Model Dose Target  Mean Mutation Frequency Minimum (mutations/bp) per Dose estimated using generalized linear model. Error bars S.E.M. Symbols indicate significance differences (p < 0.05). example, made comparisons dose groups. contrast, held label (target) constant. Thus, set ref_effect dose_group significance labels generated indicate differences dose, label.  Mean Mutation Frequency Minimum (mutations/bp) per Genomic Target Dose estimated using generalized linear mixed model. Error bars SEM. Symbols indicate significance differences (p < 0.05) dose levels individual genomic regions. Dose-response models essential quatitative risk assessment mutagenicity, provide framework evaluate levels exposure substance might cause adverse effect. benchmark dose (BMD) dose produces predetermined change measured response, defined benchmark response (BMR). BMD used point departure derive human health-based guidance values inform regulatory risk assessment reference dose (RfD), derived -effect level (DNEL) acceptable daily intake (ADI). BMD estimated applying various mathmatical models fit dose-response data. requirements must met modelling BMD. must clear dose-response trend MF data. suggest using model_mf() test significant increases MF dose prior running BMD analysis. general, studies dose groups graded monotonic response dose useful BMD analysis. minimum three dose groups + 1 control group suggested. Datasets response observed high dose usually suitable BMD modeling. However, one elevated response near BMR, adequate BMD computation may result. better estimate BMD, preferable studies one doses near level BMR. Protection safety authorities recommend use model averaging determine BMD confidence intervals. Model averaging incorporates information across multiple models acount model uncertainty, allowing BMD accurately estimated. Ideally, BMR based consensus scientific definition minimal level change MF biologically significant. Currently, default provided package calculates BMD 50% relative increase MF background. BMR selected based previous recommendations genotoxicity assessment White, Long, Johnson (2020). MutSeqR provides two functions BMD modelling, employing widely-used software designed consistent methods used regulatory authorities. bmd_proast() runs modified version proast71.1 R library parametirized instead menu-based. bmd_toxicr uses ToxicR library, available Github. bmd_proast analyze continuous, individual MF data following log transformation. PROAST uses four families nested models: exponential, Hill, inverse exponential, log-normal. Akaike information criterion (AIC) used select best fit. BMD confidence intervals assessed Maximum Likelihood Profile method, model averaging via bootstrapping (recommended). BMR values user-defined relative increase MF control. Alternatively, users may set BMR one standard-deviation control. Supply bmd_proast per-sample mf data calculated using calculate_mf(), dose column retained summary table. Dose column must numeric. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. wish include covariate analysis, supply covariate variable covariate_col. PROAST assess BMD values differ significantly levels covariate give BMD estimate . highly recommended use model averaging calculating BMD confidence intervals. Specify number bootstraps run num_bootstraps. recommended value 200, aware may take time run. PROAST model averaging return upper lower 90% BMD confidence intervals. MutSeqR calculates model-averaged BMD value median BMD bootstrap runs. Users may choose generate model plots plot_results. Plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots automcatically displayed returned within list alongside BMD summary results. function output data frame final results, including BMD estimate model family model averaging results, applicable. Users may access raw, unparsed PROAST results setting raw_results = TRUE. Example 5.1. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. * See example 3.1 calculating mf_data_global.* Table 22. BMD Estimates PROAST. bmd_toxicr analyze continuous, individual continuous, summary MF data, assuming either normal (default) log-normal distribution. function employs Bayesian estimation using either Laplace Maximum posteriori approach (default) (Gelman et al. 1995) Markov chain Monte Carlo (MCMC) simulation (Brooks et al. 2011). default model parameter’s prior distributions specified (Wheeler et al. 2020), user-modifiable. default models described European Food Safety Authority’s 2022 Guidance use benchmark dose approach risk assessment (Committee et al. 2022). Model averaging may applied using described methodologies (Wheeler et al. (2020); Wheeler et al. (2022)). ToxicR offers several options BMR: Relative deviation (rel): BMD represents dose changes mean MF certain percentage background dose. Standard deviation (sd): BMD represents dose associated mean MF changing specified number standard deviations background mean. Absolute deviation (abs): BMD represents dose associated specified absolute deviation background mean. Hybrid deviation (hybrid): BMD represents dose changes probability adverse event specified amount. One options can specified using bmr_type parameter. bmr parameter set numeric value specifying BMR, defined relation calculation requested bmr_type. Selecting appropriate BMR involves making judgements statistical biological characteristics dataset applications resuling BMDs used. See ToxicR repository github information installing package. Examples include external dependencies Supply bmd_toxicr per-sample mf data calculate_mf(). Retain dose column summary table. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. Calculate BMD model averaging setting model_averaging = TRUE. confidence level upper lower confidence intervals can defined alpha parameter (default 90% CI). Users may choose generate model plots plot_results. TRUE, plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots returned within list alongside BMD results. function return BMD upper lower confidence intervals response variable. model averaging, breakdown model averaging process can returned alongside results ma_summary = TRUE. return estimate model associated posterior probability. Example 5.2. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. See example 3.1 calculation mf_data_global. plot_ci() creates confidence interval (CI) plot BMD results easy comparison BMDs response variables. BMD values can plotted log scale, required. Example 5.3. Compare estimated BMD MFmin (50% relative increase) PROAST versus ToxicR  Benchmark dose 90% confidence intervals representing dose , 50% increase mutation frequency occurs reference level. Calculated using ROAST software. Black points represent BMD, red points BMDL, blue points, BMDU","code":"model_by_dose$summary Call: stats::glm(formula = model_formula, family = \"quasibinomial\",     data = mf_data)  Coefficients:                   Estimate Std. Error  t value Pr(>|t|) (Intercept)      -15.56285    0.08290 -187.736  < 2e-16 *** dose_groupLow      0.67512    0.10066    6.707 1.58e-06 *** dose_groupMedium   1.29746    0.09563   13.567 1.51e-11 *** dose_groupHigh     1.69485    0.08915   19.011 2.84e-14 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for quasibinomial family taken to be 4.604243)      Null deviance: 2919.634  on 23  degrees of freedom Residual deviance:   89.569  on 20  degrees of freedom AIC: NA  Number of Fisher Scoring iterations: 5 model_by_target$summary Generalized linear mixed model fit by maximum likelihood (Laplace   Approximation) [glmerMod]  Family: binomial  ( logit ) Formula: cbind(sum_min, group_depth) ~ dose_group * label + (1 | sample)    Data: mf_data Control: ..1        AIC       BIC    logLik -2*log(L)  df.resid    2825.5    3163.6   -1331.7    2663.5       399  Scaled residuals:     Min      1Q  Median      3Q     Max -2.7513 -0.7140 -0.0326  0.6138  5.4812  Random effects:  Groups Name        Variance Std.Dev.  sample (Intercept) 0.01088  0.1043 Number of obs: 480, groups:  sample, 24  Fixed effects:                                Estimate Std. Error z value Pr(>|z|) (Intercept)                  -1.596e+01  2.222e-01 -71.807  < 2e-16 *** dose_groupHigh                1.903e+00  2.395e-01   7.947 1.92e-15 *** dose_groupLow                 6.208e-01  2.738e-01   2.267 0.023380 * dose_groupMedium              1.293e+00  2.612e-01   4.951 7.39e-07 *** labelchr1.2                   1.382e-01  2.824e-01   0.489 0.624624 labelchr10                    4.517e-01  2.682e-01   1.684 0.092109 . labelchr11                    8.366e-01  2.641e-01   3.168 0.001535 ** labelchr12                    5.183e-01  2.660e-01   1.948 0.051365 . labelchr13                    1.984e-02  2.908e-01   0.068 0.945593 labelchr14                    6.560e-01  2.671e-01   2.456 0.014043 * labelchr15                    5.084e-01  2.660e-01   1.911 0.056012 . labelchr16                    7.757e-01  2.693e-01   2.881 0.003970 ** labelchr17                    4.593e-01  2.885e-01   1.592 0.111307 labelchr18                   -7.519e-03  2.958e-01  -0.025 0.979721 labelchr19                   -2.378e-01  3.084e-01  -0.771 0.440585 labelchr2                     6.258e-01  2.660e-01   2.352 0.018661 * labelchr3                     2.568e-01  2.863e-01   0.897 0.369732 labelchr4                     5.106e-01  2.773e-01   1.841 0.065603 . labelchr5                     4.209e-01  2.824e-01   1.490 0.136186 labelchr6                     2.937e-01  2.806e-01   1.046 0.295350 labelchr7                    -3.983e-04  2.958e-01  -0.001 0.998926 labelchr8                     4.383e-01  2.908e-01   1.507 0.131704 labelchr9                     7.000e-01  2.671e-01   2.621 0.008766 ** dose_groupHigh:labelchr1.2   -2.483e-01  3.022e-01  -0.822 0.411347 dose_groupLow:labelchr1.2    -2.540e-03  3.459e-01  -0.007 0.994141 dose_groupMedium:labelchr1.2 -2.494e-02  3.289e-01  -0.076 0.939548 dose_groupHigh:labelchr10    -4.750e-01  2.882e-01  -1.648 0.099285 . dose_groupLow:labelchr10     -3.356e-01  3.360e-01  -0.999 0.317857 dose_groupMedium:labelchr10  -3.318e-01  3.167e-01  -1.048 0.294861 dose_groupHigh:labelchr11    -5.554e-02  2.809e-01  -0.198 0.843268 dose_groupLow:labelchr11      4.252e-01  3.174e-01   1.340 0.180390 dose_groupMedium:labelchr11   4.359e-01  3.029e-01   1.439 0.150068 dose_groupHigh:labelchr12    -1.676e-01  2.836e-01  -0.591 0.554373 dose_groupLow:labelchr12     -1.544e-01  3.287e-01  -0.470 0.638477 dose_groupMedium:labelchr12  -1.756e-01  3.115e-01  -0.564 0.572958 dose_groupHigh:labelchr13    -3.978e-01  3.125e-01  -1.273 0.202970 dose_groupLow:labelchr13      2.170e-03  3.561e-01   0.006 0.995138 dose_groupMedium:labelchr13  -2.386e-01  3.425e-01  -0.697 0.486037 dose_groupHigh:labelchr14     1.207e-01  2.832e-01   0.426 0.670094 dose_groupLow:labelchr14      2.822e-01  3.228e-01   0.874 0.381936 dose_groupMedium:labelchr14   4.877e-01  3.055e-01   1.596 0.110378 dose_groupHigh:labelchr15    -1.145e+00  2.935e-01  -3.903 9.51e-05 *** dose_groupLow:labelchr15     -4.122e-01  3.348e-01  -1.231 0.218290 dose_groupMedium:labelchr15  -6.712e-01  3.214e-01  -2.088 0.036792 * dose_groupHigh:labelchr16    -2.607e-01  2.878e-01  -0.906 0.364977 dose_groupLow:labelchr16      1.133e-01  3.279e-01   0.346 0.729681 dose_groupMedium:labelchr16   6.542e-02  3.125e-01   0.209 0.834154 dose_groupHigh:labelchr17     1.326e-01  3.059e-01   0.434 0.664586 dose_groupLow:labelchr17      3.705e-01  3.457e-01   1.072 0.283845 dose_groupMedium:labelchr17   3.523e-01  3.308e-01   1.065 0.286780 dose_groupHigh:labelchr18     3.822e-01  3.118e-01   1.226 0.220225 dose_groupLow:labelchr18      4.491e-01  3.525e-01   1.274 0.202678 dose_groupMedium:labelchr18   5.986e-01  3.347e-01   1.789 0.073665 . dose_groupHigh:labelchr19     6.478e-02  3.273e-01   0.198 0.843111 dose_groupLow:labelchr19      3.157e-01  3.689e-01   0.856 0.392152 dose_groupMedium:labelchr19   3.342e-01  3.522e-01   0.949 0.342680 dose_groupHigh:labelchr2     -6.041e-01  2.869e-01  -2.106 0.035210 * dose_groupLow:labelchr2      -2.459e-01  3.312e-01  -0.742 0.457836 dose_groupMedium:labelchr2   -2.993e-01  3.138e-01  -0.954 0.340146 dose_groupHigh:labelchr3     -1.072e+00  3.178e-01  -3.375 0.000739 *** dose_groupLow:labelchr3      -5.817e-01  3.701e-01  -1.572 0.116009 dose_groupMedium:labelchr3   -6.911e-01  3.503e-01  -1.973 0.048510 * dose_groupHigh:labelchr4     -2.788e-01  2.967e-01  -0.940 0.347321 dose_groupLow:labelchr4      -1.492e-01  3.434e-01  -0.435 0.663885 dose_groupMedium:labelchr4   -5.001e-02  3.234e-01  -0.155 0.877121 dose_groupHigh:labelchr5     -2.603e-01  3.023e-01  -0.861 0.389180 dose_groupLow:labelchr5      -4.738e-02  3.471e-01  -0.136 0.891432 dose_groupMedium:labelchr5   -1.236e-01  3.312e-01  -0.373 0.709068 dose_groupHigh:labelchr6     -2.353e-01  2.999e-01  -0.785 0.432557 dose_groupLow:labelchr6      -4.394e-02  3.448e-01  -0.127 0.898606 dose_groupMedium:labelchr6   -2.395e-01  3.307e-01  -0.724 0.468894 dose_groupHigh:labelchr7      1.376e-01  3.131e-01   0.439 0.660386 dose_groupLow:labelchr7       4.021e-01  3.530e-01   1.139 0.254618 dose_groupMedium:labelchr7    5.092e-01  3.355e-01   1.518 0.129058 dose_groupHigh:labelchr8      2.822e-01  3.074e-01   0.918 0.358623 dose_groupLow:labelchr8       5.457e-01  3.454e-01   1.580 0.114098 dose_groupMedium:labelchr8    6.388e-01  3.299e-01   1.936 0.052824 . dose_groupHigh:labelchr9     -4.547e-01  2.867e-01  -1.586 0.112740 dose_groupLow:labelchr9      -1.701e-01  3.304e-01  -0.515 0.606713 dose_groupMedium:labelchr9   -4.265e-01  3.172e-01  -1.345 0.178701 --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 model_by_target$anova Analysis of Deviance Table (Type II Wald chisquare tests)  Response: cbind(sum_min, group_depth)                    Chisq Df Pr(>Chisq) dose_group        600.61  3  < 2.2e-16 *** label            1239.68 19  < 2.2e-16 *** dose_group:label  129.41 57  1.493e-07 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 plot <- plot_model_mf(   model_by_dose,   plot_type = \"bar\",   x_effect = \"dose\",   plot_error_bars = TRUE,   plot_signif = TRUE,   x_order = c(\"Control\", \"Low\", \"Medium\", \"High\"),   x_label = \"Dose Group\",   y_label = \"Estimated Mean Mutation Frequency (mutations/bp)\" ) plot # Define the order of the genomic targets for the x-axis: # We will order them from lowest to highest MF at the High dose. label_order <- model_by_target$point_estimates %>%   dplyr::filter(dose_group == \"High\") %>%   dplyr::arrange(Estimate) %>%   dplyr::pull(label)  # Define the order of the doses for the fill dose_order <- c(\"Control\", \"Low\", \"Medium\", \"High\")  plot <- plot_model_mf(   model = model_by_target,   plot_type = \"bar\",   x_effect = \"label\",   plot_error_bars = TRUE,   plot_signif = TRUE,   ref_effect = \"dose_group\",   x_order = label_order,   fill_order = dose_order,   x_label = \"Target\",   y_label = \"Mutation Frequency (mutations/bp)\",   fill_label = \"Dose\",   plot_title = \"\",   custom_palette = c(\"#ef476f\",                      \"#ffd166\",                      \"#06d6a0\",                      \"#118ab2\") ) # Rotate the x-axis labels for clarity using ggplot2 functions. plot <- plot + ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90)) plot proast_results <- bmd_proast(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr = 0.5,   model_averaging = TRUE,   num_bootstraps = 10, # recommended value 200   plot_results = FALSE ) devtools::install_github(\"NIEHS/ToxicR\") toxicr_results <- bmd_toxicr(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr_type = \"rel\",   bmr = 0.5,   model_averaging = TRUE,   ma_summary = TRUE,   plot_results = FALSE ) toxicr_results plot_results <- data.frame(   Response = c(\"PROAST\", \"ToxicR\"),   BMD = c(9.111, 9.641894),   BMDL = c(7.38, 8.032936),   BMDU = c(10.9, 10.97636) ) plot <- plot_ci(   data = plot_results,   order = \"asc\",   x_lab = \"Dose (mg/kg-bw/d)\",   y_lab = \"BMD Method\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"generalized-linear-modeling","dir":"Articles","previous_headings":"","what":"Generalized Linear Modeling","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"important component analysing mutagencity data MF changes based experimental variables. model_mf() function can used quantitatively evaluate MF changes based experimental variables. function models proportion reads carry mutation (.e. MF) across user-supplied fixed /random effects interaction parameters. Depending supplied effects, model_mf() automatically choose fit either generalized linear model (GLM) using glm() function stats library generalized linear mixed model (GLMM) using glmer() function lme4 library. Fixed effects: experimental variable(s)/factor(s) interest. Random effects: Variable used account variability within larger group. Covariate. Interaction: product two interacting fixed_effects. interaction implies effect one fixed effect changes depending levels another fixed effect, indicating non-additive reationship. Response: function model MF, taking mutation count (sum) group_depth input. model formula built : cbind(sum, group_depth) ~ fixed_effect1 + fixed_effect2 + ... + (1|random_effect) test_interaction set TRUE, model use product fixed_effects: cbind(sum, group_depth) ~ fixed_effect1 * fixed_effect2 * ... + (1|random_effect) occurence mutations assumed follow binomial distribution : finite number sequenced bases. mutation given base equally probable. Mutations occur independently mutations. account -dispersion, function fit GLM quasibinomial distribution. dispersion parameter model less 1, model refit using binomial distribution. GLMM always use binomial distribution. model_mf function fit generalized linear model analyse effect(s) given fixed_effects(s) MF perform specified pairwise comparisons levels factors. Additional arguments can passed model customize needs. Details arguments generalized linear model can found stats::glm general linear mixed model lme4::glmer. model_mf() provides estimates mean level fixed effects. Furthermore, pairwise comparisons can performed based user-supplied table. Mean estimates comparisons conducted using doBy R library (Halekoh Højsgaard 2025). Estimates back-transformed standard errors approximated using delta method. p-values adjusted multiple comparisons using Sidak method. model_mf function output Pearson residuals appended mf_data. row highest residual printed console users may assess outlier. Additionally, Pearson residuals plotted histogram QQ-plot check deviances model assumptions. assume residuals follow normal distribution mean 0. Thus, expect histogram follow bell curve QQ-plot plotted along y=x line. Mutation data first summarised sample using calculate_mf(). mf_data output summary table. sure retain columns experimental variables interest using retain_metadata_cols parameter. may specify factors covariates model using fixed_effects random_effects parameters respectively. one fixed_effect supplied, may specify whether wish test interaction fixed_effects using test_interaction parameter. must specify columns mf_data contain mutation counts total_depth per sample using muts total_counts parameters respectively. perform pairwise comparisons levels fixed effects, supply constrast table using contrasts parameter. can either data frame filepath text file loaded R. table must consist two columns, containing levels within fixed_effects. level first column compared level second column row. also provide reference level fixed effect using reference_level parameter. specify multiple pairwise comparisons, p-values automatically corrected multiple comparisons using Sidak method. multiple fixed effects, user must include levels fixed_effects value contrasts table. Within value, levels different fixed_effects seperated colon. function output list results. model: glmm glmer model object. model_formula: formula given glm glmer. model_data: supplied mf_data added column Pearson residuals. summary: summary model. anova: analysis variance models two fixed_effects. See car::Anova.. residuals_histogram: Pearson residuals plotted histogram. used check whether variance normally distributed. symmetric bell-shaped histogram, evenly distributed around zero indicates normality assumption likely true. residuals_qq_plot: Pearson residuals plotted quantile-quantile plot. normal distribution, expect points roughly follow y=x line. point_estimates_matrix: contrast matrix used generate point-estimates fixed effects. point_estimates: point estimates fixed effects. pairwise_comparisons_matrix: contrast matrix used conduct pairwise comparisons specified contrasts. pairwise_comparisons: results pairwise comparisons specified contrasts. Residuals Histogram Residuals QQ-plot Model Summary Model Estimates Pairwise Comparisons  GLM residuals MFmin modelled effect Dose. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLM residuals MFmin modelled effect Dose expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 18. model_by_dose$point_estimates: Estimated Mean Mutation Frequency per Dose. Table 19. model_by_dose$pairwise_comparisons Residuals Histogram Residuals QQ-plot Model Summary ANOVA Model Estimates Pairwise Comparisons  GLMM residuals MFmin modelled effect Dose Genomic Target. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLMM residuals MFmin modelled effect Dose Genomic Target expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 20. model_by_target$point_estimates: Estimated Mean Mutation Frequency per Dose Genomic Target. Table 21. model_by_target$pairwise_comparisons. Plot Model Dose Plot Model Dose Target  Mean Mutation Frequency Minimum (mutations/bp) per Dose estimated using generalized linear model. Error bars S.E.M. Symbols indicate significance differences (p < 0.05). example, made comparisons dose groups. contrast, held label (target) constant. Thus, set ref_effect dose_group significance labels generated indicate differences dose, label.  Mean Mutation Frequency Minimum (mutations/bp) per Genomic Target Dose estimated using generalized linear mixed model. Error bars SEM. Symbols indicate significance differences (p < 0.05) dose levels individual genomic regions.","code":"model_by_dose$summary Call: stats::glm(formula = model_formula, family = \"quasibinomial\",     data = mf_data)  Coefficients:                   Estimate Std. Error  t value Pr(>|t|) (Intercept)      -15.56285    0.08290 -187.736  < 2e-16 *** dose_groupLow      0.67512    0.10066    6.707 1.58e-06 *** dose_groupMedium   1.29746    0.09563   13.567 1.51e-11 *** dose_groupHigh     1.69485    0.08915   19.011 2.84e-14 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for quasibinomial family taken to be 4.604243)      Null deviance: 2919.634  on 23  degrees of freedom Residual deviance:   89.569  on 20  degrees of freedom AIC: NA  Number of Fisher Scoring iterations: 5 model_by_target$summary Generalized linear mixed model fit by maximum likelihood (Laplace   Approximation) [glmerMod]  Family: binomial  ( logit ) Formula: cbind(sum_min, group_depth) ~ dose_group * label + (1 | sample)    Data: mf_data Control: ..1        AIC       BIC    logLik -2*log(L)  df.resid    2825.5    3163.6   -1331.7    2663.5       399  Scaled residuals:     Min      1Q  Median      3Q     Max -2.7513 -0.7140 -0.0326  0.6138  5.4812  Random effects:  Groups Name        Variance Std.Dev.  sample (Intercept) 0.01088  0.1043 Number of obs: 480, groups:  sample, 24  Fixed effects:                                Estimate Std. Error z value Pr(>|z|) (Intercept)                  -1.596e+01  2.222e-01 -71.807  < 2e-16 *** dose_groupHigh                1.903e+00  2.395e-01   7.947 1.92e-15 *** dose_groupLow                 6.208e-01  2.738e-01   2.267 0.023380 * dose_groupMedium              1.293e+00  2.612e-01   4.951 7.39e-07 *** labelchr1.2                   1.382e-01  2.824e-01   0.489 0.624624 labelchr10                    4.517e-01  2.682e-01   1.684 0.092109 . labelchr11                    8.366e-01  2.641e-01   3.168 0.001535 ** labelchr12                    5.183e-01  2.660e-01   1.948 0.051365 . labelchr13                    1.984e-02  2.908e-01   0.068 0.945593 labelchr14                    6.560e-01  2.671e-01   2.456 0.014043 * labelchr15                    5.084e-01  2.660e-01   1.911 0.056012 . labelchr16                    7.757e-01  2.693e-01   2.881 0.003970 ** labelchr17                    4.593e-01  2.885e-01   1.592 0.111307 labelchr18                   -7.519e-03  2.958e-01  -0.025 0.979721 labelchr19                   -2.378e-01  3.084e-01  -0.771 0.440585 labelchr2                     6.258e-01  2.660e-01   2.352 0.018661 * labelchr3                     2.568e-01  2.863e-01   0.897 0.369732 labelchr4                     5.106e-01  2.773e-01   1.841 0.065603 . labelchr5                     4.209e-01  2.824e-01   1.490 0.136186 labelchr6                     2.937e-01  2.806e-01   1.046 0.295350 labelchr7                    -3.983e-04  2.958e-01  -0.001 0.998926 labelchr8                     4.383e-01  2.908e-01   1.507 0.131704 labelchr9                     7.000e-01  2.671e-01   2.621 0.008766 ** dose_groupHigh:labelchr1.2   -2.483e-01  3.022e-01  -0.822 0.411347 dose_groupLow:labelchr1.2    -2.540e-03  3.459e-01  -0.007 0.994141 dose_groupMedium:labelchr1.2 -2.494e-02  3.289e-01  -0.076 0.939548 dose_groupHigh:labelchr10    -4.750e-01  2.882e-01  -1.648 0.099285 . dose_groupLow:labelchr10     -3.356e-01  3.360e-01  -0.999 0.317857 dose_groupMedium:labelchr10  -3.318e-01  3.167e-01  -1.048 0.294861 dose_groupHigh:labelchr11    -5.554e-02  2.809e-01  -0.198 0.843268 dose_groupLow:labelchr11      4.252e-01  3.174e-01   1.340 0.180390 dose_groupMedium:labelchr11   4.359e-01  3.029e-01   1.439 0.150068 dose_groupHigh:labelchr12    -1.676e-01  2.836e-01  -0.591 0.554373 dose_groupLow:labelchr12     -1.544e-01  3.287e-01  -0.470 0.638477 dose_groupMedium:labelchr12  -1.756e-01  3.115e-01  -0.564 0.572958 dose_groupHigh:labelchr13    -3.978e-01  3.125e-01  -1.273 0.202970 dose_groupLow:labelchr13      2.170e-03  3.561e-01   0.006 0.995138 dose_groupMedium:labelchr13  -2.386e-01  3.425e-01  -0.697 0.486037 dose_groupHigh:labelchr14     1.207e-01  2.832e-01   0.426 0.670094 dose_groupLow:labelchr14      2.822e-01  3.228e-01   0.874 0.381936 dose_groupMedium:labelchr14   4.877e-01  3.055e-01   1.596 0.110378 dose_groupHigh:labelchr15    -1.145e+00  2.935e-01  -3.903 9.51e-05 *** dose_groupLow:labelchr15     -4.122e-01  3.348e-01  -1.231 0.218290 dose_groupMedium:labelchr15  -6.712e-01  3.214e-01  -2.088 0.036792 * dose_groupHigh:labelchr16    -2.607e-01  2.878e-01  -0.906 0.364977 dose_groupLow:labelchr16      1.133e-01  3.279e-01   0.346 0.729681 dose_groupMedium:labelchr16   6.542e-02  3.125e-01   0.209 0.834154 dose_groupHigh:labelchr17     1.326e-01  3.059e-01   0.434 0.664586 dose_groupLow:labelchr17      3.705e-01  3.457e-01   1.072 0.283845 dose_groupMedium:labelchr17   3.523e-01  3.308e-01   1.065 0.286780 dose_groupHigh:labelchr18     3.822e-01  3.118e-01   1.226 0.220225 dose_groupLow:labelchr18      4.491e-01  3.525e-01   1.274 0.202678 dose_groupMedium:labelchr18   5.986e-01  3.347e-01   1.789 0.073665 . dose_groupHigh:labelchr19     6.478e-02  3.273e-01   0.198 0.843111 dose_groupLow:labelchr19      3.157e-01  3.689e-01   0.856 0.392152 dose_groupMedium:labelchr19   3.342e-01  3.522e-01   0.949 0.342680 dose_groupHigh:labelchr2     -6.041e-01  2.869e-01  -2.106 0.035210 * dose_groupLow:labelchr2      -2.459e-01  3.312e-01  -0.742 0.457836 dose_groupMedium:labelchr2   -2.993e-01  3.138e-01  -0.954 0.340146 dose_groupHigh:labelchr3     -1.072e+00  3.178e-01  -3.375 0.000739 *** dose_groupLow:labelchr3      -5.817e-01  3.701e-01  -1.572 0.116009 dose_groupMedium:labelchr3   -6.911e-01  3.503e-01  -1.973 0.048510 * dose_groupHigh:labelchr4     -2.788e-01  2.967e-01  -0.940 0.347321 dose_groupLow:labelchr4      -1.492e-01  3.434e-01  -0.435 0.663885 dose_groupMedium:labelchr4   -5.001e-02  3.234e-01  -0.155 0.877121 dose_groupHigh:labelchr5     -2.603e-01  3.023e-01  -0.861 0.389180 dose_groupLow:labelchr5      -4.738e-02  3.471e-01  -0.136 0.891432 dose_groupMedium:labelchr5   -1.236e-01  3.312e-01  -0.373 0.709068 dose_groupHigh:labelchr6     -2.353e-01  2.999e-01  -0.785 0.432557 dose_groupLow:labelchr6      -4.394e-02  3.448e-01  -0.127 0.898606 dose_groupMedium:labelchr6   -2.395e-01  3.307e-01  -0.724 0.468894 dose_groupHigh:labelchr7      1.376e-01  3.131e-01   0.439 0.660386 dose_groupLow:labelchr7       4.021e-01  3.530e-01   1.139 0.254618 dose_groupMedium:labelchr7    5.092e-01  3.355e-01   1.518 0.129058 dose_groupHigh:labelchr8      2.822e-01  3.074e-01   0.918 0.358623 dose_groupLow:labelchr8       5.457e-01  3.454e-01   1.580 0.114098 dose_groupMedium:labelchr8    6.388e-01  3.299e-01   1.936 0.052824 . dose_groupHigh:labelchr9     -4.547e-01  2.867e-01  -1.586 0.112740 dose_groupLow:labelchr9      -1.701e-01  3.304e-01  -0.515 0.606713 dose_groupMedium:labelchr9   -4.265e-01  3.172e-01  -1.345 0.178701 --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 model_by_target$anova Analysis of Deviance Table (Type II Wald chisquare tests)  Response: cbind(sum_min, group_depth)                    Chisq Df Pr(>Chisq) dose_group        600.61  3  < 2.2e-16 *** label            1239.68 19  < 2.2e-16 *** dose_group:label  129.41 57  1.493e-07 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 plot <- plot_model_mf(   model_by_dose,   plot_type = \"bar\",   x_effect = \"dose\",   plot_error_bars = TRUE,   plot_signif = TRUE,   x_order = c(\"Control\", \"Low\", \"Medium\", \"High\"),   x_label = \"Dose Group\",   y_label = \"Estimated Mean Mutation Frequency (mutations/bp)\" ) plot # Define the order of the genomic targets for the x-axis: # We will order them from lowest to highest MF at the High dose. label_order <- model_by_target$point_estimates %>%   dplyr::filter(dose_group == \"High\") %>%   dplyr::arrange(Estimate) %>%   dplyr::pull(label)  # Define the order of the doses for the fill dose_order <- c(\"Control\", \"Low\", \"Medium\", \"High\")  plot <- plot_model_mf(   model = model_by_target,   plot_type = \"bar\",   x_effect = \"label\",   plot_error_bars = TRUE,   plot_signif = TRUE,   ref_effect = \"dose_group\",   x_order = label_order,   fill_order = dose_order,   x_label = \"Target\",   y_label = \"Mutation Frequency (mutations/bp)\",   fill_label = \"Dose\",   plot_title = \"\",   custom_palette = c(\"#ef476f\",                      \"#ffd166\",                      \"#06d6a0\",                      \"#118ab2\") ) # Rotate the x-axis labels for clarity using ggplot2 functions. plot <- plot + ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90)) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"model-formula","dir":"Articles","previous_headings":"6 Modeling MF","what":"Model Formula","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Fixed effects: experimental variable(s)/factor(s) interest. Random effects: Variable used account variability within larger group. Covariate. Interaction: product two interacting fixed_effects. interaction implies effect one fixed effect changes depending levels another fixed effect, indicating non-additive reationship. Response: function model MF, taking mutation count (sum) group_depth input. model formula built : cbind(sum, group_depth) ~ fixed_effect1 + fixed_effect2 + ... + (1|random_effect) test_interaction set TRUE, model use product fixed_effects: cbind(sum, group_depth) ~ fixed_effect1 * fixed_effect2 * ... + (1|random_effect)","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"family","dir":"Articles","previous_headings":"6 Modeling MF","what":"Family","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"occurence mutations assumed follow binomial distribution : finite number sequenced bases. mutation given base equally probable. Mutations occur independently mutations. account -dispersion, function fit GLM quasibinomial distribution. dispersion parameter model less 1, model refit using binomial distribution. GLMM always use binomial distribution. model_mf function fit generalized linear model analyse effect(s) given fixed_effects(s) MF perform specified pairwise comparisons levels factors. Additional arguments can passed model customize needs. Details arguments generalized linear model can found stats::glm general linear mixed model lme4::glmer.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"estimates-comparisons","dir":"Articles","previous_headings":"6 Modeling MF","what":"Estimates & Comparisons","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"model_mf() provides estimates mean level fixed effects. Furthermore, pairwise comparisons can performed based user-supplied table. Mean estimates comparisons conducted using doBy R library (Halekoh Højsgaard 2025). Estimates back-transformed standard errors approximated using delta method. p-values adjusted multiple comparisons using Sidak method.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"goodness-of-fit","dir":"Articles","previous_headings":"6 Modeling MF","what":"Goodness of Fit","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"model_mf function output Pearson residuals appended mf_data. row highest residual printed console users may assess outlier. Additionally, Pearson residuals plotted histogram QQ-plot check deviances model assumptions. assume residuals follow normal distribution mean 0. Thus, expect histogram follow bell curve QQ-plot plotted along y=x line.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage-1","dir":"Articles","previous_headings":"6 Modeling MF","what":"General Usage","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutation data first summarised sample using calculate_mf(). mf_data output summary table. sure retain columns experimental variables interest using retain_metadata_cols parameter. may specify factors covariates model using fixed_effects random_effects parameters respectively. one fixed_effect supplied, may specify whether wish test interaction fixed_effects using test_interaction parameter. must specify columns mf_data contain mutation counts total_depth per sample using muts total_counts parameters respectively. perform pairwise comparisons levels fixed effects, supply constrast table using contrasts parameter. can either data frame filepath text file loaded R. table must consist two columns, containing levels within fixed_effects. level first column compared level second column row. also provide reference level fixed effect using reference_level parameter. specify multiple pairwise comparisons, p-values automatically corrected multiple comparisons using Sidak method. multiple fixed effects, user must include levels fixed_effects value contrasts table. Within value, levels different fixed_effects seperated colon.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"output-2","dir":"Articles","previous_headings":"6 Modeling MF","what":"Output","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"function output list results. model: glmm glmer model object. model_formula: formula given glm glmer. model_data: supplied mf_data added column Pearson residuals. summary: summary model. anova: analysis variance models two fixed_effects. See car::Anova.. residuals_histogram: Pearson residuals plotted histogram. used check whether variance normally distributed. symmetric bell-shaped histogram, evenly distributed around zero indicates normality assumption likely true. residuals_qq_plot: Pearson residuals plotted quantile-quantile plot. normal distribution, expect points roughly follow y=x line. point_estimates_matrix: contrast matrix used generate point-estimates fixed effects. point_estimates: point estimates fixed effects. pairwise_comparisons_matrix: contrast matrix used conduct pairwise comparisons specified contrasts. pairwise_comparisons: results pairwise comparisons specified contrasts.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"examples-1","dir":"Articles","previous_headings":"6 Modeling MF","what":"Examples","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Residuals Histogram Residuals QQ-plot Model Summary Model Estimates Pairwise Comparisons  GLM residuals MFmin modelled effect Dose. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLM residuals MFmin modelled effect Dose expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 18. model_by_dose$point_estimates: Estimated Mean Mutation Frequency per Dose. Table 19. model_by_dose$pairwise_comparisons Residuals Histogram Residuals QQ-plot Model Summary ANOVA Model Estimates Pairwise Comparisons  GLMM residuals MFmin modelled effect Dose Genomic Target. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLMM residuals MFmin modelled effect Dose Genomic Target expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 20. model_by_target$point_estimates: Estimated Mean Mutation Frequency per Dose Genomic Target. Table 21. model_by_target$pairwise_comparisons.","code":"model_by_dose$summary Call: stats::glm(formula = model_formula, family = \"quasibinomial\",     data = mf_data)  Coefficients:                   Estimate Std. Error  t value Pr(>|t|) (Intercept)      -15.56285    0.08290 -187.736  < 2e-16 *** dose_groupLow      0.67512    0.10066    6.707 1.58e-06 *** dose_groupMedium   1.29746    0.09563   13.567 1.51e-11 *** dose_groupHigh     1.69485    0.08915   19.011 2.84e-14 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for quasibinomial family taken to be 4.604243)      Null deviance: 2919.634  on 23  degrees of freedom Residual deviance:   89.569  on 20  degrees of freedom AIC: NA  Number of Fisher Scoring iterations: 5 model_by_target$summary Generalized linear mixed model fit by maximum likelihood (Laplace   Approximation) [glmerMod]  Family: binomial  ( logit ) Formula: cbind(sum_min, group_depth) ~ dose_group * label + (1 | sample)    Data: mf_data Control: ..1        AIC       BIC    logLik -2*log(L)  df.resid    2825.5    3163.6   -1331.7    2663.5       399  Scaled residuals:     Min      1Q  Median      3Q     Max -2.7513 -0.7140 -0.0326  0.6138  5.4812  Random effects:  Groups Name        Variance Std.Dev.  sample (Intercept) 0.01088  0.1043 Number of obs: 480, groups:  sample, 24  Fixed effects:                                Estimate Std. Error z value Pr(>|z|) (Intercept)                  -1.596e+01  2.222e-01 -71.807  < 2e-16 *** dose_groupHigh                1.903e+00  2.395e-01   7.947 1.92e-15 *** dose_groupLow                 6.208e-01  2.738e-01   2.267 0.023380 * dose_groupMedium              1.293e+00  2.612e-01   4.951 7.39e-07 *** labelchr1.2                   1.382e-01  2.824e-01   0.489 0.624624 labelchr10                    4.517e-01  2.682e-01   1.684 0.092109 . labelchr11                    8.366e-01  2.641e-01   3.168 0.001535 ** labelchr12                    5.183e-01  2.660e-01   1.948 0.051365 . labelchr13                    1.984e-02  2.908e-01   0.068 0.945593 labelchr14                    6.560e-01  2.671e-01   2.456 0.014043 * labelchr15                    5.084e-01  2.660e-01   1.911 0.056012 . labelchr16                    7.757e-01  2.693e-01   2.881 0.003970 ** labelchr17                    4.593e-01  2.885e-01   1.592 0.111307 labelchr18                   -7.519e-03  2.958e-01  -0.025 0.979721 labelchr19                   -2.378e-01  3.084e-01  -0.771 0.440585 labelchr2                     6.258e-01  2.660e-01   2.352 0.018661 * labelchr3                     2.568e-01  2.863e-01   0.897 0.369732 labelchr4                     5.106e-01  2.773e-01   1.841 0.065603 . labelchr5                     4.209e-01  2.824e-01   1.490 0.136186 labelchr6                     2.937e-01  2.806e-01   1.046 0.295350 labelchr7                    -3.983e-04  2.958e-01  -0.001 0.998926 labelchr8                     4.383e-01  2.908e-01   1.507 0.131704 labelchr9                     7.000e-01  2.671e-01   2.621 0.008766 ** dose_groupHigh:labelchr1.2   -2.483e-01  3.022e-01  -0.822 0.411347 dose_groupLow:labelchr1.2    -2.540e-03  3.459e-01  -0.007 0.994141 dose_groupMedium:labelchr1.2 -2.494e-02  3.289e-01  -0.076 0.939548 dose_groupHigh:labelchr10    -4.750e-01  2.882e-01  -1.648 0.099285 . dose_groupLow:labelchr10     -3.356e-01  3.360e-01  -0.999 0.317857 dose_groupMedium:labelchr10  -3.318e-01  3.167e-01  -1.048 0.294861 dose_groupHigh:labelchr11    -5.554e-02  2.809e-01  -0.198 0.843268 dose_groupLow:labelchr11      4.252e-01  3.174e-01   1.340 0.180390 dose_groupMedium:labelchr11   4.359e-01  3.029e-01   1.439 0.150068 dose_groupHigh:labelchr12    -1.676e-01  2.836e-01  -0.591 0.554373 dose_groupLow:labelchr12     -1.544e-01  3.287e-01  -0.470 0.638477 dose_groupMedium:labelchr12  -1.756e-01  3.115e-01  -0.564 0.572958 dose_groupHigh:labelchr13    -3.978e-01  3.125e-01  -1.273 0.202970 dose_groupLow:labelchr13      2.170e-03  3.561e-01   0.006 0.995138 dose_groupMedium:labelchr13  -2.386e-01  3.425e-01  -0.697 0.486037 dose_groupHigh:labelchr14     1.207e-01  2.832e-01   0.426 0.670094 dose_groupLow:labelchr14      2.822e-01  3.228e-01   0.874 0.381936 dose_groupMedium:labelchr14   4.877e-01  3.055e-01   1.596 0.110378 dose_groupHigh:labelchr15    -1.145e+00  2.935e-01  -3.903 9.51e-05 *** dose_groupLow:labelchr15     -4.122e-01  3.348e-01  -1.231 0.218290 dose_groupMedium:labelchr15  -6.712e-01  3.214e-01  -2.088 0.036792 * dose_groupHigh:labelchr16    -2.607e-01  2.878e-01  -0.906 0.364977 dose_groupLow:labelchr16      1.133e-01  3.279e-01   0.346 0.729681 dose_groupMedium:labelchr16   6.542e-02  3.125e-01   0.209 0.834154 dose_groupHigh:labelchr17     1.326e-01  3.059e-01   0.434 0.664586 dose_groupLow:labelchr17      3.705e-01  3.457e-01   1.072 0.283845 dose_groupMedium:labelchr17   3.523e-01  3.308e-01   1.065 0.286780 dose_groupHigh:labelchr18     3.822e-01  3.118e-01   1.226 0.220225 dose_groupLow:labelchr18      4.491e-01  3.525e-01   1.274 0.202678 dose_groupMedium:labelchr18   5.986e-01  3.347e-01   1.789 0.073665 . dose_groupHigh:labelchr19     6.478e-02  3.273e-01   0.198 0.843111 dose_groupLow:labelchr19      3.157e-01  3.689e-01   0.856 0.392152 dose_groupMedium:labelchr19   3.342e-01  3.522e-01   0.949 0.342680 dose_groupHigh:labelchr2     -6.041e-01  2.869e-01  -2.106 0.035210 * dose_groupLow:labelchr2      -2.459e-01  3.312e-01  -0.742 0.457836 dose_groupMedium:labelchr2   -2.993e-01  3.138e-01  -0.954 0.340146 dose_groupHigh:labelchr3     -1.072e+00  3.178e-01  -3.375 0.000739 *** dose_groupLow:labelchr3      -5.817e-01  3.701e-01  -1.572 0.116009 dose_groupMedium:labelchr3   -6.911e-01  3.503e-01  -1.973 0.048510 * dose_groupHigh:labelchr4     -2.788e-01  2.967e-01  -0.940 0.347321 dose_groupLow:labelchr4      -1.492e-01  3.434e-01  -0.435 0.663885 dose_groupMedium:labelchr4   -5.001e-02  3.234e-01  -0.155 0.877121 dose_groupHigh:labelchr5     -2.603e-01  3.023e-01  -0.861 0.389180 dose_groupLow:labelchr5      -4.738e-02  3.471e-01  -0.136 0.891432 dose_groupMedium:labelchr5   -1.236e-01  3.312e-01  -0.373 0.709068 dose_groupHigh:labelchr6     -2.353e-01  2.999e-01  -0.785 0.432557 dose_groupLow:labelchr6      -4.394e-02  3.448e-01  -0.127 0.898606 dose_groupMedium:labelchr6   -2.395e-01  3.307e-01  -0.724 0.468894 dose_groupHigh:labelchr7      1.376e-01  3.131e-01   0.439 0.660386 dose_groupLow:labelchr7       4.021e-01  3.530e-01   1.139 0.254618 dose_groupMedium:labelchr7    5.092e-01  3.355e-01   1.518 0.129058 dose_groupHigh:labelchr8      2.822e-01  3.074e-01   0.918 0.358623 dose_groupLow:labelchr8       5.457e-01  3.454e-01   1.580 0.114098 dose_groupMedium:labelchr8    6.388e-01  3.299e-01   1.936 0.052824 . dose_groupHigh:labelchr9     -4.547e-01  2.867e-01  -1.586 0.112740 dose_groupLow:labelchr9      -1.701e-01  3.304e-01  -0.515 0.606713 dose_groupMedium:labelchr9   -4.265e-01  3.172e-01  -1.345 0.178701 --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 model_by_target$anova Analysis of Deviance Table (Type II Wald chisquare tests)  Response: cbind(sum_min, group_depth)                    Chisq Df Pr(>Chisq) dose_group        600.61  3  < 2.2e-16 *** label            1239.68 19  < 2.2e-16 *** dose_group:label  129.41 57  1.493e-07 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"example-4-1-model-by-dose","dir":"Articles","previous_headings":"6 Modeling MF","what":"Example 4.1 Model by Dose","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Residuals Histogram Residuals QQ-plot Model Summary Model Estimates Pairwise Comparisons  GLM residuals MFmin modelled effect Dose. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLM residuals MFmin modelled effect Dose expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 18. model_by_dose$point_estimates: Estimated Mean Mutation Frequency per Dose. Table 19. model_by_dose$pairwise_comparisons","code":"model_by_dose$summary Call: stats::glm(formula = model_formula, family = \"quasibinomial\",     data = mf_data)  Coefficients:                   Estimate Std. Error  t value Pr(>|t|) (Intercept)      -15.56285    0.08290 -187.736  < 2e-16 *** dose_groupLow      0.67512    0.10066    6.707 1.58e-06 *** dose_groupMedium   1.29746    0.09563   13.567 1.51e-11 *** dose_groupHigh     1.69485    0.08915   19.011 2.84e-14 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  (Dispersion parameter for quasibinomial family taken to be 4.604243)      Null deviance: 2919.634  on 23  degrees of freedom Residual deviance:   89.569  on 20  degrees of freedom AIC: NA  Number of Fisher Scoring iterations: 5"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"example-4-2-model-by-dose-and-target","dir":"Articles","previous_headings":"6 Modeling MF","what":"Example 4.2 Model by Dose and Target","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Residuals Histogram Residuals QQ-plot Model Summary ANOVA Model Estimates Pairwise Comparisons  GLMM residuals MFmin modelled effect Dose Genomic Target. x pearson’s residuals, y frequency. Plotted validate model assumptions. n = 24.  GLMM residuals MFmin modelled effect Dose Genomic Target expressed quantile-quantile plot. Y pearson’s residuals model ascending order x quantiles standard normal distribution n 24. Plotted validate model assumptions. Table 20. model_by_target$point_estimates: Estimated Mean Mutation Frequency per Dose Genomic Target. Table 21. model_by_target$pairwise_comparisons.","code":"model_by_target$summary Generalized linear mixed model fit by maximum likelihood (Laplace   Approximation) [glmerMod]  Family: binomial  ( logit ) Formula: cbind(sum_min, group_depth) ~ dose_group * label + (1 | sample)    Data: mf_data Control: ..1        AIC       BIC    logLik -2*log(L)  df.resid    2825.5    3163.6   -1331.7    2663.5       399  Scaled residuals:     Min      1Q  Median      3Q     Max -2.7513 -0.7140 -0.0326  0.6138  5.4812  Random effects:  Groups Name        Variance Std.Dev.  sample (Intercept) 0.01088  0.1043 Number of obs: 480, groups:  sample, 24  Fixed effects:                                Estimate Std. Error z value Pr(>|z|) (Intercept)                  -1.596e+01  2.222e-01 -71.807  < 2e-16 *** dose_groupHigh                1.903e+00  2.395e-01   7.947 1.92e-15 *** dose_groupLow                 6.208e-01  2.738e-01   2.267 0.023380 * dose_groupMedium              1.293e+00  2.612e-01   4.951 7.39e-07 *** labelchr1.2                   1.382e-01  2.824e-01   0.489 0.624624 labelchr10                    4.517e-01  2.682e-01   1.684 0.092109 . labelchr11                    8.366e-01  2.641e-01   3.168 0.001535 ** labelchr12                    5.183e-01  2.660e-01   1.948 0.051365 . labelchr13                    1.984e-02  2.908e-01   0.068 0.945593 labelchr14                    6.560e-01  2.671e-01   2.456 0.014043 * labelchr15                    5.084e-01  2.660e-01   1.911 0.056012 . labelchr16                    7.757e-01  2.693e-01   2.881 0.003970 ** labelchr17                    4.593e-01  2.885e-01   1.592 0.111307 labelchr18                   -7.519e-03  2.958e-01  -0.025 0.979721 labelchr19                   -2.378e-01  3.084e-01  -0.771 0.440585 labelchr2                     6.258e-01  2.660e-01   2.352 0.018661 * labelchr3                     2.568e-01  2.863e-01   0.897 0.369732 labelchr4                     5.106e-01  2.773e-01   1.841 0.065603 . labelchr5                     4.209e-01  2.824e-01   1.490 0.136186 labelchr6                     2.937e-01  2.806e-01   1.046 0.295350 labelchr7                    -3.983e-04  2.958e-01  -0.001 0.998926 labelchr8                     4.383e-01  2.908e-01   1.507 0.131704 labelchr9                     7.000e-01  2.671e-01   2.621 0.008766 ** dose_groupHigh:labelchr1.2   -2.483e-01  3.022e-01  -0.822 0.411347 dose_groupLow:labelchr1.2    -2.540e-03  3.459e-01  -0.007 0.994141 dose_groupMedium:labelchr1.2 -2.494e-02  3.289e-01  -0.076 0.939548 dose_groupHigh:labelchr10    -4.750e-01  2.882e-01  -1.648 0.099285 . dose_groupLow:labelchr10     -3.356e-01  3.360e-01  -0.999 0.317857 dose_groupMedium:labelchr10  -3.318e-01  3.167e-01  -1.048 0.294861 dose_groupHigh:labelchr11    -5.554e-02  2.809e-01  -0.198 0.843268 dose_groupLow:labelchr11      4.252e-01  3.174e-01   1.340 0.180390 dose_groupMedium:labelchr11   4.359e-01  3.029e-01   1.439 0.150068 dose_groupHigh:labelchr12    -1.676e-01  2.836e-01  -0.591 0.554373 dose_groupLow:labelchr12     -1.544e-01  3.287e-01  -0.470 0.638477 dose_groupMedium:labelchr12  -1.756e-01  3.115e-01  -0.564 0.572958 dose_groupHigh:labelchr13    -3.978e-01  3.125e-01  -1.273 0.202970 dose_groupLow:labelchr13      2.170e-03  3.561e-01   0.006 0.995138 dose_groupMedium:labelchr13  -2.386e-01  3.425e-01  -0.697 0.486037 dose_groupHigh:labelchr14     1.207e-01  2.832e-01   0.426 0.670094 dose_groupLow:labelchr14      2.822e-01  3.228e-01   0.874 0.381936 dose_groupMedium:labelchr14   4.877e-01  3.055e-01   1.596 0.110378 dose_groupHigh:labelchr15    -1.145e+00  2.935e-01  -3.903 9.51e-05 *** dose_groupLow:labelchr15     -4.122e-01  3.348e-01  -1.231 0.218290 dose_groupMedium:labelchr15  -6.712e-01  3.214e-01  -2.088 0.036792 * dose_groupHigh:labelchr16    -2.607e-01  2.878e-01  -0.906 0.364977 dose_groupLow:labelchr16      1.133e-01  3.279e-01   0.346 0.729681 dose_groupMedium:labelchr16   6.542e-02  3.125e-01   0.209 0.834154 dose_groupHigh:labelchr17     1.326e-01  3.059e-01   0.434 0.664586 dose_groupLow:labelchr17      3.705e-01  3.457e-01   1.072 0.283845 dose_groupMedium:labelchr17   3.523e-01  3.308e-01   1.065 0.286780 dose_groupHigh:labelchr18     3.822e-01  3.118e-01   1.226 0.220225 dose_groupLow:labelchr18      4.491e-01  3.525e-01   1.274 0.202678 dose_groupMedium:labelchr18   5.986e-01  3.347e-01   1.789 0.073665 . dose_groupHigh:labelchr19     6.478e-02  3.273e-01   0.198 0.843111 dose_groupLow:labelchr19      3.157e-01  3.689e-01   0.856 0.392152 dose_groupMedium:labelchr19   3.342e-01  3.522e-01   0.949 0.342680 dose_groupHigh:labelchr2     -6.041e-01  2.869e-01  -2.106 0.035210 * dose_groupLow:labelchr2      -2.459e-01  3.312e-01  -0.742 0.457836 dose_groupMedium:labelchr2   -2.993e-01  3.138e-01  -0.954 0.340146 dose_groupHigh:labelchr3     -1.072e+00  3.178e-01  -3.375 0.000739 *** dose_groupLow:labelchr3      -5.817e-01  3.701e-01  -1.572 0.116009 dose_groupMedium:labelchr3   -6.911e-01  3.503e-01  -1.973 0.048510 * dose_groupHigh:labelchr4     -2.788e-01  2.967e-01  -0.940 0.347321 dose_groupLow:labelchr4      -1.492e-01  3.434e-01  -0.435 0.663885 dose_groupMedium:labelchr4   -5.001e-02  3.234e-01  -0.155 0.877121 dose_groupHigh:labelchr5     -2.603e-01  3.023e-01  -0.861 0.389180 dose_groupLow:labelchr5      -4.738e-02  3.471e-01  -0.136 0.891432 dose_groupMedium:labelchr5   -1.236e-01  3.312e-01  -0.373 0.709068 dose_groupHigh:labelchr6     -2.353e-01  2.999e-01  -0.785 0.432557 dose_groupLow:labelchr6      -4.394e-02  3.448e-01  -0.127 0.898606 dose_groupMedium:labelchr6   -2.395e-01  3.307e-01  -0.724 0.468894 dose_groupHigh:labelchr7      1.376e-01  3.131e-01   0.439 0.660386 dose_groupLow:labelchr7       4.021e-01  3.530e-01   1.139 0.254618 dose_groupMedium:labelchr7    5.092e-01  3.355e-01   1.518 0.129058 dose_groupHigh:labelchr8      2.822e-01  3.074e-01   0.918 0.358623 dose_groupLow:labelchr8       5.457e-01  3.454e-01   1.580 0.114098 dose_groupMedium:labelchr8    6.388e-01  3.299e-01   1.936 0.052824 . dose_groupHigh:labelchr9     -4.547e-01  2.867e-01  -1.586 0.112740 dose_groupLow:labelchr9      -1.701e-01  3.304e-01  -0.515 0.606713 dose_groupMedium:labelchr9   -4.265e-01  3.172e-01  -1.345 0.178701 --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 model_by_target$anova Analysis of Deviance Table (Type II Wald chisquare tests)  Response: cbind(sum_min, group_depth)                    Chisq Df Pr(>Chisq) dose_group        600.61  3  < 2.2e-16 *** label            1239.68 19  < 2.2e-16 *** dose_group:label  129.41 57  1.493e-07 *** --- Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"plot-model-results","dir":"Articles","previous_headings":"6 Modeling MF","what":"Plot Model Results","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Plot Model Dose Plot Model Dose Target  Mean Mutation Frequency Minimum (mutations/bp) per Dose estimated using generalized linear model. Error bars S.E.M. Symbols indicate significance differences (p < 0.05). example, made comparisons dose groups. contrast, held label (target) constant. Thus, set ref_effect dose_group significance labels generated indicate differences dose, label.  Mean Mutation Frequency Minimum (mutations/bp) per Genomic Target Dose estimated using generalized linear mixed model. Error bars SEM. Symbols indicate significance differences (p < 0.05) dose levels individual genomic regions.","code":"plot <- plot_model_mf(   model_by_dose,   plot_type = \"bar\",   x_effect = \"dose\",   plot_error_bars = TRUE,   plot_signif = TRUE,   x_order = c(\"Control\", \"Low\", \"Medium\", \"High\"),   x_label = \"Dose Group\",   y_label = \"Estimated Mean Mutation Frequency (mutations/bp)\" ) plot # Define the order of the genomic targets for the x-axis: # We will order them from lowest to highest MF at the High dose. label_order <- model_by_target$point_estimates %>%   dplyr::filter(dose_group == \"High\") %>%   dplyr::arrange(Estimate) %>%   dplyr::pull(label)  # Define the order of the doses for the fill dose_order <- c(\"Control\", \"Low\", \"Medium\", \"High\")  plot <- plot_model_mf(   model = model_by_target,   plot_type = \"bar\",   x_effect = \"label\",   plot_error_bars = TRUE,   plot_signif = TRUE,   ref_effect = \"dose_group\",   x_order = label_order,   fill_order = dose_order,   x_label = \"Target\",   y_label = \"Mutation Frequency (mutations/bp)\",   fill_label = \"Dose\",   plot_title = \"\",   custom_palette = c(\"#ef476f\",                      \"#ffd166\",                      \"#06d6a0\",                      \"#118ab2\") ) # Rotate the x-axis labels for clarity using ggplot2 functions. plot <- plot + ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90)) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"benchmark-dose-modeling","dir":"Articles","previous_headings":"","what":"Benchmark Dose Modeling","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Dose-response models essential quatitative risk assessment mutagenicity, provide framework evaluate levels exposure substance might cause adverse effect. benchmark dose (BMD) dose produces predetermined change measured response, defined benchmark response (BMR). BMD used point departure derive human health-based guidance values inform regulatory risk assessment reference dose (RfD), derived -effect level (DNEL) acceptable daily intake (ADI). BMD estimated applying various mathmatical models fit dose-response data. requirements must met modelling BMD. must clear dose-response trend MF data. suggest using model_mf() test significant increases MF dose prior running BMD analysis. general, studies dose groups graded monotonic response dose useful BMD analysis. minimum three dose groups + 1 control group suggested. Datasets response observed high dose usually suitable BMD modeling. However, one elevated response near BMR, adequate BMD computation may result. better estimate BMD, preferable studies one doses near level BMR. Protection safety authorities recommend use model averaging determine BMD confidence intervals. Model averaging incorporates information across multiple models acount model uncertainty, allowing BMD accurately estimated. Ideally, BMR based consensus scientific definition minimal level change MF biologically significant. Currently, default provided package calculates BMD 50% relative increase MF background. BMR selected based previous recommendations genotoxicity assessment White, Long, Johnson (2020). MutSeqR provides two functions BMD modelling, employing widely-used software designed consistent methods used regulatory authorities. bmd_proast() runs modified version proast71.1 R library parametirized instead menu-based. bmd_toxicr uses ToxicR library, available Github. bmd_proast analyze continuous, individual MF data following log transformation. PROAST uses four families nested models: exponential, Hill, inverse exponential, log-normal. Akaike information criterion (AIC) used select best fit. BMD confidence intervals assessed Maximum Likelihood Profile method, model averaging via bootstrapping (recommended). BMR values user-defined relative increase MF control. Alternatively, users may set BMR one standard-deviation control. Supply bmd_proast per-sample mf data calculated using calculate_mf(), dose column retained summary table. Dose column must numeric. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. wish include covariate analysis, supply covariate variable covariate_col. PROAST assess BMD values differ significantly levels covariate give BMD estimate . highly recommended use model averaging calculating BMD confidence intervals. Specify number bootstraps run num_bootstraps. recommended value 200, aware may take time run. PROAST model averaging return upper lower 90% BMD confidence intervals. MutSeqR calculates model-averaged BMD value median BMD bootstrap runs. Users may choose generate model plots plot_results. Plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots automcatically displayed returned within list alongside BMD summary results. function output data frame final results, including BMD estimate model family model averaging results, applicable. Users may access raw, unparsed PROAST results setting raw_results = TRUE. Example 5.1. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. * See example 3.1 calculating mf_data_global.* Table 22. BMD Estimates PROAST. bmd_toxicr analyze continuous, individual continuous, summary MF data, assuming either normal (default) log-normal distribution. function employs Bayesian estimation using either Laplace Maximum posteriori approach (default) (Gelman et al. 1995) Markov chain Monte Carlo (MCMC) simulation (Brooks et al. 2011). default model parameter’s prior distributions specified (Wheeler et al. 2020), user-modifiable. default models described European Food Safety Authority’s 2022 Guidance use benchmark dose approach risk assessment (Committee et al. 2022). Model averaging may applied using described methodologies (Wheeler et al. (2020); Wheeler et al. (2022)). ToxicR offers several options BMR: Relative deviation (rel): BMD represents dose changes mean MF certain percentage background dose. Standard deviation (sd): BMD represents dose associated mean MF changing specified number standard deviations background mean. Absolute deviation (abs): BMD represents dose associated specified absolute deviation background mean. Hybrid deviation (hybrid): BMD represents dose changes probability adverse event specified amount. One options can specified using bmr_type parameter. bmr parameter set numeric value specifying BMR, defined relation calculation requested bmr_type. Selecting appropriate BMR involves making judgements statistical biological characteristics dataset applications resuling BMDs used. See ToxicR repository github information installing package. Examples include external dependencies Supply bmd_toxicr per-sample mf data calculate_mf(). Retain dose column summary table. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. Calculate BMD model averaging setting model_averaging = TRUE. confidence level upper lower confidence intervals can defined alpha parameter (default 90% CI). Users may choose generate model plots plot_results. TRUE, plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots returned within list alongside BMD results. function return BMD upper lower confidence intervals response variable. model averaging, breakdown model averaging process can returned alongside results ma_summary = TRUE. return estimate model associated posterior probability. Example 5.2. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. See example 3.1 calculation mf_data_global. plot_ci() creates confidence interval (CI) plot BMD results easy comparison BMDs response variables. BMD values can plotted log scale, required. Example 5.3. Compare estimated BMD MFmin (50% relative increase) PROAST versus ToxicR  Benchmark dose 90% confidence intervals representing dose , 50% increase mutation frequency occurs reference level. Calculated using ROAST software. Black points represent BMD, red points BMDL, blue points, BMDU","code":"proast_results <- bmd_proast(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr = 0.5,   model_averaging = TRUE,   num_bootstraps = 10, # recommended value 200   plot_results = FALSE ) devtools::install_github(\"NIEHS/ToxicR\") toxicr_results <- bmd_toxicr(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr_type = \"rel\",   bmr = 0.5,   model_averaging = TRUE,   ma_summary = TRUE,   plot_results = FALSE ) toxicr_results plot_results <- data.frame(   Response = c(\"PROAST\", \"ToxicR\"),   BMD = c(9.111, 9.641894),   BMDL = c(7.38, 8.032936),   BMDU = c(10.9, 10.97636) ) plot <- plot_ci(   data = plot_results,   order = \"asc\",   x_lab = \"Dose (mg/kg-bw/d)\",   y_lab = \"BMD Method\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"proast","dir":"Articles","previous_headings":"6 Modeling MF","what":"PROAST","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"bmd_proast analyze continuous, individual MF data following log transformation. PROAST uses four families nested models: exponential, Hill, inverse exponential, log-normal. Akaike information criterion (AIC) used select best fit. BMD confidence intervals assessed Maximum Likelihood Profile method, model averaging via bootstrapping (recommended). BMR values user-defined relative increase MF control. Alternatively, users may set BMR one standard-deviation control. Supply bmd_proast per-sample mf data calculated using calculate_mf(), dose column retained summary table. Dose column must numeric. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. wish include covariate analysis, supply covariate variable covariate_col. PROAST assess BMD values differ significantly levels covariate give BMD estimate . highly recommended use model averaging calculating BMD confidence intervals. Specify number bootstraps run num_bootstraps. recommended value 200, aware may take time run. PROAST model averaging return upper lower 90% BMD confidence intervals. MutSeqR calculates model-averaged BMD value median BMD bootstrap runs. Users may choose generate model plots plot_results. Plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots automcatically displayed returned within list alongside BMD summary results. function output data frame final results, including BMD estimate model family model averaging results, applicable. Users may access raw, unparsed PROAST results setting raw_results = TRUE. Example 5.1. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. * See example 3.1 calculating mf_data_global.* Table 22. BMD Estimates PROAST.","code":"proast_results <- bmd_proast(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr = 0.5,   model_averaging = TRUE,   num_bootstraps = 10, # recommended value 200   plot_results = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage-bmd_proast","dir":"Articles","previous_headings":"6 Modeling MF","what":"General Usage: bmd_proast","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Supply bmd_proast per-sample mf data calculated using calculate_mf(), dose column retained summary table. Dose column must numeric. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. wish include covariate analysis, supply covariate variable covariate_col. PROAST assess BMD values differ significantly levels covariate give BMD estimate . highly recommended use model averaging calculating BMD confidence intervals. Specify number bootstraps run num_bootstraps. recommended value 200, aware may take time run. PROAST model averaging return upper lower 90% BMD confidence intervals. MutSeqR calculates model-averaged BMD value median BMD bootstrap runs. Users may choose generate model plots plot_results. Plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots automcatically displayed returned within list alongside BMD summary results. function output data frame final results, including BMD estimate model family model averaging results, applicable. Users may access raw, unparsed PROAST results setting raw_results = TRUE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"example-1","dir":"Articles","previous_headings":"6 Modeling MF","what":"Example","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Example 5.1. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. * See example 3.1 calculating mf_data_global.* Table 22. BMD Estimates PROAST.","code":"proast_results <- bmd_proast(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr = 0.5,   model_averaging = TRUE,   num_bootstraps = 10, # recommended value 200   plot_results = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"toxicr","dir":"Articles","previous_headings":"6 Modeling MF","what":"ToxicR","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"bmd_toxicr analyze continuous, individual continuous, summary MF data, assuming either normal (default) log-normal distribution. function employs Bayesian estimation using either Laplace Maximum posteriori approach (default) (Gelman et al. 1995) Markov chain Monte Carlo (MCMC) simulation (Brooks et al. 2011). default model parameter’s prior distributions specified (Wheeler et al. 2020), user-modifiable. default models described European Food Safety Authority’s 2022 Guidance use benchmark dose approach risk assessment (Committee et al. 2022). Model averaging may applied using described methodologies (Wheeler et al. (2020); Wheeler et al. (2022)). ToxicR offers several options BMR: Relative deviation (rel): BMD represents dose changes mean MF certain percentage background dose. Standard deviation (sd): BMD represents dose associated mean MF changing specified number standard deviations background mean. Absolute deviation (abs): BMD represents dose associated specified absolute deviation background mean. Hybrid deviation (hybrid): BMD represents dose changes probability adverse event specified amount. One options can specified using bmr_type parameter. bmr parameter set numeric value specifying BMR, defined relation calculation requested bmr_type. Selecting appropriate BMR involves making judgements statistical biological characteristics dataset applications resuling BMDs used. See ToxicR repository github information installing package. Examples include external dependencies Supply bmd_toxicr per-sample mf data calculate_mf(). Retain dose column summary table. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. Calculate BMD model averaging setting model_averaging = TRUE. confidence level upper lower confidence intervals can defined alpha parameter (default 90% CI). Users may choose generate model plots plot_results. TRUE, plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots returned within list alongside BMD results. function return BMD upper lower confidence intervals response variable. model averaging, breakdown model averaging process can returned alongside results ma_summary = TRUE. return estimate model associated posterior probability. Example 5.2. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. See example 3.1 calculation mf_data_global.","code":"devtools::install_github(\"NIEHS/ToxicR\") toxicr_results <- bmd_toxicr(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr_type = \"rel\",   bmr = 0.5,   model_averaging = TRUE,   ma_summary = TRUE,   plot_results = FALSE ) toxicr_results"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"install-toxicr","dir":"Articles","previous_headings":"6 Modeling MF","what":"Install ToxicR","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"See ToxicR repository github information installing package.","code":"devtools::install_github(\"NIEHS/ToxicR\")"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage-bmd_toxicr","dir":"Articles","previous_headings":"6 Modeling MF","what":"General Usage: bmd_toxicr","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Examples include external dependencies Supply bmd_toxicr per-sample mf data calculate_mf(). Retain dose column summary table. Specify column contains numeric dose values dose_col. function can model one response variable . Supply response variables response_col. Calculate BMD model averaging setting model_averaging = TRUE. confidence level upper lower confidence intervals can defined alpha parameter (default 90% CI). Users may choose generate model plots plot_results. TRUE, plots may automatically saved output directory specified output_path. Alternatively, output_path NULL, plots returned within list alongside BMD results. function return BMD upper lower confidence intervals response variable. model averaging, breakdown model averaging process can returned alongside results ma_summary = TRUE. return estimate model associated posterior probability.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"example-2","dir":"Articles","previous_headings":"6 Modeling MF","what":"Example","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Example 5.2. Calculate BMD model averaging 50% relative increase MF control. calculated MFmin MFmax. See example 3.1 calculation mf_data_global.","code":"toxicr_results <- bmd_toxicr(   mf_data = mf_data_global,   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   bmr_type = \"rel\",   bmr = 0.5,   model_averaging = TRUE,   ma_summary = TRUE,   plot_results = FALSE ) toxicr_results"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"plot-bmd-cis","dir":"Articles","previous_headings":"6 Modeling MF","what":"Plot BMD CIs","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"plot_ci() creates confidence interval (CI) plot BMD results easy comparison BMDs response variables. BMD values can plotted log scale, required. Example 5.3. Compare estimated BMD MFmin (50% relative increase) PROAST versus ToxicR  Benchmark dose 90% confidence intervals representing dose , 50% increase mutation frequency occurs reference level. Calculated using ROAST software. Black points represent BMD, red points BMDL, blue points, BMDU","code":"plot_results <- data.frame(   Response = c(\"PROAST\", \"ToxicR\"),   BMD = c(9.111, 9.641894),   BMDL = c(7.38, 8.032936),   BMDU = c(10.9, 10.97636) ) plot <- plot_ci(   data = plot_results,   order = \"asc\",   x_lab = \"Dose (mg/kg-bw/d)\",   y_lab = \"BMD Method\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mutation-spectra-analysis","dir":"Articles","previous_headings":"","what":"Mutation Spectra Analysis","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"mutation spectra pattern mutation subtypes within sample group. mutation spectra can inform mechanisms involved mutagenesis. Compare mutation spectra experimental groups using spectra_comparison() function. function compare proportion mutation subtypes resolution user-defined groups using modified contingency table approach (Piegorsch Bailer 1994). approach applied mutation counts subtype given group. contingency table represented R*TR * T RR number subtypes, TT number groups. spectra_comparison() performs comparisons T=2T = 2 specified groups. statistical hypothesis homogeneity proportion (count/group total) mutation subtype equals group. test significance homogeneity hypothesis, G2G^{2} likelihood ratio statistic used: G2=2∑=1R∑j=1TYijlog(YijEij)G^{2} = 2\\  \\sum_{=1}^{R}\\  \\sum_{j=1}^{T}\\  Y_{ij}\\  log(\\frac{Y_{ij}}{E_{ij}}) YijY_{ij} represents mutation counts EijE_{ij} expected counts null hypothesis. G2G^{2} statistic possesses approximately χ2\\chi^{2} distribution large sample sizes null hypothesis spectral differences. Thus, column totals become large, G2G^{2} may referred χ2\\chi^{2} distribution (R−1)(T−1)(R -  1)(T - 1) degrees freedom. G2G^{2} statistic may exhibit high false positive rates small sample sizes referred χ2\\chi^{2} distribution. cases, instead switch F-distribution. effect reducing rate G2G^{2} rejects null hypothesis, providing greater stability terms false positive error rates. Thus N/(R−1)<20N/(R-1) < 20, NN total mutation counts across groups, function use F-distribution, otherwise use χ2\\chi^{2}-distribution. comparison assumes independance among observations. tabled observation represents sum independent contributions total mutant count. assume independance valid mutants derived mixed population, however, mutants derived clonally single progenitor cell violate assumption. , recommended use MFmin method mutation counting spectral analyses ensure mutation counts independant. cases independence may invalid, additional, extra-multinomial sources variability present, complex, hierarchical statistical models required. currently outside scope package. first step calculate per-group mf data desired subtype_resolution using calculate_mf(). mf_data supplied spectra_comparison() along contrasts table specify comparisons. contrasts table consist two columns, specifying group contrasted (see Generalized Linear Modelling details contrast tables). Specify variable wish make comparisons exp_variable parameter. function output G2G^{2} statistic p-value specified comparison listed constrasts. P-values adjusted multiple comparison using Sidak method. Example 6.1. example data, studying mutagenic effect BaP. samples exposed three doses BaP (Low, Medium, High), vehicle control (Control). compare base_6 snv subtypes, alongside non-snv variants, three dose groups control. way can investigate exposure BaP leads significant spectral differences. Table 23. Comparison 6-base subtype Proportions Dose Groups. Mutational processes generate characteristic patterns mutations, known mutational signatures. Distinct mutational signatures extracted various cancer types normal tissues using data Catalogue Somatic Mutations Cancer, (COSMIC) database. include signatures single base substitutions (SBSs), doublet base substitutions (DBSs), small insertions deletions (IDs) copy number alterations (CNs). possible assign mutational signatures individual samples groups using signature_fitting function. Linking ECS mutational profiles specific mutagens existing mutational signatures provides empirical evidence contribution environmental mutagens mutations found human cancers informs mutagenic mechanisms. signature_fitting function utilizes SigProfiler suite tools (Díaz-Gay et al. (2023); Khandekar et al. (2023)) assign SBS signatures COSMIC database 96-base SNV subtypes given group creating virtual environment run python using reticulate. signature_fitting() facilitates interoperability tools users less familiar python assists users coercing mutation data necessary structure SigProfiler tools. function install several python dependencies using conda virtual environment first use, well FASTA files chromosomes specified reference genome. result ~3Gb storage must available downloads genome. SNVs 96-base trinucleotide context summed across groups create mutation count matrix SigProfilerMatrixGeneratorR() (SigProfilerMatrixGenerator; Khandekar et al. (2023)). Analyze.cosmic_fit (SigProfilerAssignment; Díaz-Gay et al. (2023)) run assign mutational signatures group using refitting methods, quantifies contribution set signatures mutational profile group. process numerical optimization approach finds combination mutational signatures closely reconstructs mutation count matrix. quantify number mutations imprinted signature, tool uses custom implementation forward stagewise algorithm applies nonnegative least squares, based Lawson-Hanson method. Cosine similarity values, solution statistics, generated compare reconstructed mutational profile original mutational profile group, cosine values > 0.9 indicating good reconstruction. Currently, signature_fitting offers fitting COSMIC version 3.4 SBS signatures SBS96 matrix sample/group. advanced use, including using custom set reference signatures, fitting DBS, ID, CN signatures, suggested use SigProfiler python tools directly described respective documentation. Examples include external dependencies signature_fitting requires installation reticulate SigProfilerMatrixGeneratorR well version python 3.8 newer. signature_fitting take imported (filtered, applicable) mutation_data create mutational matrices SNV mutations. Mutations summed across levels group parameter. can set individual samples experimental group. Variants flagged filter_mut column included mutational matrices. project_genome referenced creation mutational matrices. reference genome installed already. virtual environment can specified env_name parameter. environmnent exists, function create one store dependencies run signature refitting. Specify version python using python_version parameter (must 3.8 higher). Example 6.2. Determine COSMIC SBS signatures associated BaP dose group. Results signature_fitting stored output folder. filepath specific output directory can designated using output_path parameter. null, output stored within working directory. Results organized subfolders based group parameter. output structure divided three folders: input, output, logs. Input folder: “mutations.txt”, text file mutation_data coerced required format SigProfilerMatrixGenerator. consists list snv variants group alongside genomic positions. data serves input matrix generation. Log folder: error log files SigProfilerMatrixGeneration. output folder contains results matrix generation signature refitting desribed detail . signature_fitting uses SigProfilerMatrixGenerator create mutational matrices ((Bergstrom et al. 2019)). Mutation matrices created single-base substitutions (SBS) doublet-base substitutions (DBS), including matrices extended sequence context transcriptional strand bias. SBS DBS matrices stored respective folders output directory. SBS96 matrix used refitting. Matrices stored .files can viewed text-editor. Output files SigProfilerMatrixGenerator folder. Doublet-base Matrices (DBS): DBS somatic mutations set two adjacent DNA base-pairs simultaneously substituted another set two adjacent DNA base-pairs. recommend using DBS matrices generated using signature_fitting signature_fitting function designed handle SBS mutations. true MNVs, including doublets, filtered mutation_data prior MatrixGeneration. However, tool still attempt identify DBSs occasionally find two independent SBSs occuring next simply chance. wish use DBS mutations signature analysis, please refer directly SigProfiler tools. Plots: Barplots mutation matrices groups can found “plots” folder. number mutations plotted group various subtype resolutions. Files matrix listed Table ?@tbl-mat-files. vcf_files: output folder provides text-based files containing original mutations SigProfilerMatrixGenerator classification chromosome. files separated dinucleotides (DBS), multinucleotide substitutions (MNS), single nucleotide variants (SNV) folders containing appropriate files. headers : group chromosome position SigProfilerMatrixGenerator classification strand {1, 0, -1}. headers file exception MNS files don’t contain matrix classification strand classification. noted DBS MNS matrices reflect true mutation counts variant types. SBS/SNV mutations included matrix generation. Transcription Strand Bias (TSB): SBS DBS mutations tested transcription strand bias. Mutations first classified within four transcriptional bias categories: SigProfiler transcriptional bias categories. tool perform transcription strand bias test compares number transcribed untranscribed mutations mutation type. example, compare number transcribed T>C untranscribed T>C mutations. significant difference, indicate T:>C:G mutations occuring higher rate one strands compared . output files contain following headers: group mutation type enrichment value (# Transcribed / # untranscribed) p-value, corrected multiple comparisons using false discrover rate method false discovery rate q-value Results signature refitting perfomed SigProfilerAssignment stored within “Assignment_Solution” folder. “Assignment_Solution” consists 3 subdirectories; “Activities”, “Signatures”, “Solution_Stats”. Table 1: Signature assignment output files. Activities Signatures Solution stats Files JOB_METADATA_SPA.txt: file contains metadata system runtime. Users may choose use SigProfiler Webtool instead using signature_fitting()function. MutSeqR offers functions coerce mutation data proper format input files. write_mutation_calling_file() creates simple text file mutation data can used mutation signatures analysis using SigProfiler Assignment web application “mutation calling file”. Signature analyses done sample level using mutation calling files. file saved output directory, specified output_path. Example 6.3. Analyze COSMIC SBS signatures contributing 24 samples using SigProfiler Web Tool. Output mutation calling file can uploaded webtool. write_mutational_matrix() sum mutations across user-defined groups coercing data proper format input “mutational matrix”. SNV subtypes can resolved either base_6 base_96 resolution. file saved specified output directory. Example 6.4. Analyze COSMIC SBS signatures contributing dose group using SigProfiler Web Tool. Output mutational matrix can uploaded webtool. Proportion Frequency Sum Hierarchical Clustering Example 6.5. Plot base_6 proportions dose group.  Mutation spectrum (minimum) per Dose. Subtypes include single-nucleotide, variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data proportion normalized sequencing depth. Example 6.6. Plot base_6 frequences dose group.  Mutation spectrum (minimum) per Dose. Subtypes include single-nucleotide, variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data subtype frequency (mutations/bp). Example 6.7. Plot base_6 mutation sums dose group.  plot_spectra() integrates cluster_spectra() performs unsupervised hierarchical clustering samples based mutation spectra. cluster_spectra() uses dist() stats library compute sample--sample distances using user-defined distance measure (default Euclidean). resulting distance matrix passed hclust() cluster samples using specified linkage method (default Ward). function output dendrogram visually representing clusters’ relationships hierarchy. dendrogram overlaid plot_spectra() bar plot samples ordered accordingly. Example 6.8. Plot base_6 mutation spectra per sample, hierarchical clustering. example created new sample column intuitive sample names: new_sample_id. names correspond associated dose groups. see samples largly cluster within dose groups.*  Mutation spectrum (minimum) per Sample. Subtypes include single-nucleotide variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data proportion normalized sequencing depth. Samples clustered based Euclidean distance subtype proportions. Control Dose Low Dose Medium Dose High Dose  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype. Another option vizualizing base-96 mutation spectra plot_trinucleotide_heatmap(). function creates heatmap 96-base SNV proportions. Plots can facetted additional grouping variables. Heatmaps useful making comparisons experimental variables information density becomes high represent using traditional plots. Example 6.10. Plot 96-base SNV spectrum sample, facetted dose group.  96-base trinucleotide spectra (minimum) per Sample, facetted Dose. Colour represents proportion SNV subtypes within trinucleotide context normalized sequencing depth.","code":"# Calculate the MF per dose at the base_6 resolution. mf_data_6_dose <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"dose_group\",   subtype_resolution = \"base_6\" )  # Create the contrast table contrasts_table <- data.frame(   col1 = c(\"Low\", \"Medium\", \"High\"),   col2 = c(\"Control\", \"Control\", \"Control\") ) # Run the analysis ex_spectra_comp <- spectra_comparison(   mf_data = mf_data_6_dose,   exp_variable = \"dose_group\",   contrasts = contrasts_table ) # Install reticulate install.packages(\"reticulate\")  # Install python reticulate::install_python()  # Install SigProfilerMatrixGeneratorR from github using devtools. devtools::install_github(\"AlexandrovLab/SigProfilerMatrixGeneratorR\") # Run Analysis signature_fitting(   mutation_data = example_data, # filtered mutation data   project_name = \"Example\",   project_genome = \"mm10\",   env_name = \"MutSeqR\",   group = \"dose_group\",   python_version = \"3.11\",   output_path = NULL ) write_mutation_calling_file(   mutation_data = example_data,   project_name = \"Example\",   project_genome = \"mm10\",   output_path = NULL ) write_mutational_matrix(   mutation_data = example_data,   group = \"dose_group\",   subtype_resolution = \"base_96\",   mf_type = \"min\",   output_path = NULL ) # Calculate the mf data at the 6-base resolution for each dose # We will exclude ambiguous or uncategorized variants since we don't # have any in this data. mf_data_6_dose <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"dose_group\",   subtype_resolution = \"base_6\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) # Set the desired order for the dose group: mf_data_6_dose$dose_group <- factor(   mf_data_6_dose$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"proportion\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Proportion\" ) plot # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"mf\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Frequency (mutations/bp)\" ) plot # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"sum\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Mutation Count\" ) plot # Calculate the mf data at the 6-base resolution for each sample mf_data_6 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"new_sample_id\",   subtype_resolution = \"base_6\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) # Plot plot <- plot_spectra(   mf_data = mf_data_6,   group_col = \"new_sample_id\",   subtype_resolution = \"base_6\",   response = \"proportion\",   group_order = \"clustered\",   x_lab = \"Sample\",   y_lab = \"Subtype Proportion\" ) plot $Control $Low $Medium $High # Calculate the mf data at the 96-base resolution for each sample mf_data_96 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_96\",   variant_types = \"snv\",   retain_metadata_cols = \"dose_group\" ) mf_data_96$dose_group <- factor(   mf_data_96$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) # Plot plot <- plot_trinucleotide_heatmap(   mf_data = mf_data_96,   group_col = \"sample\",   facet_col = \"dose_group\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"group-comparison","dir":"Articles","previous_headings":"","what":"Group Comparison","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Compare mutation spectra experimental groups using spectra_comparison() function. function compare proportion mutation subtypes resolution user-defined groups using modified contingency table approach (Piegorsch Bailer 1994). approach applied mutation counts subtype given group. contingency table represented R*TR * T RR number subtypes, TT number groups. spectra_comparison() performs comparisons T=2T = 2 specified groups. statistical hypothesis homogeneity proportion (count/group total) mutation subtype equals group. test significance homogeneity hypothesis, G2G^{2} likelihood ratio statistic used: G2=2∑=1R∑j=1TYijlog(YijEij)G^{2} = 2\\  \\sum_{=1}^{R}\\  \\sum_{j=1}^{T}\\  Y_{ij}\\  log(\\frac{Y_{ij}}{E_{ij}}) YijY_{ij} represents mutation counts EijE_{ij} expected counts null hypothesis. G2G^{2} statistic possesses approximately χ2\\chi^{2} distribution large sample sizes null hypothesis spectral differences. Thus, column totals become large, G2G^{2} may referred χ2\\chi^{2} distribution (R−1)(T−1)(R -  1)(T - 1) degrees freedom. G2G^{2} statistic may exhibit high false positive rates small sample sizes referred χ2\\chi^{2} distribution. cases, instead switch F-distribution. effect reducing rate G2G^{2} rejects null hypothesis, providing greater stability terms false positive error rates. Thus N/(R−1)<20N/(R-1) < 20, NN total mutation counts across groups, function use F-distribution, otherwise use χ2\\chi^{2}-distribution. comparison assumes independance among observations. tabled observation represents sum independent contributions total mutant count. assume independance valid mutants derived mixed population, however, mutants derived clonally single progenitor cell violate assumption. , recommended use MFmin method mutation counting spectral analyses ensure mutation counts independant. cases independence may invalid, additional, extra-multinomial sources variability present, complex, hierarchical statistical models required. currently outside scope package. first step calculate per-group mf data desired subtype_resolution using calculate_mf(). mf_data supplied spectra_comparison() along contrasts table specify comparisons. contrasts table consist two columns, specifying group contrasted (see Generalized Linear Modelling details contrast tables). Specify variable wish make comparisons exp_variable parameter. function output G2G^{2} statistic p-value specified comparison listed constrasts. P-values adjusted multiple comparison using Sidak method. Example 6.1. example data, studying mutagenic effect BaP. samples exposed three doses BaP (Low, Medium, High), vehicle control (Control). compare base_6 snv subtypes, alongside non-snv variants, three dose groups control. way can investigate exposure BaP leads significant spectral differences. Table 23. Comparison 6-base subtype Proportions Dose Groups.","code":"# Calculate the MF per dose at the base_6 resolution. mf_data_6_dose <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"dose_group\",   subtype_resolution = \"base_6\" )  # Create the contrast table contrasts_table <- data.frame(   col1 = c(\"Low\", \"Medium\", \"High\"),   col2 = c(\"Control\", \"Control\", \"Control\") ) # Run the analysis ex_spectra_comp <- spectra_comparison(   mf_data = mf_data_6_dose,   exp_variable = \"dose_group\",   contrasts = contrasts_table )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage-spectra_comparison","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"General Usage: spectra_comparison()","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"first step calculate per-group mf data desired subtype_resolution using calculate_mf(). mf_data supplied spectra_comparison() along contrasts table specify comparisons. contrasts table consist two columns, specifying group contrasted (see Generalized Linear Modelling details contrast tables). Specify variable wish make comparisons exp_variable parameter. function output G2G^{2} statistic p-value specified comparison listed constrasts. P-values adjusted multiple comparison using Sidak method. Example 6.1. example data, studying mutagenic effect BaP. samples exposed three doses BaP (Low, Medium, High), vehicle control (Control). compare base_6 snv subtypes, alongside non-snv variants, three dose groups control. way can investigate exposure BaP leads significant spectral differences. Table 23. Comparison 6-base subtype Proportions Dose Groups.","code":"# Calculate the MF per dose at the base_6 resolution. mf_data_6_dose <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"dose_group\",   subtype_resolution = \"base_6\" )  # Create the contrast table contrasts_table <- data.frame(   col1 = c(\"Low\", \"Medium\", \"High\"),   col2 = c(\"Control\", \"Control\", \"Control\") ) # Run the analysis ex_spectra_comp <- spectra_comparison(   mf_data = mf_data_6_dose,   exp_variable = \"dose_group\",   contrasts = contrasts_table )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mutational-signatures","dir":"Articles","previous_headings":"","what":"Mutational Signatures","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Mutational processes generate characteristic patterns mutations, known mutational signatures. Distinct mutational signatures extracted various cancer types normal tissues using data Catalogue Somatic Mutations Cancer, (COSMIC) database. include signatures single base substitutions (SBSs), doublet base substitutions (DBSs), small insertions deletions (IDs) copy number alterations (CNs). possible assign mutational signatures individual samples groups using signature_fitting function. Linking ECS mutational profiles specific mutagens existing mutational signatures provides empirical evidence contribution environmental mutagens mutations found human cancers informs mutagenic mechanisms. signature_fitting function utilizes SigProfiler suite tools (Díaz-Gay et al. (2023); Khandekar et al. (2023)) assign SBS signatures COSMIC database 96-base SNV subtypes given group creating virtual environment run python using reticulate. signature_fitting() facilitates interoperability tools users less familiar python assists users coercing mutation data necessary structure SigProfiler tools. function install several python dependencies using conda virtual environment first use, well FASTA files chromosomes specified reference genome. result ~3Gb storage must available downloads genome. SNVs 96-base trinucleotide context summed across groups create mutation count matrix SigProfilerMatrixGeneratorR() (SigProfilerMatrixGenerator; Khandekar et al. (2023)). Analyze.cosmic_fit (SigProfilerAssignment; Díaz-Gay et al. (2023)) run assign mutational signatures group using refitting methods, quantifies contribution set signatures mutational profile group. process numerical optimization approach finds combination mutational signatures closely reconstructs mutation count matrix. quantify number mutations imprinted signature, tool uses custom implementation forward stagewise algorithm applies nonnegative least squares, based Lawson-Hanson method. Cosine similarity values, solution statistics, generated compare reconstructed mutational profile original mutational profile group, cosine values > 0.9 indicating good reconstruction. Currently, signature_fitting offers fitting COSMIC version 3.4 SBS signatures SBS96 matrix sample/group. advanced use, including using custom set reference signatures, fitting DBS, ID, CN signatures, suggested use SigProfiler python tools directly described respective documentation. Examples include external dependencies signature_fitting requires installation reticulate SigProfilerMatrixGeneratorR well version python 3.8 newer. signature_fitting take imported (filtered, applicable) mutation_data create mutational matrices SNV mutations. Mutations summed across levels group parameter. can set individual samples experimental group. Variants flagged filter_mut column included mutational matrices. project_genome referenced creation mutational matrices. reference genome installed already. virtual environment can specified env_name parameter. environmnent exists, function create one store dependencies run signature refitting. Specify version python using python_version parameter (must 3.8 higher). Example 6.2. Determine COSMIC SBS signatures associated BaP dose group. Results signature_fitting stored output folder. filepath specific output directory can designated using output_path parameter. null, output stored within working directory. Results organized subfolders based group parameter. output structure divided three folders: input, output, logs. Input folder: “mutations.txt”, text file mutation_data coerced required format SigProfilerMatrixGenerator. consists list snv variants group alongside genomic positions. data serves input matrix generation. Log folder: error log files SigProfilerMatrixGeneration. output folder contains results matrix generation signature refitting desribed detail . signature_fitting uses SigProfilerMatrixGenerator create mutational matrices ((Bergstrom et al. 2019)). Mutation matrices created single-base substitutions (SBS) doublet-base substitutions (DBS), including matrices extended sequence context transcriptional strand bias. SBS DBS matrices stored respective folders output directory. SBS96 matrix used refitting. Matrices stored .files can viewed text-editor. Output files SigProfilerMatrixGenerator folder. Doublet-base Matrices (DBS): DBS somatic mutations set two adjacent DNA base-pairs simultaneously substituted another set two adjacent DNA base-pairs. recommend using DBS matrices generated using signature_fitting signature_fitting function designed handle SBS mutations. true MNVs, including doublets, filtered mutation_data prior MatrixGeneration. However, tool still attempt identify DBSs occasionally find two independent SBSs occuring next simply chance. wish use DBS mutations signature analysis, please refer directly SigProfiler tools. Plots: Barplots mutation matrices groups can found “plots” folder. number mutations plotted group various subtype resolutions. Files matrix listed Table ?@tbl-mat-files. vcf_files: output folder provides text-based files containing original mutations SigProfilerMatrixGenerator classification chromosome. files separated dinucleotides (DBS), multinucleotide substitutions (MNS), single nucleotide variants (SNV) folders containing appropriate files. headers : group chromosome position SigProfilerMatrixGenerator classification strand {1, 0, -1}. headers file exception MNS files don’t contain matrix classification strand classification. noted DBS MNS matrices reflect true mutation counts variant types. SBS/SNV mutations included matrix generation. Transcription Strand Bias (TSB): SBS DBS mutations tested transcription strand bias. Mutations first classified within four transcriptional bias categories: SigProfiler transcriptional bias categories. tool perform transcription strand bias test compares number transcribed untranscribed mutations mutation type. example, compare number transcribed T>C untranscribed T>C mutations. significant difference, indicate T:>C:G mutations occuring higher rate one strands compared . output files contain following headers: group mutation type enrichment value (# Transcribed / # untranscribed) p-value, corrected multiple comparisons using false discrover rate method false discovery rate q-value Results signature refitting perfomed SigProfilerAssignment stored within “Assignment_Solution” folder. “Assignment_Solution” consists 3 subdirectories; “Activities”, “Signatures”, “Solution_Stats”. Table 1: Signature assignment output files. Activities Signatures Solution stats Files JOB_METADATA_SPA.txt: file contains metadata system runtime. Users may choose use SigProfiler Webtool instead using signature_fitting()function. MutSeqR offers functions coerce mutation data proper format input files. write_mutation_calling_file() creates simple text file mutation data can used mutation signatures analysis using SigProfiler Assignment web application “mutation calling file”. Signature analyses done sample level using mutation calling files. file saved output directory, specified output_path. Example 6.3. Analyze COSMIC SBS signatures contributing 24 samples using SigProfiler Web Tool. Output mutation calling file can uploaded webtool. write_mutational_matrix() sum mutations across user-defined groups coercing data proper format input “mutational matrix”. SNV subtypes can resolved either base_6 base_96 resolution. file saved specified output directory. Example 6.4. Analyze COSMIC SBS signatures contributing dose group using SigProfiler Web Tool. Output mutational matrix can uploaded webtool.","code":"# Install reticulate install.packages(\"reticulate\")  # Install python reticulate::install_python()  # Install SigProfilerMatrixGeneratorR from github using devtools. devtools::install_github(\"AlexandrovLab/SigProfilerMatrixGeneratorR\") # Run Analysis signature_fitting(   mutation_data = example_data, # filtered mutation data   project_name = \"Example\",   project_genome = \"mm10\",   env_name = \"MutSeqR\",   group = \"dose_group\",   python_version = \"3.11\",   output_path = NULL ) write_mutation_calling_file(   mutation_data = example_data,   project_name = \"Example\",   project_genome = \"mm10\",   output_path = NULL ) write_mutational_matrix(   mutation_data = example_data,   group = \"dose_group\",   subtype_resolution = \"base_96\",   mf_type = \"min\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage-signature_fitting","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"General Usage: signature_fitting()","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Examples include external dependencies signature_fitting requires installation reticulate SigProfilerMatrixGeneratorR well version python 3.8 newer. signature_fitting take imported (filtered, applicable) mutation_data create mutational matrices SNV mutations. Mutations summed across levels group parameter. can set individual samples experimental group. Variants flagged filter_mut column included mutational matrices. project_genome referenced creation mutational matrices. reference genome installed already. virtual environment can specified env_name parameter. environmnent exists, function create one store dependencies run signature refitting. Specify version python using python_version parameter (must 3.8 higher). Example 6.2. Determine COSMIC SBS signatures associated BaP dose group.","code":"# Install reticulate install.packages(\"reticulate\")  # Install python reticulate::install_python()  # Install SigProfilerMatrixGeneratorR from github using devtools. devtools::install_github(\"AlexandrovLab/SigProfilerMatrixGeneratorR\") # Run Analysis signature_fitting(   mutation_data = example_data, # filtered mutation data   project_name = \"Example\",   project_genome = \"mm10\",   env_name = \"MutSeqR\",   group = \"dose_group\",   python_version = \"3.11\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"output-3","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Output","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Results signature_fitting stored output folder. filepath specific output directory can designated using output_path parameter. null, output stored within working directory. Results organized subfolders based group parameter. output structure divided three folders: input, output, logs. Input folder: “mutations.txt”, text file mutation_data coerced required format SigProfilerMatrixGenerator. consists list snv variants group alongside genomic positions. data serves input matrix generation. Log folder: error log files SigProfilerMatrixGeneration. output folder contains results matrix generation signature refitting desribed detail . signature_fitting uses SigProfilerMatrixGenerator create mutational matrices ((Bergstrom et al. 2019)). Mutation matrices created single-base substitutions (SBS) doublet-base substitutions (DBS), including matrices extended sequence context transcriptional strand bias. SBS DBS matrices stored respective folders output directory. SBS96 matrix used refitting. Matrices stored .files can viewed text-editor. Output files SigProfilerMatrixGenerator folder. Doublet-base Matrices (DBS): DBS somatic mutations set two adjacent DNA base-pairs simultaneously substituted another set two adjacent DNA base-pairs. recommend using DBS matrices generated using signature_fitting signature_fitting function designed handle SBS mutations. true MNVs, including doublets, filtered mutation_data prior MatrixGeneration. However, tool still attempt identify DBSs occasionally find two independent SBSs occuring next simply chance. wish use DBS mutations signature analysis, please refer directly SigProfiler tools. Plots: Barplots mutation matrices groups can found “plots” folder. number mutations plotted group various subtype resolutions. Files matrix listed Table ?@tbl-mat-files. vcf_files: output folder provides text-based files containing original mutations SigProfilerMatrixGenerator classification chromosome. files separated dinucleotides (DBS), multinucleotide substitutions (MNS), single nucleotide variants (SNV) folders containing appropriate files. headers : group chromosome position SigProfilerMatrixGenerator classification strand {1, 0, -1}. headers file exception MNS files don’t contain matrix classification strand classification. noted DBS MNS matrices reflect true mutation counts variant types. SBS/SNV mutations included matrix generation. Transcription Strand Bias (TSB): SBS DBS mutations tested transcription strand bias. Mutations first classified within four transcriptional bias categories: SigProfiler transcriptional bias categories. tool perform transcription strand bias test compares number transcribed untranscribed mutations mutation type. example, compare number transcribed T>C untranscribed T>C mutations. significant difference, indicate T:>C:G mutations occuring higher rate one strands compared . output files contain following headers: group mutation type enrichment value (# Transcribed / # untranscribed) p-value, corrected multiple comparisons using false discrover rate method false discovery rate q-value Results signature refitting perfomed SigProfilerAssignment stored within “Assignment_Solution” folder. “Assignment_Solution” consists 3 subdirectories; “Activities”, “Signatures”, “Solution_Stats”. Table 1: Signature assignment output files. Activities Signatures Solution stats Files JOB_METADATA_SPA.txt: file contains metadata system runtime.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"matrix-generation-output","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Matrix Generation Output","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"signature_fitting uses SigProfilerMatrixGenerator create mutational matrices ((Bergstrom et al. 2019)). Mutation matrices created single-base substitutions (SBS) doublet-base substitutions (DBS), including matrices extended sequence context transcriptional strand bias. SBS DBS matrices stored respective folders output directory. SBS96 matrix used refitting. Matrices stored .files can viewed text-editor. Output files SigProfilerMatrixGenerator folder. Doublet-base Matrices (DBS): DBS somatic mutations set two adjacent DNA base-pairs simultaneously substituted another set two adjacent DNA base-pairs. recommend using DBS matrices generated using signature_fitting signature_fitting function designed handle SBS mutations. true MNVs, including doublets, filtered mutation_data prior MatrixGeneration. However, tool still attempt identify DBSs occasionally find two independent SBSs occuring next simply chance. wish use DBS mutations signature analysis, please refer directly SigProfiler tools. Plots: Barplots mutation matrices groups can found “plots” folder. number mutations plotted group various subtype resolutions. Files matrix listed Table ?@tbl-mat-files. vcf_files: output folder provides text-based files containing original mutations SigProfilerMatrixGenerator classification chromosome. files separated dinucleotides (DBS), multinucleotide substitutions (MNS), single nucleotide variants (SNV) folders containing appropriate files. headers : group chromosome position SigProfilerMatrixGenerator classification strand {1, 0, -1}. headers file exception MNS files don’t contain matrix classification strand classification. noted DBS MNS matrices reflect true mutation counts variant types. SBS/SNV mutations included matrix generation. Transcription Strand Bias (TSB): SBS DBS mutations tested transcription strand bias. Mutations first classified within four transcriptional bias categories: SigProfiler transcriptional bias categories. tool perform transcription strand bias test compares number transcribed untranscribed mutations mutation type. example, compare number transcribed T>C untranscribed T>C mutations. significant difference, indicate T:>C:G mutations occuring higher rate one strands compared . output files contain following headers: group mutation type enrichment value (# Transcribed / # untranscribed) p-value, corrected multiple comparisons using false discrover rate method false discovery rate q-value","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"signature-refitting-results","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Signature Refitting Results","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Results signature refitting perfomed SigProfilerAssignment stored within “Assignment_Solution” folder. “Assignment_Solution” consists 3 subdirectories; “Activities”, “Signatures”, “Solution_Stats”. Table 1: Signature assignment output files. Activities Signatures Solution stats Files JOB_METADATA_SPA.txt: file contains metadata system runtime.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"use-sigprofiler-webtool","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Use SigProfiler Webtool","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Users may choose use SigProfiler Webtool instead using signature_fitting()function. MutSeqR offers functions coerce mutation data proper format input files. write_mutation_calling_file() creates simple text file mutation data can used mutation signatures analysis using SigProfiler Assignment web application “mutation calling file”. Signature analyses done sample level using mutation calling files. file saved output directory, specified output_path. Example 6.3. Analyze COSMIC SBS signatures contributing 24 samples using SigProfiler Web Tool. Output mutation calling file can uploaded webtool. write_mutational_matrix() sum mutations across user-defined groups coercing data proper format input “mutational matrix”. SNV subtypes can resolved either base_6 base_96 resolution. file saved specified output directory. Example 6.4. Analyze COSMIC SBS signatures contributing dose group using SigProfiler Web Tool. Output mutational matrix can uploaded webtool.","code":"write_mutation_calling_file(   mutation_data = example_data,   project_name = \"Example\",   project_genome = \"mm10\",   output_path = NULL ) write_mutational_matrix(   mutation_data = example_data,   group = \"dose_group\",   subtype_resolution = \"base_96\",   mf_type = \"min\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mutation-calling-file","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Mutation Calling File","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"write_mutation_calling_file() creates simple text file mutation data can used mutation signatures analysis using SigProfiler Assignment web application “mutation calling file”. Signature analyses done sample level using mutation calling files. file saved output directory, specified output_path. Example 6.3. Analyze COSMIC SBS signatures contributing 24 samples using SigProfiler Web Tool. Output mutation calling file can uploaded webtool.","code":"write_mutation_calling_file(   mutation_data = example_data,   project_name = \"Example\",   project_genome = \"mm10\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"mutational-matrix","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Mutational Matrix","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"write_mutational_matrix() sum mutations across user-defined groups coercing data proper format input “mutational matrix”. SNV subtypes can resolved either base_6 base_96 resolution. file saved specified output directory. Example 6.4. Analyze COSMIC SBS signatures contributing dose group using SigProfiler Web Tool. Output mutational matrix can uploaded webtool.","code":"write_mutational_matrix(   mutation_data = example_data,   group = \"dose_group\",   subtype_resolution = \"base_96\",   mf_type = \"min\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"plot-spectra","dir":"Articles","previous_headings":"","what":"Plot Spectra","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Proportion Frequency Sum Hierarchical Clustering Example 6.5. Plot base_6 proportions dose group.  Mutation spectrum (minimum) per Dose. Subtypes include single-nucleotide, variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data proportion normalized sequencing depth. Example 6.6. Plot base_6 frequences dose group.  Mutation spectrum (minimum) per Dose. Subtypes include single-nucleotide, variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data subtype frequency (mutations/bp). Example 6.7. Plot base_6 mutation sums dose group.  plot_spectra() integrates cluster_spectra() performs unsupervised hierarchical clustering samples based mutation spectra. cluster_spectra() uses dist() stats library compute sample--sample distances using user-defined distance measure (default Euclidean). resulting distance matrix passed hclust() cluster samples using specified linkage method (default Ward). function output dendrogram visually representing clusters’ relationships hierarchy. dendrogram overlaid plot_spectra() bar plot samples ordered accordingly. Example 6.8. Plot base_6 mutation spectra per sample, hierarchical clustering. example created new sample column intuitive sample names: new_sample_id. names correspond associated dose groups. see samples largly cluster within dose groups.*  Mutation spectrum (minimum) per Sample. Subtypes include single-nucleotide variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data proportion normalized sequencing depth. Samples clustered based Euclidean distance subtype proportions. Control Dose Low Dose Medium Dose High Dose  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype. Another option vizualizing base-96 mutation spectra plot_trinucleotide_heatmap(). function creates heatmap 96-base SNV proportions. Plots can facetted additional grouping variables. Heatmaps useful making comparisons experimental variables information density becomes high represent using traditional plots. Example 6.10. Plot 96-base SNV spectrum sample, facetted dose group.  96-base trinucleotide spectra (minimum) per Sample, facetted Dose. Colour represents proportion SNV subtypes within trinucleotide context normalized sequencing depth.","code":"# Calculate the mf data at the 6-base resolution for each dose # We will exclude ambiguous or uncategorized variants since we don't # have any in this data. mf_data_6_dose <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"dose_group\",   subtype_resolution = \"base_6\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) # Set the desired order for the dose group: mf_data_6_dose$dose_group <- factor(   mf_data_6_dose$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"proportion\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Proportion\" ) plot # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"mf\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Frequency (mutations/bp)\" ) plot # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"sum\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Mutation Count\" ) plot # Calculate the mf data at the 6-base resolution for each sample mf_data_6 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"new_sample_id\",   subtype_resolution = \"base_6\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) # Plot plot <- plot_spectra(   mf_data = mf_data_6,   group_col = \"new_sample_id\",   subtype_resolution = \"base_6\",   response = \"proportion\",   group_order = \"clustered\",   x_lab = \"Sample\",   y_lab = \"Subtype Proportion\" ) plot $Control $Low $Medium $High # Calculate the mf data at the 96-base resolution for each sample mf_data_96 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_96\",   variant_types = \"snv\",   retain_metadata_cols = \"dose_group\" ) mf_data_96$dose_group <- factor(   mf_data_96$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) # Plot plot <- plot_trinucleotide_heatmap(   mf_data = mf_data_96,   group_col = \"sample\",   facet_col = \"dose_group\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"plot_spectra","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"plot_spectra","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Proportion Frequency Sum Hierarchical Clustering Example 6.5. Plot base_6 proportions dose group.  Mutation spectrum (minimum) per Dose. Subtypes include single-nucleotide, variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data proportion normalized sequencing depth. Example 6.6. Plot base_6 frequences dose group.  Mutation spectrum (minimum) per Dose. Subtypes include single-nucleotide, variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data subtype frequency (mutations/bp). Example 6.7. Plot base_6 mutation sums dose group.  plot_spectra() integrates cluster_spectra() performs unsupervised hierarchical clustering samples based mutation spectra. cluster_spectra() uses dist() stats library compute sample--sample distances using user-defined distance measure (default Euclidean). resulting distance matrix passed hclust() cluster samples using specified linkage method (default Ward). function output dendrogram visually representing clusters’ relationships hierarchy. dendrogram overlaid plot_spectra() bar plot samples ordered accordingly. Example 6.8. Plot base_6 mutation spectra per sample, hierarchical clustering. example created new sample column intuitive sample names: new_sample_id. names correspond associated dose groups. see samples largly cluster within dose groups.*  Mutation spectrum (minimum) per Sample. Subtypes include single-nucleotide variants 6-base resolution, complex variants, deletions, insertions, multi-nucleotide variants (mnv) structural variants (sv). Subtypes represented colour. Data proportion normalized sequencing depth. Samples clustered based Euclidean distance subtype proportions.","code":"# Calculate the mf data at the 6-base resolution for each dose # We will exclude ambiguous or uncategorized variants since we don't # have any in this data. mf_data_6_dose <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"dose_group\",   subtype_resolution = \"base_6\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) # Set the desired order for the dose group: mf_data_6_dose$dose_group <- factor(   mf_data_6_dose$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"proportion\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Proportion\" ) plot # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"mf\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Frequency (mutations/bp)\" ) plot # Plot plot <- plot_spectra(   mf_data = mf_data_6_dose,   group_col = \"dose_group\",   subtype_resolution = \"base_6\",   response = \"sum\",   group_order = \"arranged\",   group_order_input = \"dose_group\",   x_lab = \"Dose Group\",   y_lab = \"Subtype Mutation Count\" ) plot # Calculate the mf data at the 6-base resolution for each sample mf_data_6 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"new_sample_id\",   subtype_resolution = \"base_6\",   variant_types = c(\"-ambiguous\", \"-uncategorized\") ) # Plot plot <- plot_spectra(   mf_data = mf_data_6,   group_col = \"new_sample_id\",   subtype_resolution = \"base_6\",   response = \"proportion\",   group_order = \"clustered\",   x_lab = \"Sample\",   y_lab = \"Subtype Proportion\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"trinucleotide-plots","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Trinucleotide Plots","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Control Dose Low Dose Medium Dose High Dose  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.  96-base trinucleotide spectra (minimum) per Dose. Bars proportion SNV subtypes within trinucleotide context normalized sequencing depth. Bars coloured based SNV subtype. Data labels indicate total number mutations SNV subtype.","code":"$Control $Low $Medium $High"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"heatmaps","dir":"Articles","previous_headings":"7 Mutation Spectra Analysis","what":"Heatmaps","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Another option vizualizing base-96 mutation spectra plot_trinucleotide_heatmap(). function creates heatmap 96-base SNV proportions. Plots can facetted additional grouping variables. Heatmaps useful making comparisons experimental variables information density becomes high represent using traditional plots. Example 6.10. Plot 96-base SNV spectrum sample, facetted dose group.  96-base trinucleotide spectra (minimum) per Sample, facetted Dose. Colour represents proportion SNV subtypes within trinucleotide context normalized sequencing depth.","code":"# Calculate the mf data at the 96-base resolution for each sample mf_data_96 <- calculate_mf(   mutation_data = example_data,   cols_to_group = \"sample\",   subtype_resolution = \"base_96\",   variant_types = \"snv\",   retain_metadata_cols = \"dose_group\" ) mf_data_96$dose_group <- factor(   mf_data_96$dose_group,   levels = c(\"Control\", \"Low\", \"Medium\", \"High\") ) # Plot plot <- plot_trinucleotide_heatmap(   mf_data = mf_data_96,   group_col = \"sample\",   facet_col = \"dose_group\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"bubble-plots","dir":"Articles","previous_headings":"","what":"Bubble Plots","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"plot_bubbles used visually represent distribution density recurrent mutations. mutation given group represented bubble whose size scaled either alt_depth vaf. Thus highly reccurent mutation represented large bubble. plots make easy determine MFmax driven highly recurrent mutations versus serveral moderately recurrent mutations. Plots can facetted user-defined groups, bubbles can coloured variable interest help discern patterns mutation recurrence. Example 7. Plot mutations per dose group, bubbles coloured base-6 subtype  Multiplet mutations plotted per Dose. circle represents mutation, coloured mutation subtype. size circle scaled mutation’s alternative depth.","code":"plot <- plot_bubbles(   mutation_data = example_data,   size_by = \"alt_depth\",   facet_col = \"dose_group\",   color_by = \"normalized_subtype\" ) plot"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"retrieve-sequences","dir":"Articles","previous_headings":"","what":"Retrieve Sequences","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"get_seq() retrive raw nucleotide sequences specified genomic intervals. function install appropriate BS genome library retrieve sequences based species, genome, masked parameter. Supply regions filepath, data frame GRanges object containing specified genomic intervals. TwinStrand’s Mutagenesis Panels stored package files can easily retrieved. Sequences returned within GRanges object. Example 8.1. Retrieve sequences example’s target panel, TwinStrand’s Mouse Mutagenesis Panel Example 8.2. Retrieve sequences custom interval regions. use Human Mutagenesis Panel example. Sequences can exported FASTA files write_reference_fasta(). Supply function GRanges object containing sequences regions. one written single FASTA file. FASTA file saved output_path. NULL, file saved working directory.","code":"regions_seq <- get_seq(regions = \"TSpanel_mouse\") regions_seq GRanges object with 20 ranges and 6 metadata columns:        seqnames              ranges strand | target_size       label           <Rle>           <IRanges>  <Rle> |   <integer> <character>    [1]     chr1   69304218-69306617      * |        2400        chr1    [2]     chr1 155235939-155238338      * |        2400      chr1.2    [3]     chr2   50833176-50835575      * |        2400        chr2    [4]     chr3 109633161-109635560      * |        2400        chr3    [5]     chr4   96825281-96827680      * |        2400        chr4    ...      ...                 ...    ... .         ...         ...   [16]    chr15   66779763-66782162      * |        2400       chr15   [17]    chr16   72381581-72383980      * |        2400       chr16   [18]    chr17   94009029-94011428      * |        2400       chr17   [19]    chr18   81262079-81264478      * |        2400       chr18   [20]    chr19     4618814-4621213      * |        2400       chr19        genic_context region_GC_content      genome                sequence          <character>         <numeric> <character>          <DNAStringSet>    [1]    intergenic              37.3        mm10 CAATCTTTCT...CAAAATGCAA    [2]         genic              54.0        mm10 AATCTCCAGG...CAAGCACTGG    [3]    intergenic              45.3        mm10 TGTGCCCCAT...TGCTTGCCAC    [4]         genic              39.2        mm10 AACGATGAAT...GCACTCAAGA    [5]    intergenic              39.4        mm10 ATTGTTTGAA...CTCAGGGCCT    ...           ...               ...         ...                     ...   [16]         genic              44.0        mm10 GTGTCATTTT...CAGGTAGAGG   [17]    intergenic              38.3        mm10 TCTGTAGCAA...ATAAAAACTC   [18]    intergenic              35.2        mm10 TAAGGAAACT...TATCAAAGAT   [19]    intergenic              47.3        mm10 AGCCATCTCC...GGGACTCAGA   [20]         genic              56.1        mm10 TCCAGGCTGT...GCCCATGGAG   -------   seqinfo: 19 sequences from an unspecified genome; no seqlengths # We will load the TSpanel_human regions file as an example human <- load_regions_file(\"TSpanel_human\") regions_seq <- get_seq(regions = human,                        is_0_based_rg = FALSE,                        species = \"human\",                        genome = \"hg38\",                        masked = FALSE,                        padding = 0) regions_seq GRanges object with 20 ranges and 7 metadata columns:        seqnames              ranges strand | target_size description           <Rle>           <IRanges>  <Rle> |   <integer> <character>    [1]    chr11 108510788-108513187      * |        2400 region_1111    [2]    chr13   75803913-75806312      * |        2400 region_1501    [3]    chr14   74661756-74664155      * |        2400 region_1725    [4]    chr18     5749265-5751664      * |        2400 region_2457    [5]     chr2   40162768-40165167      * |        2400 region_2896    ...      ...                 ...    ... .         ...         ...   [16]    chr15   46089738-46092137      * |        2400 region_1904   [17]    chr17   70672727-70675126      * |        2400 region_2378   [18]    chr21   23665977-23668376      * |        2400 region_3515   [19]    chr22   48262371-48264770      * |        2400 region_3703   [20]    chr10 128969038-128971437      * |        2400  region_784        genic_context        gene      genome       label          <character> <character> <character> <character>    [1]         genic       EXPH5        hg38       chr11    [2]         genic        LMO7        hg38       chr13    [3]         genic       AREL1        hg38       chr14    [4]         genic   MIR3976HG        hg38       chr18    [5]         genic  SLC8A1-AS1        hg38        chr2    ...           ...         ...         ...         ...   [16]    intergenic        <NA>        hg38       chr15   [17]    intergenic        <NA>        hg38       chr17   [18]    intergenic        <NA>        hg38       chr21   [19]    intergenic        <NA>        hg38       chr22   [20]    intergenic        <NA>        hg38       chr10                       sequence                 <DNAStringSet>    [1] GTTTCCTTCA...CTTTCCTGGA    [2] AGAATTATTT...TCAGACAACC    [3] TTCCCTGGTT...AAGATACACT    [4] TGGCAACTTG...AATGAAAACA    [5] CTAGATTTTC...AGCATATCAC    ...                     ...   [16] TGAACAGACA...ATAAATTGCT   [17] GTGGTGATCA...TAAAGATTCT   [18] TGTAATAATG...TCCAGTCATT   [19] GTAAAGGCAG...TCCACAGCAG   [20] GTGGACTGAT...TTCTCACACT   -------   seqinfo: 20 sequences from an unspecified genome; no seqlengths write_reference_fasta(regions_seq, output_path = NULL)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"exporting-results","dir":"Articles","previous_headings":"","what":"Exporting Results","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Users can easily output data frames Excel workbook write_excel(). function can write single data frames can take list dataframes write one separate Excel sheet workbook. addition data frames, write_excel() also extract mf_data, point_estimates, pairwise_comparisons model_mf() output write excel workbook. Set model_results TRUE supplying function output model_mf(). Example 9.1. Write MF data excel workbook. Example 9.2. Export model results Mutation data can written VCF file downstream applications write_vcf_from_mut().","code":"# save a single data frame to an Excel file write_excel(mf_data_global, workbook_name = \"example_mf_data\")  # Write multiple data frames to a list to export all at once. list <- list(mf_data_global, mf_data_rg, mf_data_6) names(list) <- c(\"mf_per_sample\", \"mf_per_region\", \"pf_6spectra\")  #save a list of data frames to an Excel file write_excel(list, workbook_name = \"example_mf_data_list\") write_excel(   model_by_dose,   workbook_name = \"Example_model\",   model_results = TRUE ) write_vcf_from_mut(example_data)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"summary-report","dir":"Articles","previous_headings":"","what":"Summary Report","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"facilitate reproducible analysis error-corrected sequencing data, MutSeqR package includes pre-built R Markdown workflow: Summary_Report.Rmd. report template allows users efficiently evaluate effects experimental variable (e.g., dose, age, tissue) mutation frequency mutational spectra. workflow guides users standardized analysis pipeline includes: Mutation data Import Mutation data Filtering Calculation Global Mutation Frequencies per Sample Visualization mutation frequencies per Sample Mean mutation frequencies per experimental group. Generalized Linear Modeling Mutation Frequency (min) effect experimental variable. Optional Benchmark Dose Modeling mutation frequency across dose concentration variable. Calculation Mutation Subtype Frequencies Proportions base-6 base-96 resolutions. Comparison base-6 mutation spectra experimental groups. Visualization base-6 subtype proportions per sample hierarchical clustering Visualization base-6 subtype proportions per experimental group. Visualization base-96 subtype proportions per experimental group. Mutation signature analysis per experimental group. Generalized Linear Mixed Modeling mutation frequency effect specified genomic regions experimental group. Visualization multiplet mutations per experimental group. figures included report. Data frames included report also exported excel workbooks within predefined output path. Users must download config file “summary_config.yaml”. file defines parameters passed Summary_Report.rmd. Users must fill .yaml file save . Users can render report using MutSeqR’s render_report(). Provide function .yaml file using config_file_path parameter. Provide name file path output file output_file parameter. Set output_format one “html_document” (recommended), “pdf_document”, “”. description parameters set summary_config.yaml. Parameters catagerised function. System Set projectdir: working directory project. filepaths imported projectdir. NULL, current working directory used. outputdir: output directory output files saved. NULL, projectdir used. Project Details project_title: project title. research_name: name principle investigator project. user_name: name one running analysis. project_description: Optional description project. Workflow Profile config_profile : Choose workflow profile load pre-defined parameters. Current options “Duplex Sequencing Mouse Mutagenesis Panel”, “Duplex Sequencing Human Mutagenesis Panel”, “Duplex Sequencing Rat Mutagenesis Panel”, “None”. Pre-defined parameters set handle data import filtering. profiles coming soon. using pre-defined profile (“None”), users must fill Custom_Profile_Params (see ). Data Import species: species model organism. can common name scientific name. Ex. “Mouse” “Mus musculus”. genome: reference genome. used populate sequence context column. Ex. “mm10”. file_type: format mutation data imported. Options table vcf. mutation_file: file path mutation data file(s). can individual file directory containing multiple files. file path read projectdir/mutation_file. mut_sep: delimiter importing tabular mutation data. Ex. “ tab-delimited. sample_data: optional file path sample metadata joined mutation data. Set NULL importing metadata. file path read projectdir/sample_data. sd_sep: delimiter importing sample_data file. Ex. “ tab-delimited. Calculating MF Precalculated-depth files: Summary_Report automatically check import whether mutation data contains depth column (total_depth depth). depth column exist, per-sample precalculated depth can provided subtype resolution calculate mutation frequencies. exp_variable provided, Summary_Report automatically sum per-sample depths obtain depth per experimental group needed. order MutSeqR calculate depth mutation data, data must depth-value every sequenced site. sufficient calculate depth list variants. -variant sites must included. Summary Report check total_depth column, check whether no_variant sites included. finds total_depth column, proceed calculate depth mutation data. precalc_depth_data_global: Optional file path precalculated per-sample total_depth data. total number bases sequenced per sample, used calculating mutation frequencies. Columns “sample” “group_depth”. using exp_variable (see ), please also include table. file path read projectdir/precalc_depth_data_global. precalc_depth_data_base6: Optional file path precalculated per-sample total_depth data base_6 context. total number C T bases sequenced sample. Columns “sample”, “normalized_ref”, “subtype_depth”. using exp_variable (see ), please also include table. file path read projectdir/precalc_depth_data_base6. precalc_depth_data_base96: Optional file path precalculated per-sample total_depth data base_96 context. total number bases sequenced per sample 32 possible trinucleotide contexts pyrimidine notation. Columns “sample”, “normalized_context”, “subtype_depth”. using exp_variable, please also include table. file path read projectdir/precalc_depth_data_base96. precalc_depth_data_rg: Optional file path precalculated per-sample total_depth data target region. total number bases sequenced per sample region. Columns “sample”, ‘region_col’, “group_depth”. applicable performing regions analysis. file path read projectdir/precalc_depth_data_rg. d_sep: delimiter importing precalc_depth_data files. Statistical Analysis Summary Report run several analyses investigate effect specified experimental variable mutation frequency spectra. exp_variable: Optional. experimental variable interest. argument refer column mutation data sample_data. Summary Report support analysis multiple exp_variables; supply one column name. Ex. “dose”. NULL, statistical analyses skipped. exp_variable_order: vector specifying unique levels exp_variable order desired plotting. reference_level: reference level exp_variable. Ex. vehicle control group chemical dose. value must match one levels within exp_variable column. contrasts: optional file path contrasts table specifying pairwise comparisons levels experimental variable. Required 2 columns, header. contrasts table used Generalized Linear Modeling MFmin exp_variable (model_mf), Generalized Linear Mixed Modeling MFmin exp_variable target regions, using targeted panel (model_mf), comparing base_6 mutation spectra exp_variable levels (spectra_comparison). file path read projectdir/contrasts. NULL, spectra_comparison skipped, GLM/GLMM return model estimates per exp_variable. cont_sep: delimiter importing contrasts file. bmd: logical variable indicating whether run BMD analysis MF data. TRUE, exp_variable must refer numeric dose concentration values. bmr: numeric value indicating benchmark response bmd analysis. Summary Report defines bmr bmr-% increase MF reference level. Default 0.5. bmd_method: method running BMD analysis. Optionsare “proast” “toxicr”. run_sigfitting: logical variable indicating whether run signature_fitting. exp_variable provided,signature analysis performed per exp_variable level, otherwise performed per sample. TRUE, create virtual environment run python first use. python_version: python version installed operating system. Custom Profile Parameters Users wish use one pre-defined parameter profiles may still run Summary Report filling Custom_Profile_Params. using one config_profiles, users skip section. ecs_technology: technology used generate data. is_0_based_mut: logical variable indicating whether genomic coordinates tabular mutation data 0-based (TRUE), 1-based (FALSE). regions: optional file path regions metadata file. file must contain columns “contig”, “start”, “end” addition metadata. is_0_based_rg: logical variable indicating whether genomic coordinates regions file 0-based (TRUE), 1-based (FALSE). rg_sep: delimiter importing regions file. vaf_cutoff: numeric value 0-1. flag variants VAF > vaf_cutoff germline variants filter mutation counts. snv_in_germ_mnv: logical variable indicating whether filter_mut flag SNVs overlap germline MNVs filtering. rm_abnormal_vaf: logical variable indicaring whether filter_mut remove records VAF 0.05-0.45 0.55-0.95. custom_filter_col: column name used filter_mut apply custom filter specified column. custom_filter_val: value custom_filter_col filter. custom_filter_rm: logical variable indicating whether records contain custom_filter_val within custom_filter_col removed (TRUE) flagged (FALSE). filtering_regions: Optional file path regions file filter variants. Must contain contig, start, end region. file path read projectdir/filtering_regions. filtering_rg_sep: delimiter importing filtering_regions file. regions_filter: “keep_within” remove records fall outside filtering_regions. “remove_within” remove records fall inside filtering_regions. allow_half_overlap: logical variable indicating whether include records half overlap regions. FALSE, start end position record must fall within region interval counted “falling region”. TRUE, records start/end within region interval, extend outside counted “falling inside region”. filtering_is_0_based_rg: logical variable indicating whether genomic coordinates filtering_regions 0-based (TRUE) 1-based (FALSE). rm_filtered_mut_from_depth: logical variable indicating whether alt_depth variants flagged filtering process removed total_depth values. apply records flagged germline variants. do_regions_analysis: logical variable indicating whether perform Generalized Linear Mixed Modeling data sequencing target. applicable data sets used targeted panel specific regions interest. region_col: column name uniquely identifies target region regions_analysis. column must present mutation_data regions metadata file.","code":"config <- system.file(\"extdata\", \"inputs\", \"summary_config.yaml\", package = \"MutSeqR\") file.copy(from = config, to = \"path/to/summary_config.yaml\") render_report(config_file_path = \"path/to/summary_config.yaml\",               output_file = \"path/to/output_file.html\",               output_format = \"html_document\") R version 4.5.1 (2025-06-13) Platform: x86_64-pc-linux-gnu Running under: Ubuntu 24.04.2 LTS  Matrix products: default BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0  locale:  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C  time zone: UTC tzcode source: system (glibc)  attached base packages: [1] stats4    stats     graphics  grDevices utils     datasets  methods [8] base  other attached packages:  [1] BSgenome.Hsapiens.UCSC.hg38_1.4.5  BSgenome.Mmusculus.UCSC.mm10_1.4.3  [3] BSgenome_1.76.0                    rtracklayer_1.68.0  [5] BiocIO_1.18.0                      Biostrings_2.76.0  [7] XVector_0.48.0                     GenomicRanges_1.60.0  [9] GenomeInfoDb_1.44.0                IRanges_2.42.0 [11] S4Vectors_0.46.0                   BiocGenerics_0.54.0 [13] generics_0.1.4                     MutSeqR_0.99.0 [15] htmltools_0.5.8.1                  DT_0.33 [17] BiocStyle_2.36.0  loaded via a namespace (and not attached):   [1] RColorBrewer_1.1-3          jsonlite_2.0.0   [3] magrittr_2.0.3              GenomicFeatures_1.60.0   [5] farver_2.1.2                nloptr_2.2.1   [7] rmarkdown_2.29              vctrs_0.6.5   [9] memoise_2.0.1               minqa_1.2.8  [11] Rsamtools_2.24.0            RCurl_1.98-1.17  [13] S4Arrays_1.8.1              curl_6.4.0  [15] broom_1.0.8                 SparseArray_1.8.0  [17] Formula_1.2-5               sass_0.4.10  [19] bslib_0.9.0                 htmlwidgets_1.6.4  [21] cachem_1.1.0                GenomicAlignments_1.44.0  [23] lifecycle_1.0.4             pkgconfig_2.0.3  [25] Matrix_1.7-3                R6_2.6.1  [27] fastmap_1.2.0               GenomeInfoDbData_1.2.14  [29] rbibutils_2.3               MatrixGenerics_1.20.0  [31] digest_0.6.37               colorspace_2.1-1  [33] patchwork_1.3.0             AnnotationDbi_1.70.0  [35] rprojroot_2.0.4             crosstalk_1.2.1  [37] RSQLite_2.4.1               labeling_0.4.3  [39] httr_1.4.7                  abind_1.4-8  [41] compiler_4.5.1              microbenchmark_1.5.0  [43] here_1.0.1                  bit64_4.6.0-1  [45] withr_3.0.2                 backports_1.5.0  [47] BiocParallel_1.42.1         carData_3.0-5  [49] DBI_1.2.3                   MASS_7.3-65  [51] DelayedArray_0.34.1         rjson_0.2.23  [53] tools_4.5.1                 glue_1.8.0  [55] restfulr_0.0.15             nlme_3.1-168  [57] grid_4.5.1                  checkmate_2.3.2  [59] gtable_0.3.6                tidyr_1.3.1  [61] data.table_1.17.6           doBy_4.6.27  [63] car_3.1-3                   Deriv_4.1.6  [65] pillar_1.10.2               stringr_1.5.1  [67] splines_4.5.1               dplyr_1.1.4  [69] lattice_0.22-7              bit_4.6.0  [71] tidyselect_1.2.1            knitr_1.50  [73] reformulas_0.4.1            SummarizedExperiment_1.38.1  [75] xfun_0.52                   Biobase_2.68.0  [77] matrixStats_1.5.0           stringi_1.8.7  [79] UCSC.utils_1.4.0            yaml_2.3.10  [81] boot_1.3-31                 evaluate_1.0.4  [83] codetools_0.2-20            tibble_3.3.0  [85] BiocManager_1.30.26         packcircles_0.3.7  [87] cli_3.6.5                   Rdpack_2.6.4  [89] jquerylib_0.1.4             dichromat_2.0-0.1  [91] modelr_0.1.11               Rcpp_1.0.14  [93] png_0.1-8                   XML_3.99-0.18  [95] parallel_4.5.1              ggh4x_0.3.1  [97] ggplot2_3.5.2               blob_1.2.4  [99] dendsort_0.3.4              plyranges_1.28.0 [101] bitops_1.0-9                lme4_1.1-37 [103] viridisLite_0.4.2           VariantAnnotation_1.54.1 [105] scales_1.4.0                purrr_1.0.4 [107] crayon_1.5.3                rlang_1.1.6 [109] cowplot_1.1.3               KEGGREST_1.48.1"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"general-usage-2","dir":"Articles","previous_headings":"","what":"General Usage","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"Users must download config file “summary_config.yaml”. file defines parameters passed Summary_Report.rmd. Users must fill .yaml file save . Users can render report using MutSeqR’s render_report(). Provide function .yaml file using config_file_path parameter. Provide name file path output file output_file parameter. Set output_format one “html_document” (recommended), “pdf_document”, “”.","code":"config <- system.file(\"extdata\", \"inputs\", \"summary_config.yaml\", package = \"MutSeqR\") file.copy(from = config, to = \"path/to/summary_config.yaml\") render_report(config_file_path = \"path/to/summary_config.yaml\",               output_file = \"path/to/output_file.html\",               output_format = \"html_document\")"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"description parameters set summary_config.yaml. Parameters catagerised function. System Set projectdir: working directory project. filepaths imported projectdir. NULL, current working directory used. outputdir: output directory output files saved. NULL, projectdir used. Project Details project_title: project title. research_name: name principle investigator project. user_name: name one running analysis. project_description: Optional description project. Workflow Profile config_profile : Choose workflow profile load pre-defined parameters. Current options “Duplex Sequencing Mouse Mutagenesis Panel”, “Duplex Sequencing Human Mutagenesis Panel”, “Duplex Sequencing Rat Mutagenesis Panel”, “None”. Pre-defined parameters set handle data import filtering. profiles coming soon. using pre-defined profile (“None”), users must fill Custom_Profile_Params (see ). Data Import species: species model organism. can common name scientific name. Ex. “Mouse” “Mus musculus”. genome: reference genome. used populate sequence context column. Ex. “mm10”. file_type: format mutation data imported. Options table vcf. mutation_file: file path mutation data file(s). can individual file directory containing multiple files. file path read projectdir/mutation_file. mut_sep: delimiter importing tabular mutation data. Ex. “ tab-delimited. sample_data: optional file path sample metadata joined mutation data. Set NULL importing metadata. file path read projectdir/sample_data. sd_sep: delimiter importing sample_data file. Ex. “ tab-delimited. Calculating MF Precalculated-depth files: Summary_Report automatically check import whether mutation data contains depth column (total_depth depth). depth column exist, per-sample precalculated depth can provided subtype resolution calculate mutation frequencies. exp_variable provided, Summary_Report automatically sum per-sample depths obtain depth per experimental group needed. order MutSeqR calculate depth mutation data, data must depth-value every sequenced site. sufficient calculate depth list variants. -variant sites must included. Summary Report check total_depth column, check whether no_variant sites included. finds total_depth column, proceed calculate depth mutation data. precalc_depth_data_global: Optional file path precalculated per-sample total_depth data. total number bases sequenced per sample, used calculating mutation frequencies. Columns “sample” “group_depth”. using exp_variable (see ), please also include table. file path read projectdir/precalc_depth_data_global. precalc_depth_data_base6: Optional file path precalculated per-sample total_depth data base_6 context. total number C T bases sequenced sample. Columns “sample”, “normalized_ref”, “subtype_depth”. using exp_variable (see ), please also include table. file path read projectdir/precalc_depth_data_base6. precalc_depth_data_base96: Optional file path precalculated per-sample total_depth data base_96 context. total number bases sequenced per sample 32 possible trinucleotide contexts pyrimidine notation. Columns “sample”, “normalized_context”, “subtype_depth”. using exp_variable, please also include table. file path read projectdir/precalc_depth_data_base96. precalc_depth_data_rg: Optional file path precalculated per-sample total_depth data target region. total number bases sequenced per sample region. Columns “sample”, ‘region_col’, “group_depth”. applicable performing regions analysis. file path read projectdir/precalc_depth_data_rg. d_sep: delimiter importing precalc_depth_data files. Statistical Analysis Summary Report run several analyses investigate effect specified experimental variable mutation frequency spectra. exp_variable: Optional. experimental variable interest. argument refer column mutation data sample_data. Summary Report support analysis multiple exp_variables; supply one column name. Ex. “dose”. NULL, statistical analyses skipped. exp_variable_order: vector specifying unique levels exp_variable order desired plotting. reference_level: reference level exp_variable. Ex. vehicle control group chemical dose. value must match one levels within exp_variable column. contrasts: optional file path contrasts table specifying pairwise comparisons levels experimental variable. Required 2 columns, header. contrasts table used Generalized Linear Modeling MFmin exp_variable (model_mf), Generalized Linear Mixed Modeling MFmin exp_variable target regions, using targeted panel (model_mf), comparing base_6 mutation spectra exp_variable levels (spectra_comparison). file path read projectdir/contrasts. NULL, spectra_comparison skipped, GLM/GLMM return model estimates per exp_variable. cont_sep: delimiter importing contrasts file. bmd: logical variable indicating whether run BMD analysis MF data. TRUE, exp_variable must refer numeric dose concentration values. bmr: numeric value indicating benchmark response bmd analysis. Summary Report defines bmr bmr-% increase MF reference level. Default 0.5. bmd_method: method running BMD analysis. Optionsare “proast” “toxicr”. run_sigfitting: logical variable indicating whether run signature_fitting. exp_variable provided,signature analysis performed per exp_variable level, otherwise performed per sample. TRUE, create virtual environment run python first use. python_version: python version installed operating system. Custom Profile Parameters Users wish use one pre-defined parameter profiles may still run Summary Report filling Custom_Profile_Params. using one config_profiles, users skip section. ecs_technology: technology used generate data. is_0_based_mut: logical variable indicating whether genomic coordinates tabular mutation data 0-based (TRUE), 1-based (FALSE). regions: optional file path regions metadata file. file must contain columns “contig”, “start”, “end” addition metadata. is_0_based_rg: logical variable indicating whether genomic coordinates regions file 0-based (TRUE), 1-based (FALSE). rg_sep: delimiter importing regions file. vaf_cutoff: numeric value 0-1. flag variants VAF > vaf_cutoff germline variants filter mutation counts. snv_in_germ_mnv: logical variable indicating whether filter_mut flag SNVs overlap germline MNVs filtering. rm_abnormal_vaf: logical variable indicaring whether filter_mut remove records VAF 0.05-0.45 0.55-0.95. custom_filter_col: column name used filter_mut apply custom filter specified column. custom_filter_val: value custom_filter_col filter. custom_filter_rm: logical variable indicating whether records contain custom_filter_val within custom_filter_col removed (TRUE) flagged (FALSE). filtering_regions: Optional file path regions file filter variants. Must contain contig, start, end region. file path read projectdir/filtering_regions. filtering_rg_sep: delimiter importing filtering_regions file. regions_filter: “keep_within” remove records fall outside filtering_regions. “remove_within” remove records fall inside filtering_regions. allow_half_overlap: logical variable indicating whether include records half overlap regions. FALSE, start end position record must fall within region interval counted “falling region”. TRUE, records start/end within region interval, extend outside counted “falling inside region”. filtering_is_0_based_rg: logical variable indicating whether genomic coordinates filtering_regions 0-based (TRUE) 1-based (FALSE). rm_filtered_mut_from_depth: logical variable indicating whether alt_depth variants flagged filtering process removed total_depth values. apply records flagged germline variants. do_regions_analysis: logical variable indicating whether perform Generalized Linear Mixed Modeling data sequencing target. applicable data sets used targeted panel specific regions interest. region_col: column name uniquely identifies target region regions_analysis. column must present mutation_data regions metadata file.","code":""},{"path":[]},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/articles/MutSeqR_introduction.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"MutSeqR: Error-Corrected Sequencing (ECS) Analysis For Mutagenicity Assessment","text":"","code":"R version 4.5.1 (2025-06-13) Platform: x86_64-pc-linux-gnu Running under: Ubuntu 24.04.2 LTS  Matrix products: default BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0  locale:  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C  time zone: UTC tzcode source: system (glibc)  attached base packages: [1] stats4    stats     graphics  grDevices utils     datasets  methods [8] base  other attached packages:  [1] BSgenome.Hsapiens.UCSC.hg38_1.4.5  BSgenome.Mmusculus.UCSC.mm10_1.4.3  [3] BSgenome_1.76.0                    rtracklayer_1.68.0  [5] BiocIO_1.18.0                      Biostrings_2.76.0  [7] XVector_0.48.0                     GenomicRanges_1.60.0  [9] GenomeInfoDb_1.44.0                IRanges_2.42.0 [11] S4Vectors_0.46.0                   BiocGenerics_0.54.0 [13] generics_0.1.4                     MutSeqR_0.99.0 [15] htmltools_0.5.8.1                  DT_0.33 [17] BiocStyle_2.36.0  loaded via a namespace (and not attached):   [1] RColorBrewer_1.1-3          jsonlite_2.0.0   [3] magrittr_2.0.3              GenomicFeatures_1.60.0   [5] farver_2.1.2                nloptr_2.2.1   [7] rmarkdown_2.29              vctrs_0.6.5   [9] memoise_2.0.1               minqa_1.2.8  [11] Rsamtools_2.24.0            RCurl_1.98-1.17  [13] S4Arrays_1.8.1              curl_6.4.0  [15] broom_1.0.8                 SparseArray_1.8.0  [17] Formula_1.2-5               sass_0.4.10  [19] bslib_0.9.0                 htmlwidgets_1.6.4  [21] cachem_1.1.0                GenomicAlignments_1.44.0  [23] lifecycle_1.0.4             pkgconfig_2.0.3  [25] Matrix_1.7-3                R6_2.6.1  [27] fastmap_1.2.0               GenomeInfoDbData_1.2.14  [29] rbibutils_2.3               MatrixGenerics_1.20.0  [31] digest_0.6.37               colorspace_2.1-1  [33] patchwork_1.3.0             AnnotationDbi_1.70.0  [35] rprojroot_2.0.4             crosstalk_1.2.1  [37] RSQLite_2.4.1               labeling_0.4.3  [39] httr_1.4.7                  abind_1.4-8  [41] compiler_4.5.1              microbenchmark_1.5.0  [43] here_1.0.1                  bit64_4.6.0-1  [45] withr_3.0.2                 backports_1.5.0  [47] BiocParallel_1.42.1         carData_3.0-5  [49] DBI_1.2.3                   MASS_7.3-65  [51] DelayedArray_0.34.1         rjson_0.2.23  [53] tools_4.5.1                 glue_1.8.0  [55] restfulr_0.0.15             nlme_3.1-168  [57] grid_4.5.1                  checkmate_2.3.2  [59] gtable_0.3.6                tidyr_1.3.1  [61] data.table_1.17.6           doBy_4.6.27  [63] car_3.1-3                   Deriv_4.1.6  [65] pillar_1.10.2               stringr_1.5.1  [67] splines_4.5.1               dplyr_1.1.4  [69] lattice_0.22-7              bit_4.6.0  [71] tidyselect_1.2.1            knitr_1.50  [73] reformulas_0.4.1            SummarizedExperiment_1.38.1  [75] xfun_0.52                   Biobase_2.68.0  [77] matrixStats_1.5.0           stringi_1.8.7  [79] UCSC.utils_1.4.0            yaml_2.3.10  [81] boot_1.3-31                 evaluate_1.0.4  [83] codetools_0.2-20            tibble_3.3.0  [85] BiocManager_1.30.26         packcircles_0.3.7  [87] cli_3.6.5                   Rdpack_2.6.4  [89] jquerylib_0.1.4             dichromat_2.0-0.1  [91] modelr_0.1.11               Rcpp_1.0.14  [93] png_0.1-8                   XML_3.99-0.18  [95] parallel_4.5.1              ggh4x_0.3.1  [97] ggplot2_3.5.2               blob_1.2.4  [99] dendsort_0.3.4              plyranges_1.28.0 [101] bitops_1.0-9                lme4_1.1-37 [103] viridisLite_0.4.2           VariantAnnotation_1.54.1 [105] scales_1.4.0                purrr_1.0.4 [107] crayon_1.5.3                rlang_1.1.6 [109] cowplot_1.1.3               KEGGREST_1.48.1"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Annette E. Dodge. Author. Andrew Williams. Author. Danielle P.M. LeBlanc. Author. David M. Schuster. Author. Elena Esina. Author. Clint C. Valentine. Author. Jesse J. Salk. Author. Alexander Y. Maslov. Author. Christopher Bradley. Author. Carole L. Yauk. Author. Francesco Marchetti. Author. Matthew J. Meier. Author, maintainer. Geronimo Matteo. Contributor.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dodge , Williams , LeBlanc D, Schuster D, Esina E, Valentine C, Salk J, Maslov , Bradley C, Yauk C, Marchetti F, Meier M (2025). MutSeqR: Analysis Error-Corrected Sequencing Data Mutation Detection. R package version 0.99.0, https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/.","code":"@Manual{,   title = {MutSeqR: Analysis of Error-Corrected Sequencing Data for Mutation Detection},   author = {Annette E. Dodge and Andrew Williams and Danielle P.M. LeBlanc and David M. Schuster and Elena Esina and Clint C. Valentine and Jesse J. Salk and Alexander Y. Maslov and Christopher Bradley and Carole L. Yauk and Francesco Marchetti and Matthew J. Meier},   year = {2025},   note = {R package version 0.99.0},   url = {https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/}, }"},{"path":[]},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Analysis of Error-Corrected Sequencing Data for Mutation Detection","text":"MutSeqR open-source R package analyze error-corrected Next-Generation Sequencing (ECS) data, empowering users flexibility exploratory analyses ensuring compatibility across technologies.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Analysis of Error-Corrected Sequencing Data for Mutation Detection","text":"See vignette details function utility.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/index.html","id":"changelog","dir":"","previous_headings":"","what":"Changelog","title":"Analysis of Error-Corrected Sequencing Data for Mutation Detection","text":"See release notes pkgdown site version history. can also view GitHub releases.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis of Error-Corrected Sequencing Data for Mutation Detection","text":"Install package github: Load package","code":"# install.packages(\"devtools\") devtools::install_github(\"EHSRB-BSRSE-Bioinformatics/MutSeqR\") library(MutSeqR)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Analysis of Error-Corrected Sequencing Data for Mutation Detection","text":"encounter clear bug, please file issue minimal reproducible example Github.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Analysis of Error-Corrected Sequencing Data for Mutation Detection","text":"cite package publications use: Dodge , Williams , LeBlanc D, Schuster D, Esina E, Valentine C, Salk J, Maslov , Bradley C, Yauk C, Marchetti F, Meier M (2025). MutSeqR: Analysis Error-Corrected Sequencing Data Mutation Detection. R package version 0.99.0, https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/annotate_CpG_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate CpG sites — annotate_cpg_sites","title":"Annotate CpG sites — annotate_cpg_sites","text":"simple method test whether trinucleotide context contains CpG site.  Vectorized version Biostrings::vcountPattern used.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/annotate_CpG_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate CpG sites — annotate_cpg_sites","text":"","code":"annotate_cpg_sites(mutation_data, motif = \"CG\", column_query = \"context\", ...)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/annotate_CpG_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate CpG sites — annotate_cpg_sites","text":"mutation_data dataframe GRanges object containing genomic regions interest look CpG sites. motif Default \"CG\", returns CpG sites. theory use arbitrary string look different motifs. Use caution. case pattern searched must column mutation data. column_query Default \"context\" can column  mutation data wish look motif . ... Additional arguments vcountPattern()","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/annotate_CpG_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate CpG sites — annotate_cpg_sites","text":"data frame number rows ranges input, additional metadata column indicating CpG sites target sequence mutation.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_proast.html","id":null,"dir":"Reference","previous_headings":"","what":"BMD modeling using PROAST — bmd_proast","title":"BMD modeling using PROAST — bmd_proast","text":"Calculate benchmark dose (BMD) continuous, individual-level data optional model averaging. function intended model dose-response mutation frequency. function extension PROAST software (copyright RIVM National Institute Public Health Environment).","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_proast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BMD modeling using PROAST — bmd_proast","text":"","code":"bmd_proast(   mf_data,   dose_col = \"dose\",   response_col = \"mf_min\",   covariate_col = NULL,   bmr = 0.5,   adjust_bmr_to_group_sd = FALSE,   model_averaging = TRUE,   num_bootstraps = 200,   plot_results = FALSE,   output_path = NULL,   raw_results = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_proast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BMD modeling using PROAST — bmd_proast","text":"mf_data data frame containing data analyzed. Data individual sample. Required columns column containing dose dose_col column(s) containing mutation frequency response_col, column containing covariate covariate_col, applicable. dose_col column mf_data containing dose data. Values must numeric. Default \"dose\". response_col column(s) mf_data containing mutation frequency. Multiple response_cols can provided. Default \"mf_min\". covariate_col column mf_data containing covariate. covariate present, set NULL (default). bmr Benchmark Response value. BMR defined bmr-percent change mean response relative controls. Default 0.5 (50% change). adjust_bmr_to_group_sd logical value indicating whether group standard deviation used BMR. TRUE, BMR bet set one standard deviation control group mean. Default FALSE. model_averaging logical value indicating whether confidence intervals calculated using model averaging. Default TRUE (recommended). num_bootstraps number bootstrap resamples used model averaging. Default 200 (recommended). plot_results logical value indicating whether plot BMD models /Cleveland plots. Default FALSE. Plots may exported directly output_path, returned within list user. output_path file path indicating save plots. NULL, plots automatically displayed graphics window returned list alongside bmd results. raw_results logical value indicating whether return raw results PROAST analysis. FALSE, data returned summary table.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_proast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BMD modeling using PROAST — bmd_proast","text":"summmary data frame final results. plots raw results selected, data returned within list. summary include following response variable covariate subgroup (applicable): Model: m3 m5 model selected model family (Exponential, Hill, Inverse Exponential, LogNormal). Response: response variable. Covariate: covariate subgroup, applicable. bmr: specified Benchmark Response. BMD: Benchmark Dose, original dose units, estimated given model. BMDL: lower bound 90% confidence interval BMD, calculated profile likelihood method. BMDU: upper bound 90% confidence interval BMD, calculated profile likelihood method. AIC: Akaike Information Criterion selected model. Lower values indicate better fit. advised choose BMD value model lowest AIC. weights: weight model model averaging process, applicable. Model averaging: BMDL BMDU calculated bootstrap method model_averaging = TRUE. significant response data, function return empty data frame. plot_results = TRUE function create following plots response variable. plots saved output_path. output_path provided, returned within list alongside summary data frame. Model Plots. following plot created model family (Exponential, Hill, Inverse Exponential, LogNormal): fitted curve selected (3 5) model. Data log-transformed. Individual data points plotted using small triangles. geometric mean (median) dose plotted large triangle. BMD indicated dotted line. applicable, covariate subgroup indicated color. bootstrap_curves model_averaging = TRUE, bootstrap curves based model averaging. geometric mean (median) dose plotted large triangle. Data log-transformed. cleveland plot model_averaging = TRUE BMD estimate model plotted red point alongside 90% confidence intervals. size BMD point represents model weight assigned model averaging, based AIC. raw_results = TRUE, function return raw results PROAST analysis alongside summary data frame. PROAST raw_results list variables data continuously modified passed proast functions. can given f.proast() resume analysis.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_proast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BMD modeling using PROAST — bmd_proast","text":"function  modified version original interactive PROAST software (https://www.rivm.nl/en/proast allows batch processing data. function designed used output calculate_mf purpose calculating Benchmark Dose mutation frequency data. , functionality original PROAST software removed. function accept continuous data, observation individual subject. assumed data lognormally distributed. response data log-transformed, back-transformed statistical analysis. function fit model 3 5 various families models (Exponential, Hill, Inverse Exponential, LogNormal). compare fits models 3 5 model family select model lowest AIC. BMD 90% confidence intervals calculated based selected model (3 5) model family using profile likelihood method. BMD 90% confidence interval may also calculated using bootstrap method model_averaging = TRUE. recommended use 200 bootstraps model averaging. replicate results PROAST interactive software, select following menu options: f.proast(mf_data) type response data want consider? 1: continuous, individual data want fit single model fit various nested families models? 3: select model 3 5 various families models Q1: variable want consider independent variable? # : dose_col Give number(s) response(s) want analyse. # : response_col Give number factor serving potential covariate (e.g.sex) type 0 none. # : covariate_col want adjust CES within group SD? 1: , 2: yes | adjust_bmr_to_group_sd: FALSE/TRUE Give value CES (always positive) type 0 avoid calculation CIs. bmr want calculate BMD confidence interval model averaging? 1: 2: yes | model_averaging: FALSE/TRUE give number bootstrap runs calculating BMD confidence interval based MA (e.g. 200) num_bootstraps models want fitted? 4 : previous option lognormal DR model added","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_proast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BMD modeling using PROAST — bmd_proast","text":"","code":"# Calculate the BMD for a 50% increase in mutation frequency from control # With Model averaging. # For the purpose of this example, num_bootstraps is set to 5 to reduce # run time. 200 bootstraps is recommended. example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) mf <- calculate_mf(example_data, retain_metadata_cols = \"dose\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)` bmd <- bmd_proast(mf_data = mf,                   dose_col = \"dose\",                   response_col = c(\"mf_min\", \"mf_max\"),                   bmr = 0.5,                   model_averaging = TRUE,                   num_bootstraps = 5) #> Model averaging is set to TRUE. This may take some time to run. #> Independent variable: dose #> Running in batch/command line mode... #> Independent variable: dose #> Independent variable: dose #> Warning: Coercing LHS to a list #> Setting data type to continuous, individual data #> Selected model option: 'select model 3 or 5 from various families of models' (3) #> indep_var_choice: dose #> dose #> Independent variable: #> dose #> moving on... #> Using dose as the independent variable. #>  #> 1 sample  #>  2 dose  #>  3 sum_min  #>  4 sum_max  #>  5 mf_min  #>  6 mf_max  #>  7 group_depth  #> Give number(s) of the response(s) you want to analyse #> Model averaging enabled. #> ans.all$CES: 0.5 #>  #>  #> response:  mf_min #> ANALYSIS WITH EXPONENTIAL MODELS #>  #> model \t converged \t npar \t loglik \t aic #>  full model \t 1 \t 5 \t 14.23 \t -18.46 #>  null model \t 1 \t 2 \t -24.44 \t 52.88  #>  Expon. m3- \t 1 \t 4 \t 8.23 \t -8.46 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 15  #>   #>  Expon. m5- \t 1 \t 5 \t 14.23 \t -18.46 #>  -------------------------------------------------------  #> selected model: Expon. m5-   #>  #>  estimate for  var- :  0.01789  #>   estimate for  a- :  1.718e-07  #>   estimate for  CED- :  8.45  #>   estimate for  c- :  5.611  #>   estimate for  d- :  1.629  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  8.45  #>  6.47  #>  10.3  #>  #> Vyans is greater than 1 #>  #>  #> response:  mf_min  #> ANALYSIS WITH HILL MODELS #>  #> model \t converged \t npar \t loglik \t aic  #>  Hill m3- \t 1 \t 4 \t 8.28 \t -8.56 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 25  #>   #>  Hill m5- \t 1 \t 5 \t 14.23 \t -18.46 #>  -------------------------------------------------------  #> selected model: Hill m5-   #>  #>  estimate for  var- :  0.01789  #>   estimate for  a- :  1.718e-07  #>   estimate for  CED- :  9.03  #>   estimate for  c- :  6.236  #>   estimate for  d- :  2.292  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  9.03  #>  7.02  #>  10.7  #>  #> Vyans is greater than 1 #>  #>  #> response:  mf_min  #> ANALYSIS WITH INVERSE EXPONENTIAL MODELS #> model \t converged \t npar \t loglik \t aic  #>  Inv.Expon. m3- \t 1 \t 4 \t 9.09 \t -10.18 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 52  #>   #>  Inv.Expon. m5- \t 0 \t 5 \t -8.86 \t 27.72 #>  -------------------------------------------------------  #> selected model: Inv.Expon. m3-   #>  #>  estimate for  var- :  0.02745  #>   estimate for  a- :  1.701e-07  #>   estimate for  CED- :  4.714  #>   estimate for  d- :  0.1632  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #>  1 outliers detected, with values for x and y:  #> 25 9.25584825420905e-07   #>  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  4.714  #>  2.9  #>  6.96  #>  #> Vyans is greater than 1 #>  #>  #> response:  mf_min  #> ANALYSIS WITH LOGNORMAL DR MODELS #> model \t converged \t npar \t loglik \t aic  #>  LN m3- \t 1 \t 4 \t 8.72 \t -9.44 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 54  #>   #>  LN m5- \t 1 \t 5 \t 14.23 \t -18.46 #>  -------------------------------------------------------  #> selected model: LN m5-   #>  #>  estimate for  var- :  0.01789  #>   estimate for  a- :  1.718e-07  #>   estimate for  CED- :  9.171  #>   estimate for  c- :  5.956  #>   estimate for  d- :  1.467  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  9.171  #>  7.27  #>  10.7  #>  #> Vyans is greater than 1 #>  #>  #>  -----------  CES =  0.5  ---------------------------------  #>  #> Calculating confidence intervals by model averaging, this may make some time .... #>  #>  #>  The weights used in model averaging are: #>    model weight #> 1    EXP 0.3316 #> 2   HILL 0.3316 #> 3 INVEXP 0.0053 #> 4   LOGN 0.3316 #>  #> Start of MA bootstrap runs ... #> run   1  2  3  4  5 #>  #> duration of bootstrap calculations: #> [1] \"Fri Jun 27 16:05:17 2025\" #> [1] \"Fri Jun 27 16:05:19 2025\" #>  #> The model-average BMD confidence interval is: #>   subgroup BMDlower.ma BMDupper.ma #> 1      all        8.53        9.93 #>  #> Vyans is greater than 1 #>  #>  #> end of analysis for response:  mf_min #>  #> response:  mf_max #> ANALYSIS WITH EXPONENTIAL MODELS #>  #> model \t converged \t npar \t loglik \t aic #>  full model \t 1 \t 5 \t 6.39 \t -2.78 #>  null model \t 1 \t 2 \t -32.52 \t 69.04  #>  Expon. m3- \t 1 \t 4 \t 5.86 \t -3.72 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 15  #>   #>  Expon. m5- \t 1 \t 5 \t 6.39 \t -2.78 #>  -------------------------------------------------------  #> selected model: Expon. m3-   #>  #>  estimate for  var- :  0.03592  #>   estimate for  a- :  2.088e-07  #>   estimate for  CED- :  3.889  #>   estimate for  d- :  0.7269  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  3.889  #>  2.52  #>  5.64  #>  #> Vyans is greater than 1 #>  #>  #> response:  mf_max  #> ANALYSIS WITH HILL MODELS #>  #> model \t converged \t npar \t loglik \t aic  #>  Hill m3- \t 1 \t 4 \t 5.9 \t -3.8 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 25  #>   #>  Hill m5- \t 1 \t 5 \t 6.39 \t -2.78 #>  -------------------------------------------------------  #> selected model: Hill m3-   #>  #>  estimate for  var- :  0.03581  #>   estimate for  a- :  2.088e-07  #>   estimate for  CED- :  3.964  #>   estimate for  d- :  0.7428  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  3.964  #>  2.59  #>  5.72  #>  #> Vyans is greater than 1 #>  #>  #> response:  mf_max  #> ANALYSIS WITH INVERSE EXPONENTIAL MODELS #> model \t converged \t npar \t loglik \t aic  #>  Inv.Expon. m3- \t 1 \t 4 \t 6.28 \t -4.56 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 52  #>   #>  Inv.Expon. m5- \t 1 \t 5 \t 6.39 \t -2.78 #>  -------------------------------------------------------  #> selected model: Inv.Expon. m3-   #>  #>  estimate for  var- :  0.0347  #>   estimate for  a- :  2.097e-07  #>   estimate for  CED- :  5.297  #>   estimate for  d- :  0.2234  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  5.297  #>  3.79  #>  7.09  #>  #> Vyans is greater than 1 #>  #>  #> response:  mf_max  #> ANALYSIS WITH LOGNORMAL DR MODELS #> model \t converged \t npar \t loglik \t aic  #>  LN m3- \t 1 \t 4 \t 6.13 \t -4.26 #> warning: lower constraint on parameter cc has been increased to 1.515  #> due to value of CES #> This might result in suboptimal fit of model 54  #>   #>  LN m5- \t 1 \t 5 \t 6.39 \t -2.78 #>  -------------------------------------------------------  #> selected model: LN m3-   #>  #>  estimate for  var- :  0.03512  #>   estimate for  a- :  2.093e-07  #>   estimate for  CED- :  4.699  #>   estimate for  d- :  0.3327  #> ------------------------------------------------------  #>  #>   #> The Grubb outlier for this sample size is: 2.80155  #>   #> No outliers detected  #>  #>  #>  calculating confidence intervals .... #>  #>  #>  #> the CED (in orig. units) and the 90 % confidence interval is:  #>  4.699  #>  3.23  #>  6.49  #>  #> Vyans is greater than 1 #>  #>  #>  -----------  CES =  0.5  ---------------------------------  #>  #> Calculating confidence intervals by model averaging, this may make some time .... #>  #>  #>  The weights used in model averaging are: #>    model weight #> 1    EXP 0.2052 #> 2   HILL 0.2136 #> 3 INVEXP 0.3123 #> 4   LOGN 0.2688 #>  #> Start of MA bootstrap runs ... #> run   1  2  3  4  5 #>  #> duration of bootstrap calculations: #> [1] \"Fri Jun 27 16:05:20 2025\" #> [1] \"Fri Jun 27 16:05:22 2025\" #>  #> The model-average BMD confidence interval is: #>   subgroup BMDlower.ma BMDupper.ma #> 1      all        3.62        5.27 #>  #> Vyans is greater than 1 #>  #>  #> end of analysis for response:  mf_max #> calculations started at: Fri Jun 27 16:05:19 2025 #> and ended at: Fri Jun 27 16:05:22 2025 #>  #> CED-CI plot created for subgroup 1  #> mf_max Expon. m3- #> Expon. m3- #> Covariate analysis is:FALSE #> mf_max Inv.Expon. m3- #> Inv.Expon. m3- #> Covariate analysis is:FALSE #> mf_min model_averaging #> Expon. m5- #> Covariate analysis is:FALSE #> Handling model averaging case #> mf_max model_averaging #> Expon. m3- #> Covariate analysis is:FALSE #> Handling model averaging case #> mf_min LN m5- #> LN m5- #> Covariate analysis is:FALSE #> mf_min Hill m5- #> Hill m5- #> Covariate analysis is:FALSE #> mf_min Expon. m5- #> Expon. m5- #> Covariate analysis is:FALSE #> mf_min Inv.Expon. m3- #> Inv.Expon. m3- #> Covariate analysis is:FALSE #> mf_max Hill m3- #> Hill m3- #> Covariate analysis is:FALSE #> mf_max LN m3- #> LN m3- #> Covariate analysis is:FALSE #>     Selected.Model Response CES   CED CEDL CEDU    AIC Log.Likelihood #> 1       Expon. m3-   mf_max 0.5 3.889 2.52 5.64  -3.72           5.86 #> 2       Expon. m5-   mf_min 0.5  8.45 6.47 10.3 -18.46          14.23 #> 3         Hill m3-   mf_max 0.5 3.964 2.59 5.72   -3.8            5.9 #> 4         Hill m5-   mf_min 0.5  9.03 7.02 10.7 -18.46          14.23 #> 5   Inv.Expon. m3-   mf_max 0.5 5.297 3.79 7.09  -4.56           6.28 #> 6   Inv.Expon. m3-   mf_min 0.5 4.714  2.9 6.96 -10.18           9.09 #> 7           LN m3-   mf_max 0.5 4.699 3.23 6.49  -4.26           6.13 #> 8           LN m5-   mf_min 0.5 9.171 7.27 10.7 -18.46          14.23 #> 9  Model averaging   mf_max 0.5 4.132 3.62 5.27    N/A            N/A #> 10 Model averaging   mf_min 0.5 9.065 8.53 9.93    N/A            N/A #>                   Var                    a                 d weights #> 1  0.0359188170682989 2.08758674487124e-07  0.72685933019566  0.2052 #> 2   0.017888312831692 1.71849444527397e-07  5.61135528663567  0.3316 #> 3  0.0358107048621412 2.08801824385781e-07  0.74281951927805  0.2136 #> 4  0.0178883278572467 1.71849441477975e-07  6.23608032503139  0.3316 #> 5  0.0346988571383357 2.09684109313555e-07 0.223422878105871  0.3123 #> 6  0.0274547356721535 1.70137658821088e-07 0.163165375364757  0.0053 #> 7  0.0351210340885015 2.09302236085566e-07 0.332670952338668  0.2688 #> 8  0.0178883115661859 1.71849497597811e-07  5.95609683921669  0.3316 #> 9                 N/A                  N/A               N/A      NA #> 10                N/A                  N/A               N/A      NA # Plot the Model Averaging 90% CI using plot_ci() plot_df <- bmd %>%  dplyr::filter(Model == \"Model averaging\") %>%  dplyr::select(Response, BMD, BMDL, BMDU) plot <- plot_ci(plot_df, order = \"asc\", log_scale = FALSE)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_toxicr.html","id":null,"dir":"Reference","previous_headings":"","what":"BMD modeling using ToxicR — bmd_toxicr","title":"BMD modeling using ToxicR — bmd_toxicr","text":"Calculate benchmark dose (BMD) continuous dose-response data optional model averaging. function intended model dose-response mutation frequency using ToxicR software.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_toxicr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BMD modeling using ToxicR — bmd_toxicr","text":"","code":"bmd_toxicr(   mf_data,   data_type = \"individual\",   dose_col = \"dose\",   response_col = c(\"mf_min\", \"mf_max\"),   sd_col = NULL,   n_col = NULL,   bmr_type = \"rel\",   bmr = 0.5,   model = \"exp-aerts\",   alpha = 0.05,   model_averaging = TRUE,   plot_results = FALSE,   ma_summary = FALSE,   output_path = NULL,   ... )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_toxicr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BMD modeling using ToxicR — bmd_toxicr","text":"mf_data data frame containing dose-response data. Data may individual sample averaged dose groups. Required columns individual data column containing dose dose_col column(s) containing mutation frequency data response_col(s). Summary data must include dose_col, response_col(s) containing mean response dose group, sd_col containing standard deviation response data, n_col containing sample size dose group. data_type string specifying type response data. Data may response per individual summarised across dose groups. Options (\"individual\", \"summary\"). Default \"individual\". dose_col column mf_data containing dose data. Values must numeric. Default \"dose\". response_col column(s) mf_data containing mutation frequency data. summarised data types, mean response dose group. Multiple response_cols can provided. sd_col column mf_data containing standard deviation summarised response data. required data_type = \"summary\". multiple response columns provided, multiple sd_cols provided order. Default NULL. n_col column mf_data containing sample size dose group. required data_type = \"summary\". multiple response columns provided, multiple n_cols provided order. Default NULL. bmr_type type benchmark response. Options : \"rel\", \"sd\", \"hybrid\", \"abs\". Default \"rel\". See details information. bmr numeric value specifying benchmark response. bmr defined relation calculation requested bmr_type. Default 0.5. model model type use. Options \"\" vector model types. Default \"exp-aerts\", Exponential model. See details available models. Note model averaging use pre-defined model set. See details information. alpha specified nominal coverage rate computation lower upper confidence intervals benchmark dose (BMDL, BMDU). confidence level calculated \\(100\\times(1-2\\alpha)\\% \\). default 0.05 (90% CI). model_averaging logical value indicating whether use model averaging. Default TRUE (recommended). plot_results logical value indicating whether plot BMD models /Cleveland plots. Default FALSE. TRUE, function save plots output_path return list alongside summary results. ma_summary logical value indicating whether return summary model averaging results. Default FALSE. output_path file path indicating save plots. NULL, plots automatically returned list alongside bmd results. ... Additional arguments passed model fitting function. information, see single_continuous_fit ma_continuous_fit model averaging.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_toxicr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BMD modeling using ToxicR — bmd_toxicr","text":"model_averaging = FALSE, function returns data frame BMD values \\(100\\times(1-2\\alpha)\\% \\) confidence intervals (BMDL, BMDU)response column model listed. AIC value calculated model compare fits. AIC calculated maximum likelihood + 2 * degrees freedom. model_averaging = TRUE, function returns data frame BMD values \\(100\\times(1-2\\alpha)\\% \\) confidence intervals (BMDL, BMDU) response column calculated using model averaging. ma_summary = TRUE, function return posterior probabilities used model averaging. plot_results = TRUE, function plot fited models model averaged model data. mode averaging, function also make Cleveland plot, saved  output_path. , BMDs plotted model set alongside model averaged BMD. BMD represented red dot. size dot scaled model probability Model Average value 100%. BMDL BMDU expressed interval bars. Plots may automatically exported output_path. Alternatively, output_path = NULL, function return list includes summary (data frame contianing BMD results), generated plots.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_toxicr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"BMD modeling using ToxicR — bmd_toxicr","text":"Available model types single model fitting : \"exp-aerts\": \\(f(x) = (1 + (c-1)(1-\\exp(-bx^{d}))) \\) \"invexp-aerts\": \\(f(x) = (1 + (c-1)(\\exp(-bx^{-d})))\\) \"gamma-aerts\": \\(f(x) = (1 + (c-1)(Gamma(bx^d;xi)))\\) \"invgamma-aerts\": \\(f(x) = (1 + (c-1)(1-Gamma(bx^{-d};xi)))\\) \"hill-aerts\": \\(f(x) = (1 + (c-1)(1-\\frac{b^d}{b^d + x^d}))\\) \"lomax-aerts\": \\(f(x) = \\left\\{1 + (c-1)(1-\\left(\\frac{b}{b+x^d} \\right)^\\xi) \\right\\}\\) \"invlomax-aerts\": \\(f(x) = \\left\\{1 + (c-1)(\\left(\\frac{b}{b+x^{-d}} \\right))^\\xi \\right\\}\\) \"lognormal-aerts\": \\(f(x) = \\left\\{1 + (c-1)\\left(\\Phi( \\ln(b) + d\\times \\ln(x))\\right) \\right\\}\\) \"logskew-aerts\": \\(f(x) = \\left\\{1 + (c-1)\\left(\\Phi_{SN}( \\ln(b) + d\\times \\ln(x); \\xi )\\right) \\right\\}\\) \"invlogskew-aerts\": \\(f(x) = \\left\\{1 + (c-1)\\left(1 - \\Phi_{SN}( \\ln(b) - d\\times \\ln(x); \\xi )\\right) \\right\\}\\) \"logistic-aerts\": \\(f(x) = \\frac{c}{1 + \\exp(-- b\\times x^d)} \\) \"probit-aerts\": \\(f(x) = c\\left(\\Phi(+ b\\times x^d)\\right) \\) \"LMS\": \\(f(x) = (1 + (c-1)(1 - \\exp(-bx - dx^2)))\\) \"gamma-efsa\": \\(f(x) = (1 + (c-1)(Gamma(bx; d)))\\) : \\(\\Phi(\\cdot)\\) standard normal distribution \\(\\Phi_{SN}(\\cdot;\\cdot)\\) skew-normal distribution. See single_continuous_fit details. Model averaging done model set described European Food Safety Authority's (2022) Guidance use benchmark dose approach risk assessment. models (normal lognormal model): exp-aerts, invexp-aerts, hill-aerts, lognormal-aerts, gamma-efsa, LMS, probit-aerts, logistic-aerts. See ma_continuous_fit details. BMR types continuous models: Relative deviation (default; bmr_type = \"rel\"). defines BMD dose changes control mean/median certain percentage background dose. dose solves \\(\\mid f(dose) - f(0) \\mid = (1 \\pm BMR) f(0)\\) Standard deviation (bmr_type = \"sd\"). defines BMD dose associated mean/median changing specified number standard deviations mean control dose. dose solves \\(\\mid f(dose)-f(0) \\mid = BMR \\times \\sigma\\) Absolute deviation (bmr_type=\"abs\"). defines BMD absolute change control dose zero specified amount. BMD dose solves equation \\(\\mid f(dose) - f(0) \\mid = BMR\\). Hybrid deviation (bmr_type = \"hybrid\"). defines BMD changes probability adverse event stated amount relative exposure (.e 0).  , dose solves \\(\\frac{Pr(X > x| dose) - Pr(X >x|0)}{Pr(X < x|0)} = BMR\\). definition, \\(Pr(X < x|0) = 1 - Pr(X > X|0) = \\pi_0\\), \\(0 \\leq \\pi_0 < 1\\) defined user \"point_p,\" defaults 0.01.  Note: discussion assumed increasing data. fitter determines direction data inverts probability statements decreasing data.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/bmd_toxicr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BMD modeling using ToxicR — bmd_toxicr","text":"","code":"if (requireNamespace(\"ToxicR\", quietly = TRUE)) {   # Calculate the BMD for a 50% increase in mutation frequency from control   # Individual data with Model averaging.   example_file <- system.file(\"extdata\", \"Example_files\",                               \"example_mutation_data_filtered.rds\",                               package = \"MutSeqR\")   example_data <- readRDS(example_file)   mf <- calculate_mf(example_data, retain_metadata_cols = \"dose\")   bmd <- bmd_toxicr(mf_data = mf,                     dose_col = \"dose\",                     response_col = c(\"mf_min\", \"mf_max\"))   # Plot the results using plot_ci()   plot <- plot_ci(bmd, order = \"asc\", log_scale = FALSE)    # Summary data with Model averaging.   mf_sum <- mf %>%     dplyr::group_by(dose) %>%     dplyr::summarise(mean_mf_min = mean(mf_min),                      sd_min = sd(mf_min),                      n_min = dplyr::n(),                      mean_mf_max = mean(mf_max),                      sd_max = sd(mf_max),                      n_max = dplyr::n())   bmd <- bmd_toxicr(mf_data = mf_sum,                     data_type = \"summary\",                     dose_col = \"dose\",                     response_col = c(\"mean_mf_min\", \"mean_mf_max\"),                     sd_col = c(\"sd_min\", \"sd_max\"),                     n_col = c(\"n_min\", \"n_max\")) } #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)`"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/calculate_mf.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mutation frequency — calculate_mf","title":"Calculate mutation frequency — calculate_mf","text":"Calculates mutation frequencies arbitrary groupings creates new dataframe results. Mutation frequency calculated dividing sum mutations sum total_depth given group (mutations/bp). operation run using minimum maximum independent mutation counting methods.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/calculate_mf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mutation frequency — calculate_mf","text":"","code":"calculate_mf(   mutation_data,   cols_to_group = \"sample\",   subtype_resolution = \"none\",   variant_types = c(\"snv\", \"deletion\", \"insertion\", \"complex\", \"mnv\", \"sv\", \"ambiguous\",     \"uncategorized\"),   calculate_depth = TRUE,   correct_depth = TRUE,   correct_depth_by_indel_priority = FALSE,   precalc_depth_data = NULL,   d_sep = \"\\t\",   summary = TRUE,   retain_metadata_cols = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/calculate_mf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mutation frequency — calculate_mf","text":"mutation_data data frame (GRanges) processed containing mutation data. Required columns listed details. cols_to_group vector grouping variables. groups interest want calculate frequency . instance, getting frequency \"sample\". options might include experimental group Ex. \"dose\" locus Ex. c(\"sample\", \"locus\"). listed variables must column mutation_data. include mutation subtype columns field. Please refer subtype_resolution group subtype calculation differ. subtype_resolution degree resolve mutation subtypes calculating frequencies. Mutation frequency calculated across col_to_groups mutation subtype given desired resolution. Subtype proportions also calculated. Options \"none\", \"type\", \"base_6\", \"base_12\", \"base_96\", \"base_192\". See details definitions. variant_types Use parameter choose variation types include mutation counts. Provide character vector variation types want include. Alternatively, provide character vector variation types want exclude preceded \"-\". Options : \"snv\", \"complex\", \"deletion\", \"insertion\", \"mnv\", \"sv\", \"ambiguous\", \"uncategorized\". Ex. inclusion: \"snv\", exclusion: \"-snv\". Default includes variants. calculate_depth = TRUE: Regardless whether variant included mutation counts, total_depth position counted. calculate_depth logical variable, whether calculate per-group total_depth mutation data. set TRUE, mutation data must contain total_depth value every sequenced base (including variants -variant calls). set FALSE, pre-calculated per-group total_depth values may supplied desired subtype_resolution using precalc_depth_data parameter. Alternatively, per-group total_depth available, per-group mutation counts calculated, mutation frequency . cases, mutation subtype proportions normalized total_depth. correct_depth logical value. TRUE, function correct total_depth column mutation_data order prevent double-counting total_depth values genomic position. rows sample, contig, start values, total_depth retained one row. rows group total_depth set 0. default TRUE. correct_depth_by_indel_priority logical value. TRUE, depth correction, different total_depth values within group rows sample, contig, start values, total_depth value row highest priority variation_type retained, rows total_depth set 0. variation_type priority order : deletion, complex, insertion, snv, mnv, sv, uncategorised, ambiguous, no_variant. FALSE, total_depth value first row group retained, rows total_depth set 0. default FALSE. precalc_depth_data data frame file path text file containing pre-calculated per-group total_depth values. data frame contain columns desired grouping variable(s) reference context desired subtype resolution (applicable). precalculated total_depth column(s) called one group_depth subtype_depth. group_depth used subtype resolutions \"none\", \"type\", non-snv mutations \"base_6\", \"base_12\", \"base_96\", \"base_192\". subtype_depth used snv mutations \"base_6\", \"base_12\", \"base_96\", \"base_192\". can access list context values subtype resolution using MutSeqR::context_list$your_subtype_resolution. d_sep delimiter used precalc_depth_data, applicable. Default tab-delimited. summary logical variable, whether return summary table (.e., relevant columns frequencies groupings returned). Setting false returns columns original mutation_data, might make plotting difficult, may provide additional flexibility power users. retain_metadata_cols character vector contains names metadata columns like retain summary table. may useful plotting summary data. Ex. retain \"dose\" column summarising \"sample\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/calculate_mf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate mutation frequency — calculate_mf","text":"data frame mutation frequency calculated. summary set TRUE, data frame summary table mutation frequency calculated group. summary set FALSE, mutation frequency appended row original mutation_data. sum_min: sum mutations within group, calculated using \"min\" method mutation counting. identical mutations within samples assumed result clonal expansion thus counted . sum_max: sum mutations within group, calculated using \"max\" method mutaiton counting. identical mutations within sample assumed idenpendant mutational evens included mutation frequency calculation. group_depth: total_depth summed across groups. subtype_depth: total_depth summed across groups given sequence context. Used calculating subtype frequencies. mf_min: mutation frequency calculated using \"min\" method mutation counting. mf_min = sum_min / depth. mf_max: mutation frequency calculated using \"max\" method mutation counting. mf_max = sum_max / depth. proportion_min: proportion mutation subtype within group, normalized depth. Calculated using \"min\" method. calculated subtype_resolution \"none\". depth calculated provided, proportion calculated without normalization depth. proportion_max: proportion mutation subtype within group, normalized read depth. Calculated using \"max\" method. calculated subtype_resolution \"none\". depth calculated provided, proportion calculated without normalization depth.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/calculate_mf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate mutation frequency — calculate_mf","text":"Required columns: contig: (seqnames) reference sequence name. start: 1-based start position feature. alt_depth: read depth supporting alternate allele. variation_type: category variant assigned. subtype_col: column containing mutation subtype. column depends subtype_resolution parameter. reference context: column containing referene base(s) mutation. column depends subtype_resolution parameter. cols group: columns across want calculate mutation frequency. Ex. c(\"tissue\", \"dose\"). columns listed cols_to_group. also required include total_depth column calculating depth mutation data. using precalculated depth data, total_depth column required. Subtype Resolutions: \"none\" calculates mutation frequencies across selected grouping columns. \"type\" calculates mutation frequencies across selected grouping columns variation_type seperately; snv, mnv, deletion, insertion, complex, sv, ambiguous, uncategorized. \"base_6\" calculates mutation frequencies across selected grouping columns variation_type snv mutations separated normalized_subtype; C>, C>G, C>T, T>, T>C, T>G. reference context normalized_ref. \"base_12\" calculates mutation frequencies across selected grouping columns variation_type snv mutations separated subtype; >C, >G, >T, C>, C>G, C>T, G>, G>C, G>T, T>, T>C, T>G. reference context short_ref. \"base_96\" calculates mutation frequencies across selected grouping columns variation_type snv mutations separated normalized_context_with_mutation, .e. 96-base trinucleotide context. Ex. [C>T]. reference context normalized_context. \"base_192\" calculates mutation frequencies across selected grouping columns variation_type snv mutations separated context_with_mutation, .e. 192-base trinucleotide context. Ex [G>]. reference context context. Subtype depth: SNV subtypes, total_depth summed based sequence context SNV subtype occurs. Ex. base_6, two possible reference bases C T; hence, total_depth summed seperately C:G positions T:positions. MF C>T mutations calculated total # C>T mutations / total_depth C>G positions (sum / subtype_depth). Non-SNV mutation types caluclated sum / group_depth, since can occur context nucleotide. retain_metadata_cols subtype_resolution: summary table uses pre-defined list possible subtypes resolution. particular subtype within given group recorded mutation data, summary table frame reference populating metadata_cols. Thus, subtypes occur mutation data given group, corresponding metadata_col NA. Variant filtering: Variants flagged TRUE filter_mut column excluded mutation counts. However, total_depth variants included group/subtype depths calculating depth. Depth correction important preventing double-counting reads mutation data summing total_depth across samples groups. Generally, several mutations detected genomic position, within sample, total_depth value . However, datasets, whenever deletion detected, data may contain additional row genomic position calling \"no_variant\". total_depth differ deletion no_variant. cases, correct_depth_by_indel_priority == TRUE ensure total_depth value deletion retained, total_depth value no_variant removed.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/calculate_mf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mutation frequency — calculate_mf","text":"","code":"# Load example data example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file)   # Example 1 Calculate mutation frequency by sample. # Calculate depth from the mutation data (default) # Correct the Depth (default) with indel priority (set) mf_example <- calculate_mf(  mutation_data = example_data,  cols_to_group = \"sample\",  correct_depth_by_indel_priority = TRUE ) #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)`   # Example 2: Calculate the trinucleotide mutation proportions for each dose # Calculate and correct depth to indep priority. mf_96_example <- calculate_mf(  mutation_data = example_data,  cols_to_group = \"dose\",  subtype_resolution = \"base_96\",  variant_types  = \"snv\",  correct_depth_by_indel_priority = TRUE ) #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(dose, normalized_context)`   # Example 3: Calculate the mean mutation frequency for each 6 base subtype # per dose # calculate_mf does not calculate mean mutation frequency for # groups; this function only sums mutations across groups. Thus, if you are # interested in calculating the mean of a group, this must be done # separately. # First, calculate 6 base MF per sample. Retain the dose column. mf_6_example <- calculate_mf(  mutation_data = example_data,  cols_to_group = \"sample\",  subtype_resolution = \"base_6\",  retain_metadata_cols = \"dose\",  correct_depth_by_indel_priority = TRUE ) #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(normalized_subtype, sample)` #> Joining with `by = join_by(sample, normalized_ref)` # Note: our example_data does not contain any ambiguous # or uncategorized mutations, so the dose column is NA for all those # mutations in the summary table. This will not affect our mean calculation.  # Calculate the mean MF for each 6 base subtype per dose mf_6_mean_example <- mf_6_example %>%  dplyr::group_by(dose, normalized_subtype) %>%  dplyr::summarise(mean_mf_min = mean(mf_min),                   se_mf_min = sd(mf_min) / sqrt(dplyr::n()),                   mean_mf_max = mean(mf_max),                   se_mf_max = sd(mf_max) / sqrt(dplyr::n())) #> `summarise()` has grouped output by 'dose'. You can override using the #> `.groups` argument.   # Example 4: Calculate MF using precalculated depth data sample_depth_example <- data.frame(  sample = c(  \"dna00973.1\", \"dna00974.1\", \"dna00975.1\", \"dna00976.1\", \"dna00977.1\",  \"dna00978.1\", \"dna00979.1\", \"dna00980.1\", \"dna00981.1\", \"dna00982.1\",  \"dna00983.1\", \"dna00984.1\", \"dna00985.1\", \"dna00986.1\", \"dna00987.1\",  \"dna00988.1\", \"dna00989.1\", \"dna00990.1\", \"dna00991.1\", \"dna00992.1\",  \"dna00993.1\", \"dna00994.1\", \"dna00995.1\", \"dna00996.1\"  ),  group_depth = c(    565395266, 755574283, 639909215, 675090988, 598104021,    611295330, 648531765, 713240735, 669734626, 684951248,    716913381, 692323218, 297661400, 172863681, 672259724,    740901132, 558051386, 733727643, 703349287, 884821671,    743311822, 799605045, 677693752, 701163532  ) ) mf_example_precalc <- calculate_mf(  mutation_data = example_data,  cols_to_group = \"sample\",  calculate_depth = FALSE,  precalc_depth_data = sample_depth_example ) #> Joining with `by = join_by(sample)`   # Example 5: Calculate MF using precalculated depth data for 6 base # mutation subtypes per sample. # The base_6 resolution uses reference context 'normalized_ref'; C or T. # Our precalc_depth_data needs group_depth (depth per sample) and the # subtype_depth (depth per sample AND per normalized_ref) # We will create the example precalc_depth data for the base_6 resolution # from Example 3 results for simplicity. sample_subtype_depth_example <- mf_6_example %>%  dplyr::select(sample, normalized_ref, group_depth, subtype_depth) %>%  unique() %>% dplyr::filter(normalized_ref != \"N\") mf_6_example_precalc <- calculate_mf(  mutation_data = example_data,  cols_to_group = \"sample\",  subtype_resolution = \"base_6\",  calculate_depth = FALSE,  precalc_depth_data = sample_subtype_depth_example ) #> Joining with `by = join_by(sample, normalized_ref)`"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/check_required_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all required columns are present before proceeding with the function — check_required_columns","title":"Check that all required columns are present before proceeding with the function — check_required_columns","text":"utility function check required columns present.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/check_required_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all required columns are present before proceeding with the function — check_required_columns","text":"","code":"check_required_columns(data, required_columns)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/check_required_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all required columns are present before proceeding with the function — check_required_columns","text":"data mutation data required_columns list required column names.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/check_required_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all required columns are present before proceeding with the function — check_required_columns","text":"error","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/classify_variation.html","id":null,"dir":"Reference","previous_headings":"","what":"classify_variation — classify_variation","title":"classify_variation — classify_variation","text":"Classify variation type mutation based ref alt values.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/classify_variation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"classify_variation — classify_variation","text":"","code":"classify_variation(ref, alt)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/classify_variation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"classify_variation — classify_variation","text":"ref reference allele. alt alternate allele.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/classify_variation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"classify_variation — classify_variation","text":"character indicating type variation.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cleveland_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleveland Plot — cleveland_plot","title":"Cleveland Plot — cleveland_plot","text":"Make Cleveland plot PROAST results. Matches ToxicR.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cleveland_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleveland Plot — cleveland_plot","text":"","code":"cleveland_plot(results, covariate_col = NULL, output_path = NULL)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cleveland_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleveland Plot — cleveland_plot","text":"results PROAST results object. covariate_col Covariate column name. output_path Output path plot. output_path exist, created. NULL, plots exported.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cleveland_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleveland Plot — cleveland_plot","text":"list ggplot objects response results.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cluster_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Clustering — cluster_spectra","title":"Hierarchical Clustering — cluster_spectra","text":"perform hierarchical clustering samples based mutation spectra.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cluster_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Clustering — cluster_spectra","text":"","code":"cluster_spectra(   mf_data = mf_data,   group_col = \"sample\",   response_col = \"proportion_min\",   subtype_col = \"normalized_subtype\",   dist = \"cosine\",   cluster_method = \"ward.D\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cluster_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Clustering — cluster_spectra","text":"mf_data data frame containing mutation data. data must include column containing mutation subtypes, column containing sample/cohort names, column containing response variable. group_col name column data contains sample/cohort names. response_col name column data contains response variable. Typical response variables can subtype mf, proportion, count. subtype_col name column data contains mutation subtypes. dist distance measure used. must one \"cosine\", \"euclidean\", \"maximum\", \"manhattan\",\"canberra\", \"binary\" \"minkowski\". See dist details. cluster_method agglomeration method used. See hclust details.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cluster_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Clustering — cluster_spectra","text":"dendrogram object representing hierarchical clustering samples.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/cluster_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical Clustering — cluster_spectra","text":"cosine distance measure represents inverted cosine similarity samples: \\(\\text{Cosine Dissimilarity} = 1 - \\frac{\\mathbf{} \\cdot \\mathbf{B}}{\\| \\mathbf{} \\| \\cdot \\| \\mathbf{B} \\|}\\) equation calculates cosine dissimilarity two vectors B. Leaves sorted using dendsort, installed, otherwise leaves unsorted.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/context_list.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of reference contexts at different resolutions — context_list","title":"A list of reference contexts at different resolutions — context_list","text":"list reference contexts different resolutions","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/context_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of reference contexts at different resolutions — context_list","text":"","code":"context_list"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/context_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of reference contexts at different resolutions — context_list","text":"list corresponding values","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/denominator_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Values used for denominators in frequency calculations — denominator_dict","title":"Values used for denominators in frequency calculations — denominator_dict","text":"values used cross reference base substitution types appropriate denominators calculations. \", \"example, 6 base substitution frequency subsetted based normalized_ref column contain T C (.e., pyrimidine context base substitutions).","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/denominator_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Values used for denominators in frequency calculations — denominator_dict","text":"","code":"denominator_dict"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/denominator_dict.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Values used for denominators in frequency calculations — denominator_dict","text":"vector corresponding values","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.gui.html","id":null,"dir":"Reference","previous_headings":"","what":"Manages plotting for PROAST — f.plot.gui","title":"Manages plotting for PROAST — f.plot.gui","text":"Runs plotting functions depending data type plot type.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manages plotting for PROAST — f.plot.gui","text":"","code":"f.plot.gui(   ans.all,   HTML = FALSE,   model.summ = TRUE,   display_plots = TRUE,   .proast_env = NULL,   output_type = NULL,   filename = NULL,   interactive_mode = TRUE,   record_plots = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.gui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manages plotting for PROAST — f.plot.gui","text":"ans.proast object gets passed functions. HTML Keep FALSE model.summ Keep TRUE display_plots logical variable - whether want display plots . .proast_env environment output_type format wish export plots . filename name file read. interactive_mode TRUE/FALSE value specifying whether want run interactively (.e., TRUE, default) using command-line mode (.e., FALSE, non-interactive). FALSE, must provide parameters. record_plots logical variable indicating whether want record plots return list instead exporting . parameter used running function indenpently within f.plot.result. disrupt f.proast(), keep default FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.result.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the PROAST results — f.plot.result","title":"Plot the PROAST results — f.plot.result","text":"Independently generate model plots raw results.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the PROAST results — f.plot.result","text":"","code":"f.plot.result(   proast_results_list,   output_path = NULL,   output_type = \"svg\",   prefix = NULL,   model_averaging = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the PROAST results — f.plot.result","text":"proast_results_list raw results list. output f.proast output_path file path output directory. output_path NULL, save working directory. output_path exist, created. output_type file type export plots. Options 'svg', 'jpeg', 'pdf', 'png', 'tiff', 'none'. \"none\", plots displayed graphics window, recorded recordPlot(), returned list. prefix custom prefix append file names. Default \"PROAST_\". model_averaging logical variable indicating whether want generate model averaging figure  (TRUE) plots individual models (FALSE). plot one , .  Plotting model averaging figure require function re-run bootstrapping might take . may think seems rather inefficient. Well, , tired fix , just deal now.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.plot.result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the PROAST results — f.plot.result","text":"Generates plots. Either saves output path records returns list.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.proast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run dose-response modeling using PROAST. — f.proast","title":"Run dose-response modeling using PROAST. — f.proast","text":"Run dose-response modeling using PROAST.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.proast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run dose-response modeling using PROAST. — f.proast","text":"","code":"f.proast(   odt = list(),   ans.all = 0,   er = FALSE,   resize = FALSE,   scale.ans = FALSE,   const.var = FALSE,   show.warnings = FALSE,   interactive_mode = TRUE,   datatype = NULL,   model_choice = NULL,   setting_choice = NULL,   nested_model_choice = NULL,   indep_var_choice = NULL,   Vyans_input = NULL,   covariates = NULL,   custom_CES = 0.05,   model_selection = NULL,   lower_dd = NULL,   upper_dd = NULL,   selected_model = NULL,   adjust_CES_to_group_SD = NULL,   model_averaging = NULL,   num_bootstraps = NULL,   display_plots = TRUE,   add_nonzero_val_to_dat = FALSE,   nonzero_val = NULL,   detection_limit = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.proast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run dose-response modeling using PROAST. — f.proast","text":"odt List. Internal state object/list passed PROAST functions. Usually, users need set . ans.Output previous fit, internal results object. Used resume adjust analyses. Usually 0 (default) start new session. er Logical. TRUE, attempt resume analysis previously stored state. Used internally/recoverably. Defaults FALSE. resize Logical. TRUE, resize graphics window execution; passed graphics helper functions. Defaults FALSE. scale.ans Logical. TRUE, applies scaling answers/results (advanced use ). Defaults FALSE. const.var Logical. TRUE, constrains variance model fitting (advanced option troubleshooting). Defaults FALSE. show.warnings Logical. TRUE, print extra warning messages model fitting (debugging detailed output). Defaults FALSE. interactive_mode TRUE/FALSE value specifying whether want run interactively (.e., TRUE, default) using command-line mode (.e., FALSE, non-interactive). FALSE, must provide parameters. datatype Non-interactive mode parameter. type response data want consider? Options 'continuous, individual data'. model_choice Non-interactive mode parameter. want fit single model fit various nested families models? Options 'single model', 'select model 3 5 various families models', 'select model 3 various nested families models', 'select model 5 various nested families models', 'select model 15 terms RPF'. Recommended: 'select model 3 5 various families models'. setting_choice Non-interactive mode parameter. want fit set models, choose single model? Options 'single model', 'set models'. Recommended: 'set models'. nested_model_choice Non-interactive mode parameter. subset nested models fit, changing model settings non-interactively. Options match provided interactive menus. See details documentation. indep_var_choice Non-interactive mode parameter. column name independent variable use. Vyans_input Non-interactive mode parameter. column name(s) response variable(s) use. multiple, provide vector. covariates Non-interactive mode parameter. column name covariate use. none, enter 0. custom_CES Non-interactive mode parameter. critical effect size (BMR) use, adjust_CES_to_group_SD = 1 (FALSE). model_selection Non-interactive mode parameter. model selection use. Options \"Exponential model \", \"Exponential Hill model\", \"previous option inverse exponential model added\" (run Expon, Hill, Inv-Expon), \"previous option lognormal DR model added\" (run Expon, Hill, Inv-Expon, LN). Recommended: \"previous option lognormal DR model added\". lower_dd Non-interactive mode parameter. lower constraint d parameter. NULL, existing defaults used. upper_dd Non-interactive mode parameter. upper constraint d parameter. NULL, existing defaults used. selected_model Non-interactive mode parameter. model want continue ? Options \"exponential\", \"Hill\", \"inverse exponential\", \"lognormal DR\". Thefunction output results models regardless choice. Really just bypass menu option. Recommended: \"exponential\". adjust_CES_to_group_SD Non-interactive mode parameter. Set BMR group standard deviation. Options 1 (FALSE) 2 (TRUE). model_averaging Non-interactive mode parameter. Whether perform model averaging calculate 90% confidence intervals. TRUE/FALSE. num_bootstraps Non-interactive mode parameter. number bootstraps perform model averaging. Recommended: 200. display_plots Non-interactive mode parameter. Whether display plots. TRUE/FALSE. add_nonzero_val_to_dat Non-interactive mode parameter. response data contains 0s, whether add non-zero value observation. TRUE/FALSE. TRUE, set nonzero_val parameter desired (positive) number. FALSE, detection limit used. Provide detection limit detection_limit parameter. detection_limit given, function use minimum non-zero value data. Values detection limit plotted half detection limit. nonzero_val Non-interactive mode parameter. non-zero value add observation add_nonzero_val_to_dat = TRUE. Must positive number. detection_limit Non-interactive mode parameter. detection limit use add_nonzero_val_to_dat = FALSE. NULL, minimum non-zero value data used. paramater accepts numeric value, applied response values, column name data, used apply different detection limits different observations.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/f.proast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run dose-response modeling using PROAST. — f.proast","text":"Results PROAST.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/filter_mut.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter your mutation data — filter_mut","title":"Filter your mutation data — filter_mut","text":"function creates filter_mut`` column read \\code{calculate_mf} function downstream functions. Variants filter_mut == TRUE“ excluded group mutation counts. function may also remove records upon user specification. Running function data overide previous filters. reset previous filters, set filter_mut column values FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/filter_mut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter your mutation data — filter_mut","text":"","code":"filter_mut(   mutation_data,   vaf_cutoff = 1,   snv_in_germ_mnv = FALSE,   rm_abnormal_vaf = FALSE,   custom_filter_col = NULL,   custom_filter_val = NULL,   custom_filter_rm = FALSE,   regions = NULL,   regions_filter,   allow_half_overlap = FALSE,   rg_sep = \"\\t\",   is_0_based_rg = TRUE,   rm_filtered_mut_from_depth = FALSE,   return_filtered_rows = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/filter_mut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter your mutation data — filter_mut","text":"mutation_data mutation data. can data frame GRanges object. vaf_cutoff Filter ostensibly germline variants using cutoff variant allele fraction (VAF). variant vaf larger cutoff filtered. default 1 (filtering). recommended use value 0.01 (.e. 1%) conservative approach retain somatic variants. snv_in_germ_mnv Filter snv variants overlap germline mnv variants within samples. mnv variants considered germline vaf > vaf_cutoff. Default FALSE. rm_abnormal_vaf logical value. TRUE, rows mutation_data variant allele fraction (VAF) 0.05 0.45 0.55 0.95 removed. expect variants VAF ~0. 0.5, 1, reflecting rare somatic mutations, heterozygous germline mutations, homozygous germline mutations, respectively. Default FALSE. custom_filter_col name column mutation_data apply custom filter . column checked specific values, defined custom_filter_val. row column contains one specified values, row either flagged filter_mut column , specified custom_filter_rm, removed mutation_data. custom_filter_val set values used filter rows mutation_data based custom_filter_col. row custom_filter_col matches value custom_filter_val, either set TRUE filter_mut column removed, depending custom_filter_rm. custom_filter_rm logical value. TRUE, rows custom_filter_col match value custom_filter_val removed mutation_data. FALSE, filter_mut set TRUE rows. regions Remove rows within/outside specified regions. regions can either file path, data frame, GRanges object containing genomic ranges filter. File paths read using rg_sep. Users can also choose built-TwinStrand's Mutagenesis Panels inputting \"TSpanel_human\",  \"TSpanel_mouse\", \"TSpanel_rat\". Required columns regions file \"contig\", \"start\", \"end\". GRanges object, required columns \"seqnames\", \"start\", \"end\". regions_filter Specifies provided regions applied mutation_data. Acceptable values \"remove_within\" \"keep_within\". set \"remove_within\", records fall within specified regions wil removed mutation_data. set \"keep_within\", records within specified regions kept mutation_data, records removed. allow_half_overlap logical value. TRUE, records start end regions, extend outside either direction included filter. FALSE, records start end within regions included filter. Default FALSE. rg_sep delimiter importing custom_regions. default tab-delimited \"\\t\". is_0_based_rg logical variable. Indicates whether position coordinates regions 0 based (TRUE) 1 based (FALSE). TRUE, positions converted 1-based (start + 1). Need supplied TSpanels. Default TRUE. rm_filtered_mut_from_depth logical value. TRUE, function subtract alt_depth records flagged filter_mut column total_depth. treat flagged variants -calls. apply variants flagged germline vaf_cutoff. However, germline variant additional filters applied, subtraction still occur. FALSE, alt_depth retained total_depth variants.  Default FALSE. return_filtered_rows logical value. TRUE, function return filtered mutation data records removed/flagged seperate data frame. two dataframes returned inside list, names mutation_data filtered_rows. Default FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/filter_mut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter your mutation data — filter_mut","text":"","code":"# Load example data example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) # Filter the data # Basic Usage: Filter out putative germline variants filter_example_1 <- filter_mut(mutation_data = example_data,                                vaf_cutoff = 0.01) #> Flagging germline mutations... #> Found 612 germline mutations. #> Filtering complete. # Remove rows outside of the TwinStand Mouse Mutagenesis Panel regions filter_example_2 <- filter_mut(mutation_data = example_data,                                vaf_cutoff = 0.01,                                regions = \"TSpanel_mouse\",                                regions_filter = \"keep_within\") #> Flagging germline mutations... #> Found 612 germline mutations. #> Applying region filter... #> Removed 22 rows based on regions. #> Filtering complete. # Apply a custom filter to flag rows with \"EndRepairFillInArtifact\" # in the column 'filter' filter_example_3 <- filter_mut(mutation_data = example_data,                                vaf_cutoff = 0.01,                                regions = \"TSpanel_mouse\",                                regions_filter = \"keep_within\",                                custom_filter_col = \"filter\",                                custom_filter_val = \"EndRepairFillInArtifact\",                                custom_filter_rm = FALSE) #> Flagging germline mutations... #> Found 612 germline mutations. #> Applying custom filter... #> Flagged 2021 rows with values in <filter> column that matched EndRepairFillInArtifact #> Applying region filter... #> Removed 22 rows based on regions. #> Filtering complete. # Flag snv variants that overlap with germline mnv variants. # Subtract the alt_depth of these variants from their total_depth # (treat them as No-calls). # Return all the flagged/removed rows in a seperate data frame filter_example_4 <- filter_mut(mutation_data = example_data,                                vaf_cutoff = 0.01,                                regions = \"TSpanel_mouse\",                                regions_filter = \"keep_within\",                                custom_filter_col = \"filter\",                                custom_filter_val = \"EndRepairFillInArtifact\",                                custom_filter_rm = FALSE,                                snv_in_germ_mnv = TRUE,                                rm_filtered_mut_from_depth = TRUE,                                return_filtered_rows = TRUE) #> Flagging germline mutations... #> Found 612 germline mutations. #> Flagging SNVs overlapping with germline MNVs... #> Found 20 SNVs overlapping with germline MNVs. #> Applying custom filter... #> Flagged 2021 rows with values in <filter> column that matched EndRepairFillInArtifact #> Applying region filter... #> Removed 22 rows based on regions. #> Removing filtered mutations from the total_depth... #> Filtering complete. #> Returning a list: mutation_data and filtered_rows. # Flagging germline mutations... # Found 612 germline mutations. # Flagging SNVs overlapping with germline MNVs... # Found 20 SNVs overlapping with germline MNVs. # Applying custom filter... # Flagged 2021 rows with values in <filter> column that matched EndRepairFillInArtifact # Applying region filter... # Removed 22 rows based on regions. # Correcting depth... # 909 rows had their total_depth corrected. # Removing filtered mutations from the total_depth... # Filtering complete. # Returning a list: mutation_data and filtered_rows. filtered_rows <- filter_example_4$filtered_rows filtered_example_mutation_data <- filter_example_4$mutation_data"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mutations at CpG sites. — get_cpg_mutations","title":"Get mutations at CpG sites. — get_cpg_mutations","text":"Needs reworked variants >1bp. Subset mutation data return mutations found positions specific motif. default CpG sites, can customizable.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mutations at CpG sites. — get_cpg_mutations","text":"","code":"get_cpg_mutations(   mutation_data,   regions,   variant_types = c(\"-no_variant\"),   motif = \"CG\",   filter_mut = TRUE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mutations at CpG sites. — get_cpg_mutations","text":"mutation_data dataframe GRanges object containing mutation data interrogated. supplying data frame, genomic coordinates must 1-based (true mutation data imported using import_mut_data import_vcf_data). regions GRanges object containing genomic regions interest look CpG sites. Must metadata column \"sequence\" populated raw nucleotide sequence search CpGs. object can obtained using get_seq.R function. variant_types Use parameter choose variation_types include output. Provide character vector variation _types want include. Options \"ambiguous\", \"complex\", \"deletion\", \"insertion\", \"mnv\", \"no_variant\", \"snv\", \"sv\", \"uncategorized\". Alternatively, provide character vector variation_types want exclude preceded \"-\". variation_types except excluded returned. Ex. inclusion: variant_types = \"snv\", return rows variation_type == \"snv\". Ex. exclusion: variant_types = \"-no_variant\" return rows, except variation_type == \"no_variant\" (default). motif Default \"CG\", returns CpG sites. theory use arbitrary string look different motifs. Use caution. filter_mut logical value indicating whether function exclude rows flagged filter_mut column output. Default TRUE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mutations at CpG sites. — get_cpg_mutations","text":"GRanges object range mutation CpG site (subset mutations larger object provided function).","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the coordinates of the CpG sites within your genomic regions — get_cpg_regions","title":"Get the coordinates of the CpG sites within your genomic regions — get_cpg_regions","text":"Filters ranges genomic regions find positions specific motif. default CpG sites, can customizable.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the coordinates of the CpG sites within your genomic regions — get_cpg_regions","text":"","code":"get_cpg_regions(regions, motif = \"CG\")"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the coordinates of the CpG sites within your genomic regions — get_cpg_regions","text":"regions GRanges object containing genomic regions interest  look CpG sites. Must metadata column \"sequence\" populated  raw nucleotide sequence search CpGs. object can obtained using get_seq() function. motif Default \"CG\", returns CpG sites. theory use arbitrary string look different motifs. Use caution.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_CpG_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the coordinates of the CpG sites within your genomic regions — get_cpg_regions","text":"GRanges object range CpG site (subset ranges larger object provided function).","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_binom_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Add binomial confidence intervals to mutation frequencies. — get_binom_ci","title":"Add binomial confidence intervals to mutation frequencies. — get_binom_ci","text":"Uses binomial distribution create confidence intervals mutation frequencies calculated single point estimate. Calculating binomial confidence intervals mutation frequencies part MutSeqR's recommended workflow, provided users wish use .","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_binom_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add binomial confidence intervals to mutation frequencies. — get_binom_ci","text":"","code":"get_binom_ci(   mf_data,   sum_col = \"sum_min\",   depth_col = \"group_depth\",   conf_level = 0.95,   method = \"wilson\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_binom_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add binomial confidence intervals to mutation frequencies. — get_binom_ci","text":"mf_data data frame containing mutation frequencies per sample. Obtained output calculate_mf. sum_col Column name specifies mutation count (e.g., sum_min) depth_col Column name specifies sequencing depth (e.g., total_depth) conf_level Confidence interval calculate, default 95% (0.95) method method used binom::binom.confint calculate intervals. Default \"wilson\" (recommended).","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_binom_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add binomial confidence intervals to mutation frequencies. — get_binom_ci","text":"mf data frame added columns indicating confidence intervals.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_binom_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add binomial confidence intervals to mutation frequencies. — get_binom_ci","text":"","code":"example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) mf <- calculate_mf(example_data) #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)` confint <- get_binom_ci(mf_data = mf,                         sum_col = \"sum_min\",                         depth_col = \"group_depth\")"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_ref_of_mut.html","id":null,"dir":"Reference","previous_headings":"","what":"A utility function that will return the reference context of a mutation — get_ref_of_mut","title":"A utility function that will return the reference context of a mutation — get_ref_of_mut","text":"utility function return reference context mutation","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_ref_of_mut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A utility function that will return the reference context of a mutation — get_ref_of_mut","text":"","code":"get_ref_of_mut(mut_string)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_ref_of_mut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A utility function that will return the reference context of a mutation — get_ref_of_mut","text":"mut_string mutation. Ex. T>C, [G>T]C","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get sequence of genomic target regions — get_seq","title":"Get sequence of genomic target regions — get_seq","text":"Create GRanges object genomic target ranges import raw nucleotide sequences.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get sequence of genomic target regions — get_seq","text":"","code":"get_seq(   regions,   rg_sep = \"\\t\",   is_0_based_rg = TRUE,   species = NULL,   genome = NULL,   masked = FALSE,   padding = 0,   ucsc = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get sequence of genomic target regions — get_seq","text":"regions regions metadata file import. Can either file path, data frame, GRanges object. File paths read using rg_sep. Users can also choose built-TwinStrand's Mutagenesis Panels inputting \"TSpanel_human\",  \"TSpanel_mouse\", \"TSpanel_rat\". Required columns regions file \"contig\", \"start\", \"end\". GRanges object, required columns \"seqnames\", \"start\", \"end\". rg_sep delimiter importing regions file. default tab-delimited (\"\\t\"). is_0_based_rg logical variable. Indicates whether position coordinates regions 0 based (TRUE) 1 based (FALSE). TRUE, positions converted 1-based (start + 1). Need supplied TSpanels. Default TRUE. species species retrieve sequences. Species may given scientific name common name. Ex. \"Human\", \"Homo sapien\". Used choose appropriate BS genome. Need supplied TSpanels. genome genome assembly version retrieve sequences. Used choose appropriate genome (BS genome UCSC). Ex. hg38, hg19, mm10, mm39, rn6, rn7. Need supplied TSpanels. masked logical value indicating whether use masked version BS genome retrieving sequences. Default FALSE. padding integer value function extend range target sequence sides. Start end coordinates adjusted accordingly. Default 0. ucsc logical value. TRUE, function retrieve sequences UCSC genome browser using API. FALSE, function retrieve sequences using appropriate BSgenome package, installed needed. Default FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get sequence of genomic target regions — get_seq","text":"GRanges object sequences targeted regions.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get sequence of genomic target regions — get_seq","text":"Consult available.genomes(splitNameParts=FALSE, type=getOption(\"pkgType\")) full list available BS genomes associated species/genome/masked values. BSgenome package installed already available. using UCSC API, function retrieve sequences UCSC genome browser using DAS API. See UCSC website available genomes: https://genome.ucsc.edu.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/get_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get sequence of genomic target regions — get_seq","text":"","code":"# Example 1: Retrieve the sequences for TwinStrand Mouse Mutagenesis Panel regions_seq <- get_seq(regions = \"TSpanel_mouse\") #> 'getOption(\"repos\")' replaces Bioconductor standard repositories, see #> 'help(\"repositories\", package = \"BiocManager\")' for details. #> Replacement repositories: #>     CRAN: https://cran.rstudio.com #> Reference genome already installed. #> Loading reference genome: BSgenome.Mmusculus.UCSC.mm10.  # Example 2: Retrieve the sequences for custom regions # We will load the TSpanel_human regions file as an example # and supply it to the function as a GRanges object. human <- load_regions_file(\"TSpanel_human\") regions_seq <- get_seq(regions = human,                        is_0_based_rg = FALSE,                        species = \"human\",                        genome = \"hg38\",                        masked = FALSE,                        padding = 0) #> 'getOption(\"repos\")' replaces Bioconductor standard repositories, see #> 'help(\"repositories\", package = \"BiocManager\")' for details. #> Replacement repositories: #>     CRAN: https://cran.rstudio.com #> Reference genome already installed. #> Loading reference genome: BSgenome.Hsapiens.UCSC.hg38."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_mut_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import tabular mutation data — import_mut_data","title":"Import tabular mutation data — import_mut_data","text":"Imports tabular mutation file local R environment.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_mut_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import tabular mutation data — import_mut_data","text":"","code":"import_mut_data(   mut_file,   mut_sep = \"\\t\",   is_0_based_mut = TRUE,   sample_data = NULL,   sd_sep = \"\\t\",   regions = NULL,   rg_sep = \"\\t\",   is_0_based_rg = TRUE,   padding = 0,   genome = NULL,   species = NULL,   masked_BS_genome = FALSE,   custom_column_names = NULL,   output_granges = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_mut_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import tabular mutation data — import_mut_data","text":"mut_file mutation data file(s) imported. can either data frame object filepath file directory. specify directory, function attempt read files directory combine single data frame. Mutation data consist row variant. Required columns listed details. mut_sep delimiter importing mutation file. Default tab-delimited. is_0_based_mut logical variable. Indicates whether position coordinates mutation data 0 based (TRUE) 1 based (FALSE). TRUE, positions converted 1-based. sample_data optional file containing additional sample metadata (dose, timepoint, etc.). can data frame file path. Metadata joined mutation data based sample column. Required columns sample additional columns wish include. sd_sep delimiter importing sample data. Default tab-delimited. regions optional file containing metadata genomic regions. Region metadata joined mutation data variants checked overlap regions. regions can either file path, data frame, GRanges object. File paths read using rg_sep. Users can also choose built-TwinStrand's Mutagenesis Panels inputting \"TSpanel_human\",  \"TSpanel_mouse\", \"TSpanel_rat\". Required columns regions file \"contig\", \"start\", \"end\". GRanges object, required columns \"seqnames\", \"start\", \"end\". Default NULL. rg_sep delimiter importing custom_regions. default tab-delimited \"\\t\". is_0_based_rg logical variable. Indicates whether position coordinates regions 0 based (TRUE) 1 based (FALSE). TRUE, positions converted 1-based (start + 1). Need supplied TSpanels. Default TRUE. padding integer >= 0. Extend range regions directions given amount. Ex. Structural variants indels may start outside regions. Adjust padding include variants region's ranges. genome genome assembly version reference genome. required data include context column. function install BS genome given species/genome/masked arguments populate context column. Ex.Human GRCh38 = hg38 | Human GRCh37 = hg19 | Mouse GRCm38 = mm10 | Mouse GRCm39 = mm39 | Rat RGSC 6.0 = rn6 | Rat mRatBN7.2 = rn7 species species. Required data include context column. function install BS genome given species/genome/masked populate context column. species can common name species scientific name. Ex. \"human\" \"Homo sapiens\". masked_BS_genome logical value. Required using BS genome poulate context column. Whether use masked version BS genome (TRUE) (FALSE). Default FALSE. custom_column_names list names specify meaning column headers. Since column names can vary data, might necessary digest mutation data properly. Typical defaults set, can substituted form list(my_custom_contig_name = \"contig\", my_custom_sample_column_name = \"sample\"). can change one . Set column synonyms defined MutSeqR::op$column automatically changed default value. output_granges logical variable; whether want mutation data output GRanges object. Default output (FALSE) dataframe.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_mut_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import tabular mutation data — import_mut_data","text":"table row mutation, columns indicate location, type, data. output_granges set TRUE, mutation data returned GRanges object, otherwise mutation data returned dataframe. Output Column Definitions: short_ref: reference base start position. normalized_ref: short_ref C/T-base notation position (e.g. -> T, G -> C). context trinucleotide context position. Consists reference base two flanking bases (e.g. TAC). normalized_context: trinucleotide context C/T base notation position (e.g. TAG -> CTA). variation_type type variant (snv, mnv, insertion, deletion, complex, sv, no_variant, ambiguous, uncategorized). subtype substitution type snv variant (12-base spectrum; e.g. >C). normalized_subtype C/T-based substitution type snv variant (6-base spectrum; e.g. >C -> T>G). context_with_mutation: substitution type snv variant including two flanking nucleotides (192-trinucleotide spectrum; e.g. T[>C]G) normalized_context_with_mutation: C/T-based substitution type snv variant including two flanking nucleotides (96-base spectrum e.g. T[>C]G -> C[T>G]). nchar_ref: length (bp) reference allele. nchar_alt: length (bp) alternate allele. varlen: length (bp) variant. ref_depth: depth reference allele. Calculated total_depth - alt_depth, applicable. vaf : variant allele fraction. Calculated alt_depth/total_depth. gc_content: % GC trinucleotide context position. is_known: TRUE FALSE. Flags known variants (ID != \".\"). row_has_duplicate: TRUE FALSE. Flags rows whose position least one row sample. filter_mut : logical value, initially set FALSE indicates calculte_mf() variant excluded mutation counts. See filter_mut function detail.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_mut_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import tabular mutation data — import_mut_data","text":"Required columns mut files : contig: name reference sequence. start: start position feature. end: half-open end position feature. sample: sample name. ref: reference allele position alt: left-aligned, normalized, alternate allele position. Multiple alt alleles called single position represented separate rows table. following columns required, recommended full package functionality: alt_depth: read depth supporting alternate allele. included, function add column, assuming value 1. total_depth: total read depth position, excluding -calls (N calls). present, function attempt calculate total_depth depth - no_calls. no_calls present, function use depth total_depth. depth: total read depth position, including -calls. no_calls: number -calls (N-calls) position. recommend files include record every sequenced position, regardless whether variant called, along total_depth record. enables site-specific depth calculations required downstream analyses.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_mut_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import tabular mutation data — import_mut_data","text":"","code":"# Example: Import a single mutation file. This library was sequenced with # Duplex Sequencing using the TwinStrand Mouse Mutagenesis Panel which # consists of 20 2.4kb targets = 48kb of sequence. example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_import_mut_data.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) # We will create an example metadata table for this data. sample_meta <- data.frame(sample = \"dna00996.1\",                           dose = \"50\",                           dose_group = \"High\") # Import the data imported_example_data <- import_mut_data(mut_file = example_data,                                          sample_data = sample_meta,                                          regions = \"TSpanel_mouse\",                                          genome = \"mm10\",                                          species = \"mouse\",                                          masked_BS_genome = FALSE) #> Joining with `by = join_by(sample)` #> 'getOption(\"repos\")' replaces Bioconductor standard repositories, see #> 'help(\"repositories\", package = \"BiocManager\")' for details. #> Replacement repositories: #>     CRAN: https://cran.rstudio.com #> Reference genome already installed. #> Loading reference genome: BSgenome.Mmusculus.UCSC.mm10. #> Retrieving context sequences from BSgenome #> Warning: 150 rows were found whose position was the same as that of at least one other row for the same sample. #> Warning: The total_depth may be double-counted in some instances due to overlapping positions. Set the correct_depth parameter in calculate_mf() to correct the total_depth for these instances."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_vcf_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import a VCF file — import_vcf_data","title":"Import a VCF file — import_vcf_data","text":"function reads VCF file(s) extracts data dataframe.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_vcf_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import a VCF file — import_vcf_data","text":"","code":"import_vcf_data(   vcf_file,   sample_data = NULL,   sd_sep = \"\\t\",   regions = NULL,   rg_sep = \"\\t\",   is_0_based_rg = FALSE,   padding = 0,   genome = NULL,   species = NULL,   masked_BS_genome = FALSE,   output_granges = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_vcf_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import a VCF file — import_vcf_data","text":"vcf_file path .vcf (.gvcf, gzip, bgzip) imported. specify directory, function attempt read files directory combine single table. VCF files follow VCF specifications, version 4.5. Multisample VCF files supported; VCF files must contain one sample . Required fields listed details. sample_data optional file containing additional sample metadata (dose, timepoint, etc.). can data frame file path. Metadata joined mutation data based sample column. Required columns sample additional columns wish include. sd_sep delimiter importing sample metadata tables. Default tab-delimited. regions optional file containing metadata genomic regions. Region metadata joined mutation data variants checked overlap regions. regions can either file path, data frame, GRanges object. File paths read using rg_sep. Users can also choose built-TwinStrand's Mutagenesis Panels inputting \"TSpanel_human\",  \"TSpanel_mouse\", \"TSpanel_rat\". Required columns regions file \"contig\", \"start\", \"end\". GRanges object, required columns \"seqnames\", \"start\", \"end\". Default NULL. rg_sep delimiter importing custom_regions. default tab-delimited \"\\t\". is_0_based_rg logical variable. Indicates whether position coordinates regions 0 based (TRUE) 1 based (FALSE). TRUE, positions converted 1-based (start + 1). Need supplied TSpanels. Default TRUE. padding Extend range regions directions given amount. Ex. Structural variants indels may start outside regions. Adjust padding include variants region's ranges. genome genome assembly version reference genome. required data include context column. function install BS genome given species/genome/masked arguments populate context column. Ex.Human GRCh38 = hg38 | Human GRCh37 = hg19 | Mouse GRCm38 = mm10 | Mouse GRCm39 = mm39 | Rat RGSC 6.0 = rn6 | Rat mRatBN7.2 = rn7 species species. Required data include context column. function install BS genome given species/genome/masked populate context column. species can common name species scientific name. Ex. \"human\" \"Homo sapiens\". masked_BS_genome logical value. Required using BS genome poulate context column. Whether use masked version BS genome (TRUE) (FALSE). Default FALSE. output_granges TRUE FALSE; whether want mutation data output GRanges object. Default output dataframe.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_vcf_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import a VCF file — import_vcf_data","text":"table row mutation, columns indicate location, type, data. output_granges set TRUE, mutation data returned GRanges object, otherwise mutation data returned dataframe. Output Column Definitions: short_ref: reference base start position. normalized_ref: short_ref C/T-base notation position (e.g. -> T, G -> C). context trinucleotide context position. Consists reference base two flanking bases (e.g. TAC). normalized_context: trinucleotide context C/T base notation position (e.g. TAG -> CTA). variation_type type variant (snv, mnv, insertion, deletion, complex, sv, no_variant, ambiguous, uncategorized). subtype substitution type snv variant (12-base spectrum; e.g. >C). normalized_subtype C/T-based substitution type snv variant (6-base spectrum; e.g. >C -> T>G). context_with_mutation: substitution type snv variant including two flanking nucleotides (192-trinucleotide spectrum; e.g. T[>C]G) normalized_context_with_mutation: C/T-based substitution type snv variant including two flanking nucleotides (96-base spectrum e.g. T[>C]G -> C[T>G]). nchar_ref: length (bp) reference allele. nchar_alt: length (bp) alternate allele. varlen: length (bp) variant. ref_depth: depth reference allele. Calculated total_depth - alt_depth, applicable. vaf : variant allele fraction. Calculated alt_depth/total_depth. gc_content: % GC trinucleotide context position. is_known: TRUE FALSE. Flags known variants (ID != \".\"). row_has_duplicate: TRUE FALSE. Flags rows whose position least one row sample. filter_mut : logical value, initially set FALSE indicates calculte_mf() variant excluded mutation counts. See filter_mut function detail.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_vcf_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import a VCF file — import_vcf_data","text":"required fields : FIXED FIELDS CHROM: name reference sequence. Equivalent contig. POS: 1-based start position feature. Equivalent  start. REF: reference allele position. ALT: left-aligned, normalized, alternate allele position. Multiple alt alleles called single position represented separate rows table. INFO FIELDS END: half-open end position feature. sample: identifying field samples; either INFO field header FORMAT field. SUGGESTED FIELDS following FORMAT fields required, recommended full package functionality: AD: allelic depths reference alternate allele order listed. sum AD equivalent total_depth (read depth position excluding N-calls). DP: read depth position (including N-calls). Equivalent depth. Note many VCF files, DP field defined total_depth. However, cases, DP field includes N-calls. VD: read depth supporting alternate allele. included, function add column, assuming value 1. Equivalent alt_depth. recommend files include record every sequenced position, regardless whether variant called, along AD record. enables site-specific depth calculations required downstream analyses. AD used calculate total_depth (read depth excluding -calls). AD available, DP field used total_depth.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/import_vcf_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import a VCF file — import_vcf_data","text":"","code":"# Example: Import a single bg-zipped vcf file. This library was sequenced # with Duplex Sequencing using the TwinStrand Mouse Mutagenesis Panel which # consists of 20 2.4kb targets = 48kb of sequence. example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_import_vcf_data_cleaned.vcf.bgz\",                             package = \"MutSeqR\") # We will create an example metadata table for this data. sample_meta <- data.frame(sample = \"dna00996.1\",                           dose = \"50\",                           dose_group = \"High\") # Import the data imported_example_data <- import_vcf_data(vcf_file = example_file,                                          sample_data = sample_meta,                                          regions = \"TSpanel_mouse\",                                          genome = \"mm10\",                                          species = \"mouse\",                                          masked_BS_genome = FALSE) #> Joining with `by = join_by(sample)` #> Expected 'alt' but found 'alt.value', renaming it. #> Expected 'alt_depth' but found 'VD', renaming it. #> Expected 'depth' but found 'DP', renaming it. #> 'getOption(\"repos\")' replaces Bioconductor standard repositories, see #> 'help(\"repositories\", package = \"BiocManager\")' for details. #> Replacement repositories: #>     CRAN: https://cran.rstudio.com #> Reference genome already installed. #> Loading reference genome: BSgenome.Mmusculus.UCSC.mm10. #> Retrieving context sequences from the reference genome #> Warning: 150 rows were found whose position was the same as that of at least one other row for the same sample. #> Warning: The total_depth may be double-counted in some instances due to overlapping positions. Set the correct_depth parameter in calculate_mf() to correct the total_depth for these instances."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/install_ref_genome.html","id":null,"dir":"Reference","previous_headings":"","what":"Install the reference genome for the specified organism. — install_ref_genome","title":"Install the reference genome for the specified organism. — install_ref_genome","text":"function use BSgenome install reference genome specified organism assembly version.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/install_ref_genome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install the reference genome for the specified organism. — install_ref_genome","text":"","code":"install_ref_genome(organism, genome, masked = FALSE)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/install_ref_genome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install the reference genome for the specified organism. — install_ref_genome","text":"organism name organism install reference genome. can scientific name common name. example Homo Sapiens, H. sapiens, human genome reference genome assembly version. Ex. hg18, mm10, rn6. masked Logical value. Whether search 'masked' BSgenome. Default FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/install_ref_genome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install the reference genome for the specified organism. — install_ref_genome","text":"BSgenome object","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/load_regions_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Imports the regions file — load_regions_file","title":"Imports the regions file — load_regions_file","text":"helper function import regions metadata file return GRanges object.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/load_regions_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imports the regions file — load_regions_file","text":"","code":"load_regions_file(regions, rg_sep = \"\\t\", is_0_based_rg = TRUE)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/load_regions_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imports the regions file — load_regions_file","text":"regions regions metadata file import. Can either file path, data frame, GRanges object. File paths read using rg_sep. Users can also choose built-TwinStrand's Mutagenesis Panels inputting \"TSpanel_human\",  \"TSpanel_mouse\", \"TSpanel_rat\". Required columns regions file \"contig\", \"start\", \"end\". GRanges object, required columns \"seqnames\", \"start\", \"end\". rg_sep delimiter importing custom_regions. default tab-delimited \"\\t\". is_0_based_rg logical variable. Indicates whether position coordinates regions 0 based (TRUE) 1 based (FALSE). TRUE, positions converted 1-based (start + 1). Need supplied TSpanels. Default TRUE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/load_regions_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imports the regions file — load_regions_file","text":"GRanges object imported regions metadata file.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/model_mf.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","title":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","text":"model_mf fit linear model analyse effect(s) given factor(s)  mutation frequency perform specified pairwise comparisons. function fit either generalized linear model (glm) , supplied random effects, generalized linear mixed-effects model (glmer). Pairwise comparisons conducted using doBy library (esticon) estimates back-transformed. delta method  employed approximate  back-transformed standard-errors. Sidak correction applied adjust p-values multiple comparisons.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/model_mf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","text":"","code":"model_mf(   mf_data,   fixed_effects,   test_interaction = TRUE,   random_effects = NULL,   reference_level,   muts = \"sum_min\",   total_count = \"group_depth\",   contrasts = NULL,   cont_sep = \"\\t\",   ... )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/model_mf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","text":"mf_data data frame containing mutation frequency data. Mutation counts total sequencing depth summarized per sample alongside columns fixed effects. data can obtained using calculate_mf(summary=TRUE). fixed_effects name(s) column(s) act fixed_effects (factor/independent variable) modelling mutation frequency. test_interaction logical value. Whether model include interaction fixed_effects. random_effects name column(s) analysed random effect model. Providing effect cause function fit generalized linear mixed-effects model. reference_level Refers one levels within fixed_effects. coefficient reference level represent baseline effect. coefficients levels interpreted relation reference_level deviations baseline effect. muts column containing mutation count per sample. total_count column containing sequencing depth per sample. contrasts data frame  filepath file provide information necessary make pairwise comparisons groups. table must consist two columns. first column group within fixed_effects second column must group compared .  values must correspond entries mf_data column fixed effect. Put group expect higher mutation frequency 1st column group expect lower mutation frequency second column. multiple fixed effects, separate levels fixed_effect group colon. Ensure fixed_effects represented entry table. See details examples. cont_sep delimiter importing contrast table file. Default tab-delimited. ... Extra arguments glm  glmer. glmer function used random_effect supplied, otherwise, model uses glm function.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/model_mf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","text":"Model results output list. Included : model_data: supplied mf_data added column Pearson's residuals model. summary: summary model. anova: analysis variance models two effects. Anova(model) residuals_histogram: Pearson's residuals plotted histogram. used check whether variance normally distributed. symmetric bell-shaped histogram, evenly distributed around zero indicates normality assumption likely true. residuals_qq_plot: Pearson's residuals plotted quantile-quantile plot. normal distribution, expect points roughly follow y=x line. point_estimates_matrix: contrast matrix used generate point-estimates fixed effects. point_estimates: point estimates fixed effects. pairwise_comparisons_matrix: contrast matrix used conduct pairwise comparisons specified contrasts. pairwise_comparisons: results pairwise comparisons specified contrasts.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/model_mf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","text":"fixed_effects variables direct constant effect dependent variable (ie mutation frequency).typically experimental factors covariates interest impact dependent variable. One fixed_effect may provided. providing one fixed effect, avoid using correlated variables; fixed effect must independently predict dependent variable. Ex. fixed_effects = c(\"dose\", \"genomic_target\", \"tissue\", \"age\", etc). Interaction terms enable examine whether relationship dependent independent variable changes based value another independent variable. words, interaction significant, relationship fixed effects constant across levels variable. Ex. Consider investigating effect dose group tissue mutation frequency. interaction dose tissue capture whether dose response differs tissues. random_effects account unmeasured sources statistical variance affect certain groups data. help account unobserved heterogeneity correlation within groups. Ex. model uses repeated measures within sample, random_effects = \"sample\". Setting reference_level fixed effects enhances interpretability model. Ex. Consider fixed_effect \"dose\" levels 0, 25, 50, 100 mg/kg. Intuitively, reference_level refer  negative control dose, \"0\" since interested testing treatment might change mutation frequency relative control. Examples contrasts: fixed_effect \"dose\" dose groups 0, 25, 50, 100, first column contain treated groups (25, 50, 100), second column 0, thus comparing treated group control group. 25 0 50 0 100 0 Alternatively, like compare mutation frequency treated dose groups, contrast table look follows, lower dose always second column, expect lower mutation frequency. Keeping format aids interpretability estimates pairwise comparisons. columns reversed, higher group second column, model compute fold-decrease instead fold-increase. 100 25 100 50 50 25 Ex. Consider scenario fixed_effects  \"dose\" (0, 25, 50, 100) \"genomic_target\" (\"chr1\", \"chr2\"). compare three treated dose groups control genomic target, contrast table look like: 25:chr1\t0:chr1 50:chr1\t0:chr1 100:chr1\t0:chr1 25:chr2\t0:chr2 50:chr2\t0:chr2 100:chr2\t0:chr2 Troubleshooting: issues convergence generalized linear mixed- effects model, may advisable increase tolerance level convergence checking model fitting. done control argument lme4::glmer function. default tolerance tol = 0.002. Add argument extra argument model_mf function. Ex. control = lme4::glmerControl(check.conv.grad = lme4::.makeCC(\"warning\", tol = 3e-3, relTol = NULL))","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/model_mf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform linear modelling on mutation frequency for given fixed and random effects — model_mf","text":"","code":"# Example 1: Model MFmin by dose example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) mf_example <- calculate_mf(mutation_data = example_data,                            cols_to_group = \"sample\",                           retain_metadata_cols = \"dose\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)` # Create a contrasts table to define pairwise comparisons # We will compare all treated groups to the control group contrasts <- data.frame(col1 = c(\"12.5\", \"25\", \"50\"),                         col2 = c(\"0\", \"0\", \"0\")) # Fit the model model1 <- model_mf(mf_data = mf_example,                    fixed_effects = \"dose\",                    reference_level = \"0\",                    muts = \"sum_min\",                    total_count = \"group_depth\",                    contrasts = contrasts) #> Reference level for factor dose : 0 #> Fitting generalized linear model. glm(cbind( sum_min , group_depth ) ~  dose, family = quasibinomial #> The row with the maximum residual in absolute value is: #>        sample dose sum_min sum_max       mf_min       mf_max group_depth #> 14 dna00986.1   25     160     197 9.255848e-07 1.139626e-06   172863681 #>    residuals #> 14  4.739692   # The residuals histogram and QQ plot will help you assess the normality # of the residuals. model1$summary # Model Summary #>  #> Call: #> stats::glm(formula = model_formula, family = \"quasibinomial\",  #>     data = mf_data) #>  #> Coefficients: #>              Estimate Std. Error  t value Pr(>|t|)     #> (Intercept) -15.56285    0.08290 -187.736  < 2e-16 *** #> dose12.5      0.67512    0.10066    6.707 1.58e-06 *** #> dose25        1.29746    0.09563   13.567 1.51e-11 *** #> dose50        1.69485    0.08915   19.011 2.84e-14 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for quasibinomial family taken to be 4.604243) #>  #>     Null deviance: 2919.634  on 23  degrees of freedom #> Residual deviance:   89.569  on 20  degrees of freedom #> AIC: NA #>  #> Number of Fisher Scoring iterations: 5 #>  model1$point_estimates # Point Estimates: Mean MFmin by dose #>          Estimate      Std.Err        Lower        Upper dose #> 0    1.742367e-07 1.444380e-08 1.465686e-07 2.071278e-07    0 #> 12.5 3.422477e-07 1.954350e-08 3.038151e-07 3.855421e-07 12.5 #> 25   6.377065e-07 3.040798e-08 5.773291e-07 7.043983e-07   25 #> 50   9.488647e-07 3.112522e-08 8.861101e-07 1.016064e-06   50 model1$pairwise_comparisons # Pairwise Comparisons #>           Fold.Change FC.Std.Err     Obs.T      p.value df FC.Lower FC.Upper #> 12.5 vs 0    1.964269  0.1977269  6.706816 1.584455e-06 20 1.592242 2.423220 #> 25 vs 0      3.660002  0.3500176 13.567085 1.509637e-11 20 2.998093 4.468045 #> 50 vs 0      5.445838  0.4855054 19.010885 2.842171e-14 20 4.521684 6.558872 #>            adj_p.value Significance dose_1 dose_2 #> 12.5 vs 0 4.753356e-06          ***   12.5      0 #> 25 vs 0   4.528911e-11          ***     25      0 #> 50 vs 0   8.526513e-14          ***     50      0 # All treated doses exhibited a significant increase in mutation frequency # compared to the control.  # Plot the results using plot_model_mf() plot <- plot_model_mf(model1,                       plot_type = \"bar\",                       x_effect = \"dose\",                       plot_error_bars = TRUE,                       plot_signif = TRUE,                       x_order = c(\"0\", \"12.5\", \"25\", \"50\"),                       x_label = \"Dose (mg/kg-bw/d)\",                       y_label = \"Estimated Mean MF (mutations/bp)\",                       plot_title = \"\") #> Joining with `by = join_by(dose)`  # Example 2: Model MFmin by dose and genomic target # We will compare the treated groups to the control group for each genomic # target  # Calculate MF mf_example2 <- calculate_mf(mutation_data = example_data,                             cols_to_group = c(\"sample\", \"label\"),                             retain_metadata_cols = \"dose\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample, label)` #> Joining with `by = join_by(sample, label)` # Create a contrasts table to define pairwise comparisons combinations <- expand.grid(dose = unique(mf_example2$dose),                             label = unique(mf_example2$label)) combinations <- combinations[combinations$dose != 0, ] combinations$col1 <- with(combinations, paste(dose, label, sep=\":\")) combinations$col2 <- with(combinations, paste(\"0\", label, sep=\":\")) contrasts2 <- combinations[, c(\"col1\", \"col2\")] # Fit the model # Fixed effects of dose and label # Random effect of sample # Control the optimizer for convergence issues model2 <- model_mf(mf_data = mf_example2,                    fixed_effects = c(\"dose\", \"label\"),                    random_effects = \"sample\",                    reference_level = c(\"0\", \"chr1\"),                    muts = \"sum_min\",                    total_count = \"group_depth\",                    contrasts = contrasts2,                    control = lme4::glmerControl(optimizer = \"bobyqa\",                                        optCtrl = list(maxfun = 2e5))) #> Reference level for factor dose : 0 #> Reference level for factor label : chr1 #> Fitting generalized linear mixed-effects model. lme4::glmer(cbind( sum_min , group_depth ) ~  dose*label + (1| sample ), family = binomial) #> The row with the maximum residual in absolute value is: #>        sample label dose sum_min sum_max       mf_min       mf_max group_depth #> 33 dna00974.1  chr2    0      23      36 5.982805e-07 9.364391e-07    38443503 #>    residuals #> 33  5.481218   model2$summary # Fits a GLMM #> Generalized linear mixed model fit by maximum likelihood (Laplace #>   Approximation) [glmerMod] #>  Family: binomial  ( logit ) #> Formula: cbind(sum_min, group_depth) ~ dose * label + (1 | sample) #>    Data: mf_data #> Control: ..1 #>  #>       AIC       BIC    logLik -2*log(L)  df.resid  #>    2825.5    3163.6   -1331.7    2663.5       399  #>  #> Scaled residuals:  #>     Min      1Q  Median      3Q     Max  #> -2.7513 -0.7140 -0.0326  0.6138  5.4812  #>  #> Random effects: #>  Groups Name        Variance Std.Dev. #>  sample (Intercept) 0.01088  0.1043   #> Number of obs: 480, groups:  sample, 24 #>  #> Fixed effects: #>                        Estimate Std. Error z value Pr(>|z|)     #> (Intercept)          -1.596e+01  2.222e-01 -71.801  < 2e-16 *** #> dose12.5              6.208e-01  2.738e-01   2.267  0.02340 *   #> dose25                1.293e+00  2.613e-01   4.950 7.41e-07 *** #> dose50                1.903e+00  2.395e-01   7.946 1.93e-15 *** #> labelchr1.2           1.382e-01  2.824e-01   0.489  0.62474     #> labelchr10            4.516e-01  2.682e-01   1.684  0.09215 .   #> labelchr11            8.366e-01  2.641e-01   3.168  0.00154 **  #> labelchr12            5.183e-01  2.661e-01   1.948  0.05139 .   #> labelchr13            1.981e-02  2.908e-01   0.068  0.94567     #> labelchr14            6.559e-01  2.671e-01   2.456  0.01405 *   #> labelchr15            5.083e-01  2.661e-01   1.911  0.05604 .   #> labelchr16            7.757e-01  2.693e-01   2.880  0.00397 **  #> labelchr17            4.593e-01  2.885e-01   1.592  0.11135     #> labelchr18           -7.553e-03  2.958e-01  -0.026  0.97963     #> labelchr19           -2.379e-01  3.084e-01  -0.771  0.44054     #> labelchr2             6.257e-01  2.661e-01   2.352  0.01868 *   #> labelchr3             2.568e-01  2.863e-01   0.897  0.36982     #> labelchr4             5.106e-01  2.774e-01   1.841  0.06564 .   #> labelchr5             4.208e-01  2.824e-01   1.490  0.13624     #> labelchr6             2.936e-01  2.807e-01   1.046  0.29543     #> labelchr7            -4.287e-04  2.958e-01  -0.001  0.99884     #> labelchr8             4.383e-01  2.908e-01   1.507  0.13175     #> labelchr9             7.000e-01  2.671e-01   2.621  0.00877 **  #> dose12.5:labelchr1.2 -2.485e-03  3.459e-01  -0.007  0.99427     #> dose25:labelchr1.2   -2.491e-02  3.289e-01  -0.076  0.93964     #> dose50:labelchr1.2   -2.482e-01  3.022e-01  -0.821  0.41144     #> dose12.5:labelchr10  -3.356e-01  3.360e-01  -0.999  0.31795     #> dose25:labelchr10    -3.318e-01  3.168e-01  -1.047  0.29494     #> dose50:labelchr10    -4.750e-01  2.882e-01  -1.648  0.09933 .   #> dose12.5:labelchr11   4.253e-01  3.174e-01   1.340  0.18035     #> dose25:labelchr11     4.359e-01  3.029e-01   1.439  0.15006     #> dose50:labelchr11    -5.550e-02  2.809e-01  -0.198  0.84338     #> dose12.5:labelchr12  -1.544e-01  3.287e-01  -0.470  0.63859     #> dose25:labelchr12    -1.756e-01  3.115e-01  -0.564  0.57305     #> dose50:labelchr12    -1.676e-01  2.836e-01  -0.591  0.55447     #> dose12.5:labelchr13   2.214e-03  3.561e-01   0.006  0.99504     #> dose25:labelchr13    -2.386e-01  3.425e-01  -0.697  0.48611     #> dose50:labelchr13    -3.978e-01  3.125e-01  -1.273  0.20302     #> dose12.5:labelchr14   2.823e-01  3.228e-01   0.874  0.38187     #> dose25:labelchr14     4.878e-01  3.055e-01   1.597  0.11038     #> dose50:labelchr14     1.207e-01  2.833e-01   0.426  0.67002     #> dose12.5:labelchr15  -4.121e-01  3.348e-01  -1.231  0.21836     #> dose25:labelchr15    -6.711e-01  3.214e-01  -2.088  0.03681 *   #> dose50:labelchr15    -1.145e+00  2.935e-01  -3.902 9.52e-05 *** #> dose12.5:labelchr16   1.134e-01  3.279e-01   0.346  0.72958     #> dose25:labelchr16     6.546e-02  3.125e-01   0.209  0.83408     #> dose50:labelchr16    -2.607e-01  2.878e-01  -0.906  0.36507     #> dose12.5:labelchr17   3.705e-01  3.457e-01   1.072  0.28379     #> dose25:labelchr17     3.524e-01  3.308e-01   1.065  0.28675     #> dose50:labelchr17     1.327e-01  3.059e-01   0.434  0.66451     #> dose12.5:labelchr18   4.491e-01  3.525e-01   1.274  0.20264     #> dose25:labelchr18     5.986e-01  3.347e-01   1.789  0.07366 .   #> dose50:labelchr18     3.822e-01  3.118e-01   1.226  0.22020     #> dose12.5:labelchr19   3.158e-01  3.689e-01   0.856  0.39208     #> dose25:labelchr19     3.343e-01  3.523e-01   0.949  0.34265     #> dose50:labelchr19     6.481e-02  3.273e-01   0.198  0.84303     #> dose12.5:labelchr2   -2.458e-01  3.312e-01  -0.742  0.45796     #> dose25:labelchr2     -2.993e-01  3.138e-01  -0.954  0.34024     #> dose50:labelchr2     -6.041e-01  2.869e-01  -2.106  0.03523 *   #> dose12.5:labelchr3   -5.817e-01  3.701e-01  -1.572  0.11605     #> dose25:labelchr3     -6.911e-01  3.503e-01  -1.973  0.04853 *   #> dose50:labelchr3     -1.072e+00  3.178e-01  -3.374  0.00074 *** #> dose12.5:labelchr4   -1.492e-01  3.434e-01  -0.434  0.66401     #> dose25:labelchr4     -4.997e-02  3.234e-01  -0.155  0.87721     #> dose50:labelchr4     -2.788e-01  2.967e-01  -0.940  0.34740     #> dose12.5:labelchr5   -4.732e-02  3.471e-01  -0.136  0.89156     #> dose25:labelchr5     -1.235e-01  3.312e-01  -0.373  0.70916     #> dose50:labelchr5     -2.602e-01  3.023e-01  -0.861  0.38927     #> dose12.5:labelchr6   -4.389e-02  3.449e-01  -0.127  0.89872     #> dose25:labelchr6     -2.395e-01  3.307e-01  -0.724  0.46897     #> dose50:labelchr6     -2.353e-01  2.999e-01  -0.785  0.43264     #> dose12.5:labelchr7    4.022e-01  3.530e-01   1.139  0.25458     #> dose25:labelchr7      5.092e-01  3.355e-01   1.518  0.12906     #> dose50:labelchr7      1.376e-01  3.131e-01   0.439  0.66034     #> dose12.5:labelchr8    5.458e-01  3.454e-01   1.580  0.11408     #> dose25:labelchr8      6.388e-01  3.299e-01   1.936  0.05282 .   #> dose50:labelchr8      2.822e-01  3.074e-01   0.918  0.35859     #> dose12.5:labelchr9   -1.700e-01  3.304e-01  -0.515  0.60683     #> dose25:labelchr9     -4.265e-01  3.172e-01  -1.345  0.17876     #> dose50:labelchr9     -4.546e-01  2.867e-01  -1.586  0.11279     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Correlation matrix not shown by default, as p = 80 > 12. #> Use print(x, correlation=TRUE)  or #>     vcov(x)        if you need it model2$point_estimates #>                 Estimate      Std.Err        Lower        Upper dose  label #> 0:chr1      1.174972e-07 2.611209e-08 7.600817e-08 1.816331e-07    0   chr1 #> 12.5:chr1   2.185830e-07 3.497307e-08 1.597441e-07 2.990941e-07 12.5   chr1 #> 25:chr1     4.282882e-07 5.880561e-08 3.272373e-07 5.605435e-07   25   chr1 #> 50:chr1     7.881257e-07 7.041947e-08 6.615157e-07 9.389680e-07   50   chr1 #> 0:chr1.2    1.349051e-07 2.489307e-08 9.396418e-08 1.936844e-07    0 chr1.2 #> 12.5:chr1.2 2.503443e-07 3.352075e-08 1.925586e-07 3.254711e-07 12.5 chr1.2 #> 25:chr1.2   4.796449e-07 5.548781e-08 3.823388e-07 6.017155e-07   25 chr1.2 #> 50:chr1.2   7.059670e-07 5.997439e-08 5.976843e-07 8.338674e-07   50 chr1.2 #> 0:chr10     1.845746e-07 2.987036e-08 1.344061e-07 2.534690e-07    0  chr10 #> 12.5:chr10  2.454787e-07 3.387203e-08 1.873104e-07 3.217108e-07 12.5  chr10 #> 25:chr10    4.828374e-07 5.585986e-08 3.848794e-07 6.057272e-07   25  chr10 #> 50:chr10    7.699387e-07 6.342925e-08 6.551372e-07 9.048571e-07   50  chr10 #> 0:chr11     2.712317e-07 4.204001e-08 2.001737e-07 3.675139e-07    0  chr11 #> 12.5:chr11  7.720123e-07 7.345983e-08 6.406624e-07 9.302918e-07 12.5  chr11 #> 25:chr11    1.528870e-06 1.275827e-07 1.298191e-06 1.800538e-06   25  chr11 #> 50:chr11    1.721092e-06 1.194320e-07 1.502230e-06 1.971840e-06   50  chr11 #> 0:chr12     1.973008e-07 3.123262e-08 1.446719e-07 2.690752e-07    0  chr12 #> 12.5:chr12  3.145317e-07 3.892588e-08 2.467865e-07 4.008738e-07 12.5  chr12 #> 25:chr12    6.033738e-07 6.396103e-08 4.901785e-07 7.427089e-07   25  chr12 #> 50:chr12    1.119190e-06 8.126983e-08 9.707197e-07 1.290368e-06   50  chr12 #> 0:chr13     1.198485e-07 2.361372e-08 8.145556e-08 1.763375e-07    0  chr13 #> 12.5:chr13  2.234513e-07 3.184917e-08 1.689891e-07 2.954658e-07 12.5  chr13 #> 25:chr13    3.441300e-07 4.586497e-08 2.650184e-07 4.468574e-07   25  chr13 #> 50:chr13    5.400497e-07 5.053253e-08 4.495590e-07 6.487551e-07   50  chr13 #> 0:chr14     2.264082e-07 3.623149e-08 1.654537e-07 3.098186e-07    0  chr14 #> 12.5:chr14  5.585619e-07 5.830727e-08 4.552143e-07 6.853725e-07 12.5  chr14 #> 25:chr14    1.344104e-06 1.122370e-07 1.141182e-06 1.583110e-06   25  chr14 #> 50:chr14    1.713483e-06 1.155156e-07 1.501397e-06 1.955528e-06   50  chr14 #> 0:chr15     1.953432e-07 3.092381e-08 1.432349e-07 2.664083e-07    0  chr15 #> 12.5:chr15  2.406649e-07 3.347088e-08 1.832443e-07 3.160786e-07 12.5  chr15 #> 25:chr15    3.639452e-07 4.816873e-08 2.807877e-07 4.717304e-07   25  chr15 #> 50:chr15    4.168725e-07 4.369011e-08 3.394639e-07 5.119329e-07   50  chr15 #> 0:chr16     2.552061e-07 4.177829e-08 1.851594e-07 3.517517e-07    0  chr16 #> 12.5:chr16  5.317539e-07 6.072090e-08 4.251206e-07 6.651342e-07 12.5  chr16 #> 25:chr16    9.931773e-07 9.982599e-08 8.155884e-07 1.209435e-06   25  chr16 #> 50:chr16    1.318988e-06 1.018368e-07 1.133760e-06 1.534478e-06   50  chr16 #> 0:chr17     1.859961e-07 3.601698e-08 1.272547e-07 2.718527e-07    0  chr17 #> 12.5:chr17  5.011936e-07 5.993875e-08 3.964685e-07 6.335814e-07 12.5  chr17 #> 25:chr17    9.643635e-07 1.019430e-07 7.838991e-07 1.186373e-06   25  chr17 #> 50:chr17    1.424567e-06 1.101485e-07 1.224242e-06 1.657671e-06   50  chr17 #> 0:chr18     1.166131e-07 2.383554e-08 7.812017e-08 1.740731e-07    0  chr18 #> 12.5:chr18  3.399272e-07 4.133945e-08 2.678360e-07 4.314225e-07 12.5  chr18 #> 25:chr18    7.734680e-07 7.526467e-08 6.391659e-07 9.359898e-07   25  chr18 #> 50:chr18    1.146356e-06 8.381915e-08 9.933022e-07 1.322993e-06   50  chr18 #> 0:chr19     9.262357e-08 2.058511e-08 5.991650e-08 1.431847e-07    0  chr19 #> 12.5:chr19  2.362893e-07 3.260547e-08 1.802964e-07 3.096714e-07 12.5  chr19 #> 25:chr19    4.716324e-07 5.568714e-08 3.741963e-07 5.944395e-07   25  chr19 #> 50:chr19    6.628835e-07 5.801539e-08 5.583934e-07 7.869264e-07   50  chr19 #> 0:chr2      2.196759e-07 3.477570e-08 1.610769e-07 2.995929e-07    0   chr2 #> 12.5:chr2   3.196006e-07 4.161126e-08 2.476185e-07 4.125078e-07 12.5   chr2 #> 25:chr2     5.936419e-07 6.675329e-08 4.762220e-07 7.400135e-07   25   chr2 #> 50:chr2     8.053873e-07 6.814580e-08 6.823112e-07 9.506640e-07   50   chr2 #> 0:chr3      1.518983e-07 2.892836e-08 1.045792e-07 2.206279e-07    0   chr3 #> 12.5:chr3   1.579515e-07 2.870721e-08 1.106166e-07 2.255418e-07 12.5   chr3 #> 25:chr3     2.774225e-07 4.447573e-08 2.026184e-07 3.798432e-07   25   chr3 #> 50:chr3     3.487000e-07 4.217356e-08 2.751080e-07 4.419779e-07   50   chr3 #> 0:chr4      1.957833e-07 3.458465e-08 1.384883e-07 2.767824e-07    0   chr4 #> 12.5:chr4   3.137459e-07 4.329089e-08 2.394025e-07 4.111758e-07 12.5   chr4 #> 25:chr4     6.788629e-07 7.636724e-08 5.445378e-07 8.463231e-07   25   chr4 #> 50:chr4     9.937022e-07 8.171373e-08 8.457861e-07 1.167487e-06   50   chr4 #> 0:chr5      1.789722e-07 3.302391e-08 1.246586e-07 2.569503e-07    0   chr5 #> 12.5:chr5   3.175572e-07 4.347906e-08 2.428163e-07 4.153040e-07 12.5   chr5 #> 25:chr5     5.765641e-07 7.036720e-08 4.539020e-07 7.323744e-07   25   chr5 #> 50:chr5     9.254014e-07 7.877283e-08 7.832014e-07 1.093420e-06   50   chr5 #> 0:chr6      1.575997e-07 2.864778e-08 1.103641e-07 2.250521e-07    0   chr6 #> 12.5:chr6   2.805966e-07 3.784660e-08 2.154136e-07 3.655036e-07 12.5   chr6 #> 25:chr6     4.521146e-07 5.646454e-08 3.539502e-07 5.775040e-07   25   chr6 #> 50:chr6     8.354617e-07 6.895278e-08 7.106810e-07 9.821512e-07   50   chr6 #> 0:chr7      1.174469e-07 2.400664e-08 7.867782e-08 1.753197e-07    0   chr7 #> 12.5:chr7   3.266563e-07 4.018897e-08 2.566649e-07 4.157340e-07 12.5   chr7 #> 25:chr7     7.123781e-07 7.135212e-08 5.854014e-07 8.668966e-07   25   chr7 #> 50:chr7     9.040108e-07 7.117114e-08 7.747472e-07 1.054841e-06   50   chr7 #> 0:chr8      1.821209e-07 3.588295e-08 1.237796e-07 2.679603e-07    0   chr8 #> 12.5:chr8   5.847675e-07 6.613955e-08 4.684992e-07 7.298902e-07 12.5   chr8 #> 25:chr8     1.257447e-06 1.210249e-07 1.041273e-06 1.518500e-06   25   chr8 #> 50:chr8     1.619959e-06 1.213801e-07 1.398703e-06 1.876216e-06   50   chr8 #> 0:chr9      2.366029e-07 3.786303e-08 1.729036e-07 3.237695e-07    0   chr9 #> 12.5:chr9   3.713303e-07 4.680125e-08 2.900533e-07 4.753824e-07 12.5   chr9 #> 25:chr9     5.630028e-07 6.719751e-08 4.455690e-07 7.113874e-07   25   chr9 #> 50:chr9     1.007250e-06 8.124750e-08 8.599572e-07 1.179770e-06   50   chr9 model2$pairwise_comparisons #>                         Fold.Change FC.Std.Err        Obs.T      p.value df #> 12.5:chr1 vs 0:chr1        1.860324  0.5094248   5.13868130 2.339841e-02  1 #> 25:chr1 vs 0:chr1          3.645091  0.9523592  24.50577289 7.408753e-07  1 #> 50:chr1 vs 0:chr1          6.707609  1.6066462  63.13691715 1.887379e-15  1 #> 12.5:chr1.2 vs 0:chr1.2    1.855706  0.4230636   7.35456424 6.689272e-03  1 #> 25:chr1.2 vs 0:chr1.2      3.555424  0.7744777  33.91002650 5.772047e-09  1 #> 50:chr1.2 vs 0:chr1.2      5.233063  1.0630379  66.37563214 3.330669e-16  1 #> 12.5:chr10 vs 0:chr10      1.329970  0.2828398   1.79791390 1.799649e-01  1 #> 25:chr10 vs 0:chr10        2.615947  0.5205208  23.35577925 1.346384e-06  1 #> 50:chr10 vs 0:chr10        4.171423  0.7575098  61.85927352 3.663736e-15  1 #> 12.5:chr11 vs 0:chr11      2.846321  0.5176558  33.08045690 8.842303e-09  1 #> 25:chr11 vs 0:chr11        5.636767  0.9925891  96.44222819 0.000000e+00  1 #> 50:chr11 vs 0:chr11        6.345468  1.0775995 118.38448809 0.000000e+00  1 #> 12.5:chr12 vs 0:chr12      1.594174  0.3203142   5.38707254 2.028648e-02  1 #> 25:chr12 vs 0:chr12        3.058142  0.5827708  34.40753919 4.469885e-09  1 #> 50:chr12 vs 0:chr12        5.672505  0.9879171  99.31694595 0.000000e+00  1 #> 12.5:chr13 vs 0:chr13      1.864447  0.4533849   6.56285889 1.041289e-02  1 #> 25:chr13 vs 0:chr13        2.871374  0.6831405  19.65585624 9.271871e-06  1 #> 50:chr13 vs 0:chr13        4.506101  0.9828653  47.63612752 5.131451e-12  1 #> 12.5:chr14 vs 0:chr14      2.467057  0.4713529  22.33915551 2.284997e-06  1 #> 25:chr14 vs 0:chr14        5.936643  1.0718926  97.31443676 0.000000e+00  1 #> 50:chr14 vs 0:chr14        7.568115  1.3141857 135.84978982 0.000000e+00  1 #> 12.5:chr15 vs 0:chr15      1.232011  0.2596003   0.98049638 3.220763e-01  1 #> 25:chr15 vs 0:chr15        1.863107  0.3845338   9.08928759 2.571110e-03  1 #> 50:chr15 vs 0:chr15        2.134052  0.4051569  15.94145530 6.533203e-05  1 #> 12.5:chr16 vs 0:chr16      2.083626  0.4158716  13.52827374 2.349961e-04  1 #> 25:chr16 vs 0:chr16        3.891668  0.7477962  50.00808735 1.531109e-12  1 #> 50:chr16 vs 0:chr16        5.168326  0.9354577  82.35465519 0.000000e+00  1 #> 12.5:chr17 vs 0:chr17      2.694646  0.6132791  18.97004525 1.327868e-05  1 #> 25:chr17 vs 0:chr17        5.184859  1.1441281  55.62223182 8.781864e-14  1 #> 50:chr17 vs 0:chr17        7.659122  1.5970071  95.33582516 0.000000e+00  1 #> 12.5:chr18 vs 0:chr18      2.914999  0.6932903  20.23523399 6.847998e-06  1 #> 25:chr18 vs 0:chr18        6.632770  1.5017961  69.82653602 1.110223e-16  1 #> 50:chr18 vs 0:chr18        9.830419  2.1340127 110.84230145 0.000000e+00  1 #> 12.5:chr19 vs 0:chr19      2.551071  0.6673403  12.81675469 3.435291e-04  1 #> 25:chr19 vs 0:chr19        5.091926  1.2816530  41.81658378 1.002495e-10  1 #> 50:chr19 vs 0:chr19        7.156747  1.7094300  67.88961262 2.220446e-16  1 #> 12.5:chr2 vs 0:chr2        1.454874  0.2981930   3.34603827 6.736697e-02  1 #> 25:chr2 vs 0:chr2          2.702354  0.5248773  26.19685916 3.083236e-07  1 #> 50:chr2 vs 0:chr2          3.666253  0.6580870  52.38542132 4.560796e-13  1 #> 12.5:chr3 vs 0:chr3        1.039850  0.2737376   0.02203465 8.819950e-01  1 #> 25:chr3 vs 0:chr3          1.826370  0.4547341   5.85236648 1.555612e-02  1 #> 50:chr3 vs 0:chr3          2.295614  0.5179013  13.56770854 2.301101e-04  1 #> 12.5:chr4 vs 0:chr4        1.602516  0.3591949   4.42635229 3.538806e-02  1 #> 25:chr4 vs 0:chr4          3.467419  0.7263337  35.23461075 2.922826e-09  1 #> 50:chr4 vs 0:chr4          5.075520  0.9889649  69.50253255 1.110223e-16  1 #> 12.5:chr5 vs 0:chr5        1.774338  0.4076799   6.22860159 1.257030e-02  1 #> 25:chr5 vs 0:chr5          3.221528  0.7128586  27.94999314 1.244914e-07  1 #> 50:chr5 vs 0:chr5          5.170642  1.0507174  65.37182971 6.661338e-16  1 #> 12.5:chr6 vs 0:chr6        1.780438  0.4029931   6.49529681 1.081602e-02  1 #> 25:chr6 vs 0:chr6          2.868753  0.6328278  22.82418840 1.775174e-06  1 #> 50:chr6 vs 0:chr6          5.301162  1.0582954  69.80427278 1.110223e-16  1 #> 12.5:chr7 vs 0:chr7        2.781311  0.6635321  18.38486266 1.804861e-05  1 #> 25:chr7 vs 0:chr7          6.065533  1.3809431  62.68967836 2.442491e-15  1 #> 50:chr7 vs 0:chr7          7.697188  1.6860015  86.81056009 0.000000e+00  1 #> 12.5:chr8 vs 0:chr8        3.210876  0.7294458  26.36713802 2.823029e-07  1 #> 25:chr8 vs 0:chr8          6.904463  1.5143489  77.60642700 0.000000e+00  1 #> 50:chr8 vs 0:chr8          8.894967  1.8750127 107.49201208 0.000000e+00  1 #> 12.5:chr9 vs 0:chr9        1.569425  0.3196847   4.89586819 2.692103e-02  1 #> 25:chr9 vs 0:chr9          2.379527  0.4751592  18.84700812 1.416331e-05  1 #> 50:chr9 vs 0:chr9          4.257132  0.7629108  65.34027948 6.661338e-16  1 #>                          FC.Lower  FC.Upper  adj_p.value Significance dose_1 #> 12.5:chr1 vs 0:chr1     1.0876735  3.181843 7.584286e-01                12.5 #> 25:chr1 vs 0:chr1       2.1843061  6.082796 4.445154e-05          ***     25 #> 50:chr1 vs 0:chr1       4.1945267 10.726365 1.132427e-13          ***     50 #> 12.5:chr1.2 vs 0:chr1.2 1.1870047  2.901122 3.314905e-01                12.5 #> 25:chr1.2 vs 0:chr1.2   2.3199262  5.448896 3.463228e-07          ***     25 #> 50:chr1.2 vs 0:chr1.2   3.5143412  7.792342 1.998401e-14          ***     50 #> 12.5:chr10 vs 0:chr10   0.8766373  2.017733 9.999932e-01                12.5 #> 25:chr10 vs 0:chr10     1.7711568  3.863678 8.077982e-05          ***     25 #> 50:chr10 vs 0:chr10     2.9222021  5.954677 2.198242e-13          ***     50 #> 12.5:chr11 vs 0:chr11   1.9928618  4.065280 5.305380e-07          ***   12.5 #> 25:chr11 vs 0:chr11     3.9915391  7.960123 0.000000e+00          ***     25 #> 50:chr11 vs 0:chr11     4.5489486  8.851489 0.000000e+00          ***     50 #> 12.5:chr12 vs 0:chr12   1.0752397  2.363556 7.076210e-01                12.5 #> 25:chr12 vs 0:chr12     2.1049873  4.442891 2.681931e-07          ***     25 #> 50:chr12 vs 0:chr12     4.0320930  7.980299 0.000000e+00          ***     50 #> 12.5:chr13 vs 0:chr13   1.1576044  3.002895 4.663682e-01                12.5 #> 25:chr13 vs 0:chr13     1.8012619  4.577229 5.561601e-04          ***     25 #> 50:chr13 vs 0:chr13     2.9385828  6.909776 3.078870e-10          ***     50 #> 12.5:chr14 vs 0:chr14   1.6964839  3.587639 1.370906e-04          ***   12.5 #> 25:chr14 vs 0:chr14     4.1672729  8.457265 0.000000e+00          ***     25 #> 50:chr14 vs 0:chr14     5.3849112 10.636455 0.000000e+00          ***     50 #> 12.5:chr15 vs 0:chr15   0.8151839  1.861973 1.000000e+00                12.5 #> 25:chr15 vs 0:chr15     1.2432400  2.792033 1.431267e-01                  25 #> 50:chr15 vs 0:chr15     1.4709625  3.096054 3.912376e-03           **     50 #> 12.5:chr16 vs 0:chr16   1.4090553  3.081139 1.400246e-02            *   12.5 #> 25:chr16 vs 0:chr16     2.6703901  5.671485 9.186651e-11          ***     25 #> 50:chr16 vs 0:chr16     3.6247995  7.369124 0.000000e+00          ***     50 #> 12.5:chr17 vs 0:chr17   1.7249453  4.209477 7.964090e-04          ***   12.5 #> 25:chr17 vs 0:chr17     3.3643775  7.990412 5.269118e-12          ***     25 #> 50:chr17 vs 0:chr17     5.0897283 11.525597 0.000000e+00          ***     50 #> 12.5:chr18 vs 0:chr18   1.8289106  4.646056 4.107969e-04          ***   12.5 #> 25:chr18 vs 0:chr18     4.2556443 10.337715 6.661338e-15          ***     25 #> 50:chr18 vs 0:chr18     6.4237853 15.043644 0.000000e+00          ***     50 #> 12.5:chr19 vs 0:chr19   1.5277588  4.259810 2.040424e-02            *   12.5 #> 25:chr19 vs 0:chr19     3.1090814  8.339347 6.014969e-09          ***     25 #> 50:chr19 vs 0:chr19     4.4812717 11.429573 1.332268e-14          ***     50 #> 12.5:chr2 vs 0:chr2     0.9735580  2.174146 9.847718e-01                12.5 #> 25:chr2 vs 0:chr2       1.8467734  3.954311 1.849925e-05          ***     25 #> 50:chr2 vs 0:chr2       2.5788914  5.212089 2.736478e-11          ***     50 #> 12.5:chr3 vs 0:chr3     0.6207181  1.741996 1.000000e+00                12.5 #> 25:chr3 vs 0:chr3       1.1211258  2.975247 6.096467e-01                  25 #> 50:chr3 vs 0:chr3       1.4752442  3.572185 1.371330e-02            *     50 #> 12.5:chr4 vs 0:chr4     1.0327862  2.486534 8.848781e-01                12.5 #> 25:chr4 vs 0:chr4       2.2998626  5.227702 1.753696e-07          ***     25 #> 50:chr4 vs 0:chr4       3.4643670  7.435961 6.661338e-15          ***     50 #> 12.5:chr5 vs 0:chr5     1.1309941  2.783635 5.318649e-01                12.5 #> 25:chr5 vs 0:chr5       2.0878935  4.970677 7.469457e-06          ***     25 #> 50:chr5 vs 0:chr5       3.4719485  7.700443 3.996803e-14          ***     50 #> 12.5:chr6 vs 0:chr6     1.1425149  2.774547 4.792559e-01                12.5 #> 25:chr6 vs 0:chr6       1.8617601  4.420410 1.065049e-04          ***     25 #> 50:chr6 vs 0:chr6       3.5846093  7.839717 6.661338e-15          ***     50 #> 12.5:chr7 vs 0:chr7     1.7425287  4.439347 1.082340e-03           **   12.5 #> 25:chr7 vs 0:chr7       3.8821787  9.476817 1.465494e-13          ***     25 #> 50:chr7 vs 0:chr7       5.0105320 11.824433 0.000000e+00          ***     50 #> 12.5:chr8 vs 0:chr8     2.0570639  5.011863 1.693803e-05          ***   12.5 #> 25:chr8 vs 0:chr8       4.4919687 10.612631 0.000000e+00          ***     25 #> 50:chr8 vs 0:chr8       5.8845805 13.445384 0.000000e+00          ***     50 #> 12.5:chr9 vs 0:chr9     1.0528210  2.339518 8.055155e-01                12.5 #> 25:chr9 vs 0:chr9       1.6088560  3.519362 8.494435e-04          ***     25 #> 50:chr9 vs 0:chr9       2.9962305  6.048657 3.996803e-14          ***     50 #>                         dose_2 label_1 label_2 #> 12.5:chr1 vs 0:chr1          0    chr1    chr1 #> 25:chr1 vs 0:chr1            0    chr1    chr1 #> 50:chr1 vs 0:chr1            0    chr1    chr1 #> 12.5:chr1.2 vs 0:chr1.2      0  chr1.2  chr1.2 #> 25:chr1.2 vs 0:chr1.2        0  chr1.2  chr1.2 #> 50:chr1.2 vs 0:chr1.2        0  chr1.2  chr1.2 #> 12.5:chr10 vs 0:chr10        0   chr10   chr10 #> 25:chr10 vs 0:chr10          0   chr10   chr10 #> 50:chr10 vs 0:chr10          0   chr10   chr10 #> 12.5:chr11 vs 0:chr11        0   chr11   chr11 #> 25:chr11 vs 0:chr11          0   chr11   chr11 #> 50:chr11 vs 0:chr11          0   chr11   chr11 #> 12.5:chr12 vs 0:chr12        0   chr12   chr12 #> 25:chr12 vs 0:chr12          0   chr12   chr12 #> 50:chr12 vs 0:chr12          0   chr12   chr12 #> 12.5:chr13 vs 0:chr13        0   chr13   chr13 #> 25:chr13 vs 0:chr13          0   chr13   chr13 #> 50:chr13 vs 0:chr13          0   chr13   chr13 #> 12.5:chr14 vs 0:chr14        0   chr14   chr14 #> 25:chr14 vs 0:chr14          0   chr14   chr14 #> 50:chr14 vs 0:chr14          0   chr14   chr14 #> 12.5:chr15 vs 0:chr15        0   chr15   chr15 #> 25:chr15 vs 0:chr15          0   chr15   chr15 #> 50:chr15 vs 0:chr15          0   chr15   chr15 #> 12.5:chr16 vs 0:chr16        0   chr16   chr16 #> 25:chr16 vs 0:chr16          0   chr16   chr16 #> 50:chr16 vs 0:chr16          0   chr16   chr16 #> 12.5:chr17 vs 0:chr17        0   chr17   chr17 #> 25:chr17 vs 0:chr17          0   chr17   chr17 #> 50:chr17 vs 0:chr17          0   chr17   chr17 #> 12.5:chr18 vs 0:chr18        0   chr18   chr18 #> 25:chr18 vs 0:chr18          0   chr18   chr18 #> 50:chr18 vs 0:chr18          0   chr18   chr18 #> 12.5:chr19 vs 0:chr19        0   chr19   chr19 #> 25:chr19 vs 0:chr19          0   chr19   chr19 #> 50:chr19 vs 0:chr19          0   chr19   chr19 #> 12.5:chr2 vs 0:chr2          0    chr2    chr2 #> 25:chr2 vs 0:chr2            0    chr2    chr2 #> 50:chr2 vs 0:chr2            0    chr2    chr2 #> 12.5:chr3 vs 0:chr3          0    chr3    chr3 #> 25:chr3 vs 0:chr3            0    chr3    chr3 #> 50:chr3 vs 0:chr3            0    chr3    chr3 #> 12.5:chr4 vs 0:chr4          0    chr4    chr4 #> 25:chr4 vs 0:chr4            0    chr4    chr4 #> 50:chr4 vs 0:chr4            0    chr4    chr4 #> 12.5:chr5 vs 0:chr5          0    chr5    chr5 #> 25:chr5 vs 0:chr5            0    chr5    chr5 #> 50:chr5 vs 0:chr5            0    chr5    chr5 #> 12.5:chr6 vs 0:chr6          0    chr6    chr6 #> 25:chr6 vs 0:chr6            0    chr6    chr6 #> 50:chr6 vs 0:chr6            0    chr6    chr6 #> 12.5:chr7 vs 0:chr7          0    chr7    chr7 #> 25:chr7 vs 0:chr7            0    chr7    chr7 #> 50:chr7 vs 0:chr7            0    chr7    chr7 #> 12.5:chr8 vs 0:chr8          0    chr8    chr8 #> 25:chr8 vs 0:chr8            0    chr8    chr8 #> 50:chr8 vs 0:chr8            0    chr8    chr8 #> 12.5:chr9 vs 0:chr9          0    chr9    chr9 #> 25:chr9 vs 0:chr9            0    chr9    chr9 #> 50:chr9 vs 0:chr9            0    chr9    chr9  # Plot the results using plot_model_mf() # Define the order of the labels for the x-axis label_order <- model2$point_estimates %>%  dplyr::filter(dose == \"50\") %>%  dplyr::arrange(Estimate) %>%  dplyr::pull(label) # Define the order of the doses for the fill dose_order <- c(\"0\", \"12.5\", \"25\", \"50\") plot <- plot_model_mf(model = model2,                       plot_type = \"bar\",                       x_effect = \"label\",                       plot_error_bars = TRUE,                       plot_signif = TRUE,                       ref_effect = \"dose\",                       x_order = label_order,                       fill_order = dose_order,                       x_label = \"Target\",                       y_label = \"MF (mutations/bp)\",                       fill_label = \"Dose\",                       plot_title = \"\",                       custom_palette = c(\"#ef476f\",                                          \"#ffd166\",                                          \"#06d6a0\",                                          \"#118ab2\")) #> Joining with `by = join_by(dose, label)` # The output is a ggplot object and can be modified using ggplot2 # functions. For example, to rotate the x-axis labels by 90 degrees, # use the following code: p <- plot + ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90))"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/op.html","id":null,"dir":"Reference","previous_headings":"","what":"Column names for mut tables — op","title":"Column names for mut tables — op","text":"list column specifications","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/op.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column names for mut tables — op","text":"","code":"op"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/op.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Column names for mut tables — op","text":"list potential variable column names","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_bubbles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Bubble Plots — plot_bubbles","title":"Generate Bubble Plots — plot_bubbles","text":"Produces ggplot object bubble plots given mutation data. Optionally, bubble plots can facetted coloured specified column.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_bubbles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Bubble Plots — plot_bubbles","text":"","code":"plot_bubbles(   mutation_data,   size_by = \"alt_depth\",   facet_col = NULL,   color_by = \"normalized_subtype\",   circle_spacing = 1,   circle_outline = \"none\",   circle_resolution = 50,   custom_palette = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_bubbles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Bubble Plots — plot_bubbles","text":"mutation_data Data frame containing mutation data. size_by column name size circles. Recommended values \"alt_depth\" \"vaf\". facet_col column name facet . NULL, facetting done. Default NULL. color_by column name colour mutations. Default \"normalized_subtype\". circle_spacing Numerical value adjust spacing circles. Default 1. circle_outline Colour circle outline. Default \"none\", resulting outline colour. accepted values colours R language. circle_resolution Number points use circle resolution. Default 50. custom_palette named vector colors used mutation subtypes. names vector correspond levels color_by. Alternatively, can specify color palette RColorBrewer package. See brewer.pal palette options. may visualize palettes ColorBrewer website: https://colorbrewer2.org/. Default NULL.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_bubbles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Bubble Plots — plot_bubbles","text":"ggplot object bubble plot, facetted specified.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_bubbles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Bubble Plots — plot_bubbles","text":"function plot circle mutation mutation_data. Mutations flagged filter_mut column excluded plot. size circle determined size_by parameter. Sizing \"alt_depth\" \"vaf\" give users ability visualize distribution recurrent mutations within data large multiplets large circle.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_bubbles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Bubble Plots — plot_bubbles","text":"","code":"example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) plot <- plot_bubbles(mutation_data = example_data,                      facet_col = \"dose_group\") #> Loading required namespace: packcircles"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_ci — plot_ci","title":"plot_ci — plot_ci","text":"Plot confidence intervals","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_ci — plot_ci","text":"","code":"plot_ci(   data,   order = \"none\",   custom_order = NULL,   nudge = 0.3,   log_scale = FALSE,   x_lab = NULL,   y_lab = NULL,   title = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_ci — plot_ci","text":"data data frame results BMD analysis. Data must contain columns \"Response\", \"BMD\", \"BMDL\", \"BMDU\". BMD values can NA. order Indicates responses ordered. Options \"none\" (default), \"asc\" ascending BMD values, \"desc\" descending BMD values, custom order. custom_order character vector custom order Responses. nudge numeric value nudge text labels away points. Default 0.3. log_scale logical value indicating x-axis log10 scale. Default false. x_lab character string x-axis label. Default \"BMD\" \"log10(BMD)\" log_scale TRUE. y_lab character string y-axis label. Default \"Response\". title character string plot title. Default \"BMD 90% Confidence Intervals\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_ci — plot_ci","text":"ggplot object","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_ci — plot_ci","text":"","code":"# Plot results from PROAST and ToxicR dat <- data.frame(Response = c(\"PROAST MF Min\", \"PROAST MF Max\", \"ToxicR MF Min\", \"ToxicR MF Max\"),                   BMD = c(NA, NA, 9.641894, 8.100164),                   BMDL = c(7.38, 2.98, 8.032936,5.463013),                   BMDU = c(10.9, 7.68, 10.97636, 10.04638)) plot <- plot_ci(dat)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_lollipop.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot recurrent mutations in a lollipop plot using ggplot2 — plot_lollipop","title":"Plot recurrent mutations in a lollipop plot using ggplot2 — plot_lollipop","text":"function visualizes recurrent mutations data frame. first calculates frequency mutation specific genomic positions generates lollipop plot group (e.g., chromosome) displaying mutations meet minimum recurrence threshold.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_lollipop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot recurrent mutations in a lollipop plot using ggplot2 — plot_lollipop","text":"","code":"plot_lollipop(   mutations,   min_recurrence = 2,   group_by_col = \"dose_group\",   custom_palette = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_lollipop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot recurrent mutations in a lollipop plot using ggplot2 — plot_lollipop","text":"mutations data frame containing mutation data. must contain columns genomic start position (start), variation_type, normalized_subtype, column group (see group_by_col). min_recurrence integer specifying minimum number times mutation must observed position plotted. Defaults 2. group_by_col string specifying column name group mutations , typically representing chromosomes contigs (e.g., \"seqnames\", \"chr\"). Defaults \"seqnames\". custom_palette named character vector coloring mutation subtypes. names match levels normalized_subtype. NULL (default), default palette used.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_lollipop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot recurrent mutations in a lollipop plot using ggplot2 — plot_lollipop","text":"list ggplot objects. element list lollipop plot specific region (e.g., chromosome) named accordingly.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_lollipop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot recurrent mutations in a lollipop plot using ggplot2 — plot_lollipop","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE) &&     requireNamespace(\"ggplot2\", quietly = TRUE)) {  example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) example_data$dose_group <- factor(example_data$dose_group,                                   levels = c(\"Control\", \"Low\",                                              \"Medium\", \"High\"))    # 2. Generate the plots   plot_list <- plot_lollipop(mutations = example_data, min_recurrence = 2)    # 3. Display a plot for a specific chromosome   # print(plot_list$chr1)   # print(plot_list$chr2) }"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mean_mf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Mean Mutatation Frequency — plot_mean_mf","title":"Plot the Mean Mutatation Frequency — plot_mean_mf","text":"function calculates mean mutation frequency across samples given groups plots results.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mean_mf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Mean Mutatation Frequency — plot_mean_mf","text":"","code":"plot_mean_mf(   mf_data,   group_col = \"dose\",   fill_col = NULL,   mf_type = \"both\",   plot_type = \"line\",   plot_error_bars = TRUE,   plot_indiv_vals = TRUE,   group_order = \"none\",   group_order_input = NULL,   add_labels = \"mean_count\",   scale_y_axis = \"linear\",   x_lab = NULL,   y_lab = NULL,   plot_title = NULL,   custom_palette = NULL,   plot_legend = TRUE,   rotate_labels = FALSE,   label_size = 3 )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mean_mf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Mean Mutatation Frequency — plot_mean_mf","text":"mf_data data frame containing mutation frequency data. obtained calculate_mf function SUMMARY = TRUE. group_col column(s) mf_data calculate mean. supplying one column, values group columns concatenated single value calculate mean. Values displayed along x-axis. Ex. \"dose\" c(\"dose\", \"tissue\"). fill_col optional column name data used define fill aesthetic plot. fill_col multiple levels within group_col level, mean calculated level fill_col (recommend plot_type = \"line\" use case). Default NULL. mf_type type mutation frequency plot. Options \"min\", \"max\", \"\", \"stacked\". \"\", min max mutation frequencies plotted side side. \"stacked\" can chosen bar plot_type . \"stacked\", difference min max MF stacked top min MF total height bars represent max MF. Default \"min\". plot_type type plot create. Options \"bar\" \"line\". Default \"bar\". plot_error_bars Whether plot error bars. Default TRUE. Error bars standard error mean. plot_indiv_vals Whether plot individual values data points. Default FALSE. group_order order groups along x-axis. ' Options include: none: ordering performed. Default. smart: Groups ordered based sample names. arranged: Groups ordered based one factor column(s) mf_data. Factor column names passed function using group_order_input. custom: Groups ordered based custom vector group names. custom vector passed function using group_order_input. group_order_input order groups group_order \"custom\". column name arrange groups group_order \"arranged\". \"custom\", using one group_col, values concatenated order listed, separated \"_\". add_labels data labels display plot. Either \"indiv_count\", \"indiv_MF\", \"mean_count\", \"mean_MF\", \"none\". Count labels display number mutations, MF labels display mutation frequency. Mean plots mean value. Indiv plots labels individual data points (plot_indiv_vals = TRUE). Default \"none\". scale_y_axis scale y axis. Either \"linear\" \"log\". Default \"linear\". x_lab x-axis label. Default value group_col. y_lab y-axis label. Default \"Mutation Frequency (mutations/bp)\". plot_title title plot. Default \"Mean Mutation Frequency\". custom_palette custom color palette use plot. Input character vector colours. Input named character vector specify olours specific groups. Fill labels constructed following components \"Mean/Individual\" plot_indiv_vals = TRUE, fill labels specify Mean/Individual values. \"min/max\" mf_type = \"\" \"stacked\", fill labels specify min/max values. fill_col value. Name colours match fill labels. Default NULL. custom_palette, rainbow palette generated. Min/Max values Mean/Individual values colour, different shades. plot_legend Logical. Whether show fill (color) legend. Default TRUE. rotate_labels logical value indicating whether data labels rotated 90 degrees. Default FALSE. label_size numeric value controls size data labels.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mean_mf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Mean Mutatation Frequency — plot_mean_mf","text":"ggplot object","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mean_mf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Mean Mutatation Frequency — plot_mean_mf","text":"","code":"example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) example_data$dose_group <- factor(example_data$dose_group,                                   levels = c(\"Control\", \"Low\",                                              \"Medium\", \"High\")) mf <- calculate_mf(mutation_data = example_data,                    cols_to_group = \"sample\",                    subtype_resolution = \"none\",                    retain_metadata_cols = \"dose_group\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)` plot <- plot_mean_mf(mf_data = mf,                      group_col = \"dose_group\",                      mf_type = \"min\",                      plot_type = \"line\",                      fill_col = \"dose_group\",                      plot_error_bars = TRUE,                      plot_indiv_vals = TRUE,                      add_labels = \"none\")"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Mutation Frequency — plot_mf","title":"Plot the Mutation Frequency — plot_mf","text":"function creates plot mutation frequency.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Mutation Frequency — plot_mf","text":"","code":"plot_mf(   mf_data,   group_col,   plot_type = \"bar\",   mf_type = \"min\",   fill_col = NULL,   custom_palette = NULL,   group_order = \"none\",   group_order_input = NULL,   labels = \"count\",   scale_y_axis = \"linear\",   x_lab = NULL,   y_lab = NULL,   title = NULL,   rotate_labels = FALSE,   label_size = 3 )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Mutation Frequency — plot_mf","text":"mf_data data frame containing mutation frequency data. obtained calculate_mf function SUMMARY = TRUE. group_col name column containing sample/group names x-axis. plot_type type plot create. Options \"bar\" \"point\". mf_type type mutation frequency plot. Options \"min\", \"max\", \"\", \"stacked\". \"\", min max mutation frequencies plotted side side. \"stacked\" can chosen bar plot_type . \"stacked\", difference min max MF stacked top min MF total height bars represent max MF. fill_col name column containing fill variable. custom_palette character vector colour codes use plot. NULL, default palette used group_order order samples/groups along x-axis. ' Options include: none: ordering performed. Default. smart: Samples ordered based sample names. arranged: Samples ordered based one factor column(s) mf_data. Factor column names passed function using group_order_input. custom: Samples ordered based custom vector sample names. custom vector passed function using group_order_input. group_order_input order samples/groups group_order \"custom\". column name arrange samples/groups group_order \"arranged\" labels data labels display plot. Either \"count\", \"MF\", \"none\". Count labels display number mutations, MF labels display mutation frequency. scale_y_axis scale y axis. Either \"linear\" \"log\". x_lab label x axis. y_lab label y axis. title title plot. rotate_labels logical value aplied labels \"none\". Indicates whether labels rotated 90 degrees. Default FALSE. label_size numeric value adjusts size labels. Default 3.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Mutation Frequency — plot_mf","text":"ggplot object","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_mf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the Mutation Frequency — plot_mf","text":"","code":"example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) example_data$dose_group <- factor(example_data$dose_group,                                   levels = c(\"Control\", \"Low\",                                              \"Medium\", \"High\")) mf <- calculate_mf(mutation_data = example_data,                    cols_to_group = \"sample\",                    subtype_resolution = \"none\",                    retain_metadata_cols = \"dose_group\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample)` #> Joining with `by = join_by(sample)` plot <- plot_mf(mf_data = mf,                 group_col = \"sample\",                 plot_type = \"bar\",                 mf_type = \"min\",                 fill_col = \"dose_group\",                 group_order = \"arranged\",                 group_order_input = \"dose_group\",                 labels = \"count\",                 title = \"Mutation Frequency per Sample\")"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_model_mf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot your mf model — plot_model_mf","title":"Plot your mf model — plot_model_mf","text":"Provide visualization point estimates derived using model_mf()","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_model_mf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot your mf model — plot_model_mf","text":"","code":"plot_model_mf(   model,   plot_type = \"point\",   x_effect = NULL,   plot_error_bars = TRUE,   plot_signif = TRUE,   ref_effect = NULL,   x_order = NULL,   fill_order = NULL,   x_label = NULL,   y_label = NULL,   plot_title = NULL,   fill_label = NULL,   custom_palette = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_model_mf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot your mf model — plot_model_mf","text":"model model object created using model_mf() plot_type type plot create. Options \"bar\" \"point\". x_effect multiple fixed effects model, specify fixed effect plot x-axis. used fill aesthetic. Currently, 2 fixed effects supported. plot_error_bars Logical. TRUE, estimated standard error added plot. plot_signif Logical. TRUE, add significance labels based pairwise_comparisons data frame model object. valid supplied contrasts table model_mf(). Symbols applied plotted values significantly different reference. contrasts table structured data frame two columns, containing levels fixed effects contrasted. adding significance labels, symbols added values defined first column, second column represent reference. different symbol used unique reference level. single plotted value contrasted multiple references, gain multiple symbols significance difference. ref_effect fixed effect use reference level adding significance labels. applicable using two fixed effects. x_order character vector indicating order levels x_effect. fill_order character vector indicating order levels fill aesthetic, applicable. x_label label x-axis. y_label label y-axis. plot_title title plot. fill_label label fill aesthetic, applicable. custom_palette vector colors use fill color aesthetics. provided, default palette used. plotting model single fixed effect, can specify colors \"fill\" \"color\" using named vector. Likewise, plotting model two fixed effects, can specify colors levels within fill variable.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_model_mf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot your mf model — plot_model_mf","text":"ggplot object.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_model_mf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot your mf model — plot_model_mf","text":"See model_mf() examples.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_radar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a radar plot — plot_radar","title":"Create a radar plot — plot_radar","text":"Create radar plot","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_radar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a radar plot — plot_radar","text":"","code":"plot_radar(mf_data, response_col, label_col, facet_col, indiv_y = TRUE)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_radar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a radar plot — plot_radar","text":"mf_data data frame data plot response_col column response values label_col column labels radar plot. facet_col column group facet radar plots. indiv_y logical indicating whether use individual y-axis scales plot.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_radar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a radar plot — plot_radar","text":"radar plot","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_radar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a radar plot — plot_radar","text":"","code":"# Plot the mean MFmin of each genomic target per dose group # Order the genomic targets by their genic context. #Load the example data and calculate MF example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) mf <- calculate_mf(mutation_data = example_data,                    cols_to_group = c(\"sample\", \"label\"),                    retain_metadata_cols = c(\"dose_group\", \"genic_context\")) #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(sample, label)` #> Joining with `by = join_by(sample, label)` # Define the order of the genomic targets label_order <- mf %>% dplyr::arrange(genic_context) %>%   dplyr::pull(label) %>%   unique() # Calculate the mean MF per dose_group for each target. mean <- mf %>%   dplyr::group_by(dose_group, label) %>%   dplyr::summarise(mean = mean(mf_min)) #> `summarise()` has grouped output by 'dose_group'. You can override using the #> `.groups` argument. # Set the order of each column mean$dose_group <- factor(mean$dose_group,                           levels = c(\"Control\",                                      \"Low\",                                      \"Medium\",                                      \"High\")) mean$label <- factor(mean$label,                      levels = label_order) # Plot plot <- plot_radar(mf_data = mean,                    response_col = \"mean\",                    label_col = \"label\",                    facet_col = \"dose_group\",                    indiv_y = FALSE) #> Loading required namespace: fmsb #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter #> Warning: \"sep\" is not a graphical parameter #> Warning: \"caxiscol\" is not a graphical parameter"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition-transversion plot — plot_spectra","title":"Transition-transversion plot — plot_spectra","text":"Given mf data, construct plot displaying mutation subtypes observed cohort.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition-transversion plot — plot_spectra","text":"","code":"plot_spectra(   mf_data,   group_col = \"sample\",   subtype_resolution = \"base_6\",   response = \"proportion\",   mf_type = \"min\",   group_order = \"none\",   group_order_input = NULL,   dist = \"cosine\",   cluster_method = \"ward.D\",   custom_palette = NULL,   x_lab = NULL,   y_lab = NULL,   rotate_xlabs = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition-transversion plot — plot_spectra","text":"mf_data data frame containing mutation frequency data desired subtype resolution. obtained using 'calculate_mf' function subtype_resolution set desired resolution. Data must include column containing group_col, column containing mutation subtypes, column containing desired response variable (mf, proportion, sum) desired mf_type (min max), applicable, column containing variable order samples/groups. group_col name column(s) mf data contains sample/group names. generally values used cols_to_group argument calculate_mf function. However, may also use groups higher level aggregation mf_data. subtype_resolution subtype resolution mf data. Options base_6, base_12, base_96, base_192, type. Default base_6. response desired response variable plotted. Options mf, proportion, sum. Default proportion. mf_data must contain columns name desired response: mf_min, mf_max, proportion_min, proportion_max, sum_min, sum_max. mf_type mutation counting method use. Options min max. Default min. group_order method ordering samples within plot. Options include: none: ordering performed. Default. smart: Groups automatically ordered based group names (alphabetical, numerical) arranged: Groups ordered based one factor column(s) mf_data. Column names passed function using group_order_input. custom: Groups ordered based custom vector group names. custom vector passed function using group_order_input. clustered: Groups ordered based hierarchical clustering. dissimilarity matrix can specified using dist argument. agglomeration method can specified using cluster_method argument. group_order_input character vector specifying details group order method. group_order arranged, group_order_input contain column name(s) used ordering samples. group_order custom, group_order_input contain custom vector group names. dist dissimilarity matrix hierarchical clustering. Options cosine, euclidean, maximum, manhattan, canberra, binary minkowski. default cosine. See dist details. cluster_method agglomeration method hierarchical clustering. Options ward.D, ward.D2, single, complete, average (= UPGMA), mcquitty (= WPGMA), median (= WPGMC) centroid (= UPGMC). default Ward.D. See hclust details. custom_palette named vector colors used mutation subtypes. names vector correspond mutation subtypes data. Alternatively, can specify color palette RColorBrewer package. See brewer.pal palette options. may visualize palettes ColorBrewer website: https://colorbrewer2.org/. Default NULL. x_lab label x-axis. Default value group_col. y_lab label y-axis. Default value response_col. rotate_xlabs logical value indicating whether x-axis labels rotated 90 degrees. Default FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition-transversion plot — plot_spectra","text":"","code":"# Load example data example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file)  # Example 1: plot the proportion of 6-based mutation subtypes # for each sample, organized by dose group:  # Calculate the mutation frequency data at the 6-base resolution. # Retain the dose_group column to use for ordering the samples. mf_data <- calculate_mf(mutation_data = example_data,                         cols_to_group = \"sample\",                         subtype_resolution = \"base_6\",                         retain_metadata_cols = \"dose_group\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(normalized_subtype, sample)` #> Joining with `by = join_by(sample, normalized_ref)` # Set the desired order for the dose_group levels. mf_data$dose_group <- factor(mf_data$dose_group,                              levels = c(\"Control\", \"Low\", \"Medium\", \"High\")) # Plot the mutation spectra plot <- plot_spectra(mf_data = mf_data,                      group_col = \"sample\",                      subtype_resolution = \"base_6\",                      response = \"proportion\",                      group_order = \"arranged\",                      group_order_input = \"dose_group\")  # Example 2: plot the proportion of 6-based mutation subtypes # for each sample, ordered by hierarchical clustering: plot <- plot_spectra(mf_data = mf_data,                      group_col = \"sample\",                      subtype_resolution = \"base_6\",                      response = \"proportion\",                      group_order = \"clustered\") #> Warning: `scale_x_dendrogram()` was deprecated in ggh4x 0.3.0. #> ℹ Please use `legendry::scale_x_dendro()` instead. #> ℹ The deprecated feature was likely used in the MutSeqR package. #>   Please report the issue at #>   <https://github.com/EHSRB-BSRSE-Bioinformatics/MutSeqR/issues>."},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the trinucleotide spectrum — plot_trinucleotide","title":"Plot the trinucleotide spectrum — plot_trinucleotide","text":"Creates barplots trinucleotide spectrum levels given group.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the trinucleotide spectrum — plot_trinucleotide","text":"","code":"plot_trinucleotide(   mf_96,   response = \"proportion\",   mf_type = \"min\",   group_col = \"dose\",   indiv_y = FALSE,   sum_totals = TRUE,   output_path = NULL,   output_type = \"svg\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the trinucleotide spectrum — plot_trinucleotide","text":"mf_96 data frame containing mutation frequency data 96-base resolution. obtained using 'calculate_mf' subtype_resolution set 'base_96'. Generally, cols_to_group 'group_col'. response character string specifying type response plot. Must one 'frequency', 'proportion', 'sum'. mf_type character string specifying mutation count method plot. Must one 'min' 'max'. Default 'min'. group_col character string specifying column(s) 'mf_96' group data . Default 'sample'. sum, proportion, frequency plotted unique levels group. can specify one column group . Generally 'cols_to_group' parameter 'calculate_mf' generating mf_96. indiv_y logical value specifying whether max response value y-axis scaled independently group (TRUE) scaled groups (FALSE). Default FALSE. sum_totals logical value specifying whether display total sum mutations mutation labels. Default TRUE. output_path optional file path output directory. provided, plots automatically exported using graphics device specified output_type. function create output directory already exist. NULL, plots exported. Default NULL. output_type character string specifying type output file. Options  'eps', 'ps', 'tex', 'pdf', 'jpeg', 'tiff', 'png', 'bmp', 'svg', 'wmf' (windows ). Default 'svg'.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the trinucleotide spectrum — plot_trinucleotide","text":"named list containing ggplots.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the trinucleotide spectrum — plot_trinucleotide","text":"function plots trinucleotide spectrum levels given group provided mf_96 data; output calculate_mf subtype_resolution = \"base_96\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the trinucleotide spectrum — plot_trinucleotide","text":"","code":"# Load example data example_file <- system.file(  \"extdata\", \"Example_files\",  \"example_mutation_data_filtered.rds\",  package = \"MutSeqR\" ) example_data <- readRDS(example_file)  # Calculate the mutation frequency data at the 96-base resolution mf_96 <- calculate_mf(  mutation_data = example_data,  cols_to_group = \"dose_group\",  subtype_resolution = \"base_96\",  variant_types = \"snv\" ) #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(dose_group, normalized_context)` # Plot the trinucleotide proportions for each dose group # Scale y-axis the same for all groups plots <- plot_trinucleotide(  mf_96 = mf_96,  response = \"proportion\",  mf_type = \"min\",  group_col = \"dose_group\",  indiv_y = FALSE,  output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap plot of mutation subtype proportions. — plot_trinucleotide_heatmap","title":"Create a heatmap plot of mutation subtype proportions. — plot_trinucleotide_heatmap","text":"function creates heatmap plot subtype proportions given grouping variable. groups may facetted second variable. Mutation sums facet group normalized subtype calculated displayed.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap plot of mutation subtype proportions. — plot_trinucleotide_heatmap","text":"","code":"plot_trinucleotide_heatmap(   mf_data,   group_col = \"sample\",   facet_col = \"dose\",   mf_type = \"min\",   mut_proportion_scale = \"turbo\",   max = 0.2,   rescale_data = FALSE,   condensed = FALSE )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap plot of mutation subtype proportions. — plot_trinucleotide_heatmap","text":"mf_data data frame containing mutation frequency data desired base resolution. obtained using 'calculate_mf' subtype_resolution set desired resolution. cols_to_group 'group_col'. group_col variable group . facet_col variable facet . mf_type type mutation frequency plot. Options \"min\" \"max\". (Default: \"min\") mut_proportion_scale scale option mutation proportion. Options passed viridis::scale_fill_viridis_c. One # inferno, magma, plasma, viridis, cividis, turbo, mako, rocket. highly reccomend default ability disciminate hard see patterns. (Default: \"turbo\") max Maximum value used plotting proportions. Proportions higher maximum colour. (Default: 0.2) rescale_data Logical value indicating whether rescale mutation proportions increase dynamic range colors shown plot. (Default: TRUE) condensed condensed plotting format. Default = FALSE.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap plot of mutation subtype proportions. — plot_trinucleotide_heatmap","text":"ggplot object representing heatmap plot.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/plot_trinucleotide_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap plot of mutation subtype proportions. — plot_trinucleotide_heatmap","text":"","code":"# Plot the trinucleotide proportions per sample, facetted by dose group. example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) # define dose_group order example_data$dose_group <- factor(example_data$dose_group,                                   levels = c(\"Control\", \"Low\",                                              \"Medium\", \"High\")) mf_96 <- calculate_mf(example_data,                       cols_to_group = \"sample\",                       variant_types = \"snv\",                       subtype_resolution = \"base_96\",                       retain_metadata_cols = \"dose_group\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(normalized_context_with_mutation, sample)` #> Joining with `by = join_by(sample, normalized_context)` plot <- plot_trinucleotide_heatmap(mf_96,                                   group_col = \"sample\",                                   facet_col = \"dose_group\") #> Cutting off at maximum mutation proportion value of 0.2"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/print_ascii_art.html","id":null,"dir":"Reference","previous_headings":"","what":"This function prints ASCII art when the package is loaded — print_ascii_art","title":"This function prints ASCII art when the package is loaded — print_ascii_art","text":"function prints ASCII art package loaded","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/print_ascii_art.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function prints ASCII art when the package is loaded — print_ascii_art","text":"","code":"print_ascii_art()"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/rename_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Map column names of mutation data to default column names. A utility function that renames columns of mutation data to default columns names. — rename_columns","title":"Map column names of mutation data to default column names. A utility function that renames columns of mutation data to default columns names. — rename_columns","text":"Map column names mutation data default column names. utility function renames columns mutation data default columns names.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/rename_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map column names of mutation data to default column names. A utility function that renames columns of mutation data to default columns names. — rename_columns","text":"","code":"rename_columns(data, column_map = op$column)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/rename_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map column names of mutation data to default column names. A utility function that renames columns of mutation data to default columns names. — rename_columns","text":"data mutation data column_map list maps synonymous column names default.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/rename_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map column names of mutation data to default column names. A utility function that renames columns of mutation data to default columns names. — rename_columns","text":"mutation data column names changed match default.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/render_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Read configuration file and render R Markdown document — render_report","title":"Read configuration file and render R Markdown document — render_report","text":"function reads configuration file YAML format, extracts parameters, renders R Markdown document using specified parameters.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/render_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read configuration file and render R Markdown document — render_report","text":"","code":"render_report(   config_filepath,   output_file = \"./MutSeqR_Summary_Report.html\",   output_format = \"html_document\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/render_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read configuration file and render R Markdown document — render_report","text":"config_filepath path configuration file. output_file name output file. saved outputdir config params. output_format format output file. Options \"html_document\" (default), \"pdf_document\", \"\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/render_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read configuration file and render R Markdown document — render_report","text":"None","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/reverseComplement.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the reverse complement of a DNA or RNA sequence. — reverseComplement","title":"Get the reverse complement of a DNA or RNA sequence. — reverseComplement","text":"Get reverse complement DNA RNA sequence.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/reverseComplement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the reverse complement of a DNA or RNA sequence. — reverseComplement","text":"","code":"reverseComplement(   x,   content = c(\"dna\", \"rna\"),   case = c(\"lower\", \"upper\", \"as is\") )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/reverseComplement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the reverse complement of a DNA or RNA sequence. — reverseComplement","text":"x character vector DNA RNA sequences. content c(\"dna\", \"rna\") type sequence reversed. case c(\"lower\", \"upper\", \"\") case output sequence.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/reverseComplement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the reverse complement of a DNA or RNA sequence. — reverseComplement","text":"file part source code SPGS: R package identifying statistical patterns genomic sequences. Copyright (C) 2015  Universidad de Chile INRIA-Chile copy Version 2 GNU Public License available share/licenses/gpl-2 file R installation directory http://www.R-project.org/Licenses/GPL-2. reverseComplement.R","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/setup_mutseqr_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Python environment for MutSeqR — setup_mutseqr_python","title":"Set up Python environment for MutSeqR — setup_mutseqr_python","text":"function initializes Python environment used MutSeqR. run automatically avoid issues installation checks.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/setup_mutseqr_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Python environment for MutSeqR — setup_mutseqr_python","text":"","code":"setup_mutseqr_python(force = FALSE)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/setup_mutseqr_python.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up Python environment for MutSeqR — setup_mutseqr_python","text":"force Logical. Whether force reconfiguration even environment already exists.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/sidak.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct p-values for multiple comparisons — sidak","title":"Correct p-values for multiple comparisons — sidak","text":"Correct p-values multiple comparisons","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/sidak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct p-values for multiple comparisons — sidak","text":"","code":"sidak(vecP)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/sidak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct p-values for multiple comparisons — sidak","text":"vecP vector p-values","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/sidak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct p-values for multiple comparisons — sidak","text":"adjusted p-values","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/sidak.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correct p-values for multiple comparisons — sidak","text":"function corrects vector probabilities multiple testing using Bonferroni (1935) Sidak (1967) corrections. References: Bonferroni (1935), Sidak (1967), Wright (1992). Bonferroni, C. E. 1935. Il calcolo delle assicurazioni su gruppi di teste. Pp. 13-60 : Studi onore del Professore Salvatore Ortu Carboni. Roma. Sidak, Z. 1967. Rectangular confidence regions means multivariate normal distributions. Journal American Statistical Association 62:626-633. Wright, S. P. 1992. Adjusted P-values simultaneous inference. Biometrics 48: 1005-1013. Pierre Legendre, May 2007","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/signature_fitting.html","id":null,"dir":"Reference","previous_headings":"","what":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","title":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","text":"Run COSMIC signatures comparison using SigProfilerAssignment","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/signature_fitting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","text":"","code":"signature_fitting(   mutation_data,   project_name = \"Default\",   project_genome = \"GRCh38\",   env_name = \"MutSeqR\",   group = \"sample\",   output_path = NULL,   python_version )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/signature_fitting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","text":"mutation_data data frame containing mutation data. project_name name project. used format data required .txt format SigProfiler tools. project_genome reference genome use. first use, function install genome using SigProfilerMatrixGeneratorR::install. e.x. GRCh37, GRCH38, mm10, mm9, rn6 env_name name virtual environment. created first use. group column mutation data used aggregate groups. Signature assignment performed group separately. output_path filepath directory output folder created store results. Default NULL. store results current working directory. python_version version python installed user's computer.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/signature_fitting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","text":"Creates subfolder \"SigProfiler\" output directory SigProfiler tools results. complete breakdown results, see Readme file MutSeqR. relevant results stored SigProfiler > group > matrices > output > Assignment_Solution > Activities > SampleReconstruction > WebPNGs. plots show summary signature assignment results group. plot, top left panel represents base_96 mutation count group. bottom left panel represents reconstructed profile. reconstruction solution statistics indicate goodness fit reconstructed profile observed profile. (Recommended cosine similarity > 0.9). panels right represent SBS signatures contribute reconstructed profile. signature name contribution % shown panel. high contribution means high association signature group's mutation spectra.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/signature_fitting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","text":"Assign COSMIC SBS signatures mutation data using SigProfilerAssignment. Data cleaned formatted input SigProfiler tools. function create virtual environment using reticulate run python, requirement SigProfiler suite tools. Note also install several python dependencies using conda virtual environment first use. Please aware implications . advanced use, suggested use SigProfiler python tools directly python described respective documentation. Users must python installed computer use function. Mutation data filtered include SNVs. Variants flagged filter_mut column excluded.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/signature_fitting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run COSMIC signatures comparison using SigProfilerAssignment — signature_fitting","text":"","code":"if (FALSE) { # \\dontrun{ example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) signature_fitting(mutation_data = example_data,                   project_name = \"Example\",                   project_genome = \"mm10\",                   env_name = \"MutSeqR\",                   group = \"dose\",                   python_version = \"3.11\") } # }"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/spectra_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare the overall mutation spectra between groups — spectra_comparison","title":"Compare the overall mutation spectra between groups — spectra_comparison","text":"spectra_comparison compares mutation spectra groups using modified contingency table approach.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/spectra_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare the overall mutation spectra between groups — spectra_comparison","text":"","code":"spectra_comparison(   mf_data,   exp_variable,   mf_type = \"min\",   contrasts,   cont_sep = \"\\t\" )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/spectra_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare the overall mutation spectra between groups — spectra_comparison","text":"mf_data data frame containing MF data. output calculate_mf(). MF data desired subtype resolution. Required columns exp_variable column(s), subtype column, sum_min sum_max. exp_variable column names experimental variable(s) compared. mf_type type mutation frequency use. Default \"min\" (recommended). contrasts filepath file dataframe specifies comparisons made levels exp_variable(s) table must consist two columns, containing level exp_variable. level first column compared level second column row contrasts. using one exp_variable, separate levels variable colon. Ensure variables listed exp_variable represented entry table. See details examples. cont_sep delimiter used import contrasts table. Default tab.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/spectra_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare the overall mutation spectra between groups — spectra_comparison","text":"log-likelihood statistic G2 specified comparisons p-value adjusted multiple-comparisons.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/spectra_comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare the overall mutation spectra between groups — spectra_comparison","text":"function creates R * 2 contigency table subtype counts, R number subtypes 2 groups compared. G2 likelihood ratio statistic used evaluate whether proportion (count/group total) mutation subtype equals group. G2 statistic refers chi-squared distribution compute p-value large sample sizes. N / (R-1) < 20, N total mutation counts across groups, function use F-distribution compute p-value order reduce false positive rates. comparison assumes independance among observations, , highly recommended use mf_type = \"min\". Examples contrasts: 'exp_variable = \"dose\"` dose groups 0, 12.5, 25, 50, compare treated dose control: 12.5 0 25 0 50 0 Ex. Consider two 'exp_variables = c(\"dose\", \"tissue\")`; levels dose (0, 12.5, 25, 50) tissue(\"bone_marrow\", \"liver\"). compare mutation spectra tissues dose group, contrast table look like: 0:bone_marrow\t0:liver 12.5:bone_marrow\t12.5:liver 25:bone_marrow\t25:liver 50:bone_marrow\t50:liver","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/spectra_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare the overall mutation spectra between groups — spectra_comparison","text":"","code":"# Load the example data example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file)  # Example: compare 6-base mutation spectra between dose groups # Calculate the mutation frequency data at the 6-base resolution mf_data <- calculate_mf(mutation_data = example_data,                         cols_to_group = \"dose_group\",                          subtype_resolution = \"base_6\") #> Performing internal depth correction to prevent double-counting... #> Internal depth correction complete. #> Joining with `by = join_by(dose_group, normalized_ref)` # Create the contrasts table contrasts <- data.frame(col1 = c(\"Low\", \"Medium\", \"High\"),                         col2 = rep(\"Control\", 3)) # Run the comparison spectra_comparison(mf_data = mf_data,                    exp_variable = \"dose_group\",                    mf_type = \"min\",                    contrasts = contrasts) #> Using chi-squared distribution to compute p-value #> Using chi-squared distribution to compute p-value #> Using chi-squared distribution to compute p-value #>           contrasts       G2 p.value adj_p.value Significance #> 1    Low vs Control 195.6281       0           0          *** #> 2 Medium vs Control 503.3807       0           0          *** #> 3   High vs Control 714.0200       0           0          ***"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/subtype_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Values accepted for mutation subtypes — subtype_dict","title":"Values accepted for mutation subtypes — subtype_dict","text":"values used enable user input translate columns mut file","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/subtype_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Values accepted for mutation subtypes — subtype_dict","text":"","code":"subtype_dict"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/subtype_dict.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Values accepted for mutation subtypes — subtype_dict","text":"vector corresponding values","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/subtype_list.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of mutation subtypes at different resolutions — subtype_list","title":"A list of mutation subtypes at different resolutions — subtype_list","text":"list mutation subtypes different resolutions","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/subtype_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of mutation subtypes at different resolutions — subtype_list","text":"","code":"subtype_list"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/subtype_list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of mutation subtypes at different resolutions — subtype_list","text":"list corresponding values","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Excel tables — write_excel","title":"Write Excel tables — write_excel","text":"Writes data Excel file.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Excel tables — write_excel","text":"","code":"write_excel(data, output_path = NULL, workbook_name, model_results = FALSE)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Excel tables — write_excel","text":"data data frame list data frames. data frame, written single sheet Excel workbook. list, data frame written separate sheet Excel workbook. Data may also output model_mf, case set model_results = TRUE. output_path directory Excel file written. Default NULL, write file current working directory. workbook_name file name Excel file. model_results logical value indicating whether data output model_mf. Default FALSE. TRUE, function grab model_data, point_estimates, pairwise_comparisons data frames model_mf output write separate sheets Excel workbook.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Excel tables — write_excel","text":"saved Excel workbook.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Excel tables — write_excel","text":"","code":"if (FALSE) { # \\dontrun{ example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) mf1 <- calculate_mf(example_data,                     cols_to_group = \"sample\",                     subtype_resolution = \"none\",                     retain_metadata_cols = \"dose\") mf2 <- calculate_mf(example_data,                     cols_to_group = c(\"sample\", \"label\"),                     subtype_resolution = \"none\") mf3 <- calculate_mf(example_data,                     cols_to_group = \"dose\",                     subtype_resolution = \"base_6\",                     variant_types = c(\"-ambiguous\", \"-uncategorized\")) list <- list(mf1, mf2, mf3) names(list) <- c(\"mf1\", \"mf2\", \"mf3\")  # save a single data frame to an Excel file write_excel(mf1, output_path, workbook_name = \"test_single\") #save a list of data frames to an Excel file write_excel(list, output_path, workbook_name = \"test_list\")  # save model results to an Excel file model  <- model_mf(mf1,                    fixed_effects = \"dose\",                    reference_level = 0,                    contrasts = data.frame(col1 = c(12.5, 25, 50),                                           col2 = rep(0,3))) write_excel(model,             workbook_name = \"test_model\",             model_results = TRUE) } # }"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutation_calling_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","title":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","text":"Creates .txt file mutation data can used mutational signatures analysis using SigProfiler Assignment web application. Currently supports SBS analysis .e. snvs.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutation_calling_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","text":"","code":"write_mutation_calling_file(   mutation_data,   project_name = \"Example\",   project_genome = \"GRCm38\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutation_calling_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","text":"mutation_data object containing mutation data. output import_mut_data() import_vcf_data(). project_name name project. Default \"Example\". project_genome reference genome use. (e.g., Human: GRCh38, Mouse mm10: GRCm38) output_path path save output file. NULL, files saved current working directory. Default NULL.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutation_calling_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","text":".txt file can uploaded SigProfiler Assignment web application (https://cancer.sanger.ac.uk/signatures/assignment/) \"Mutational calling file\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutation_calling_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","text":"Mutations filtered SNVs. Mutations flagged filter_mut excluded output.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutation_calling_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write the mutation calling file to input into the SigProfiler Assignment web application. — write_mutation_calling_file","text":"","code":"example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) temp_output <- tempdir() write_mutation_calling_file(mutation_data = example_data,                             project_name = \"Example\",                             project_genome = \"GRCm38\",                             output_path = temp_output) list.files(temp_output) #>  [1] \"bslib-2ce9eb5d8d7866b4f2d82a9ef19eb08f\"                                                         #>  [2] \"downlit\"                                                                                        #>  [3] \"file335a2346df15\"                                                                               #>  [4] \"file335a4b6076bc\"                                                                               #>  [5] \"file335a4c090529\"                                                                               #>  [6] \"file335a6183334a\"                                                                               #>  [7] \"file335a68d291ce\"                                                                               #>  [8] \"libloc_177_9a667201821007d.rds\"                                                                 #>  [9] \"libloc_182_ba3851d8a9100920.rds\"                                                                #> [10] \"libloc_182_d3198563f59e5c50.rds\"                                                                #> [11] \"mutation_calling_file.txt\"                                                                      #> [12] \"repos_https%3A%2F%2Fbioconductor.org%2Fpackages%2F3.21%2Fdata%2Fannotation%2Fsrc%2Fcontrib.rds\" # The file is saved in the temporary directory # To view the file, use the following code: ## output_file <- file.path(temp_output, \"mutation_calling_file.txt\") ## file.show(output_file"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutational_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","title":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","text":"Creates .txt file mutation data can used mutational signatures analysis using SigProfiler web application. Can handle group analyses (ex dose, tissue, etc). Currently supports SBS matrices .e. snvs.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutational_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","text":"","code":"write_mutational_matrix(   mutation_data,   group = \"dose\",   subtype_resolution = \"base_96\",   mf_type = \"min\",   output_path = NULL )"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutational_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","text":"mutation_data object containing mutation data. output import_mut_data() import_vcf_data(). group column mutation data used aggregate groups (e.g., sample, tissue, dose). subtype_resolution resolution mutation subtypes. Options \"base_6\" \"base_96\". Default \"base_96\". mf_type mutation counting method use. Options \"min\" \"max\". Default \"min\". output_path path save output file. provided, file saved current working directory. Default NULL.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutational_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","text":".txt file can uploaded SigProfiler Assignment web application (https://cancer.sanger.ac.uk/signatures/assignment/) \"Mutational Matrix\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutational_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","text":"Mutations filtered SNVs. Mutations flagged filter_mut excluded output. Mutations summed across groups specified group argument.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_mutational_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Mutational Matrix to input into the sigprofiler web application — write_mutational_matrix","text":"","code":"example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) temp_output <- tempdir() write_mutational_matrix(mutation_data = example_data,                         group = \"dose_group\",                         subtype_resolution = \"base_96\",                         mf_type = \"min\",                         output_path = temp_output) list.files(temp_output) #>  [1] \"bslib-2ce9eb5d8d7866b4f2d82a9ef19eb08f\"                                                         #>  [2] \"dose_group_base_96_mutational_matrix.txt\"                                                       #>  [3] \"downlit\"                                                                                        #>  [4] \"file335a2346df15\"                                                                               #>  [5] \"file335a4b6076bc\"                                                                               #>  [6] \"file335a4c090529\"                                                                               #>  [7] \"file335a6183334a\"                                                                               #>  [8] \"file335a68d291ce\"                                                                               #>  [9] \"libloc_177_9a667201821007d.rds\"                                                                 #> [10] \"libloc_182_ba3851d8a9100920.rds\"                                                                #> [11] \"libloc_182_d3198563f59e5c50.rds\"                                                                #> [12] \"mutation_calling_file.txt\"                                                                      #> [13] \"repos_https%3A%2F%2Fbioconductor.org%2Fpackages%2F3.21%2Fdata%2Fannotation%2Fsrc%2Fcontrib.rds\" # The file is saved in the temporary directory # To view the file, use the following code: ## output_file <- file.path(temp_output, \"dose_group_base_96_mutational_matrix.txt\") ## file.show(output_file)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_reference_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write FASTA file of reference sequences. — write_reference_fasta","title":"Write FASTA file of reference sequences. — write_reference_fasta","text":"Write FASTA file reference sequences.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_reference_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write FASTA file of reference sequences. — write_reference_fasta","text":"","code":"write_reference_fasta(regions_gr, output_path = NULL)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_reference_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write FASTA file of reference sequences. — write_reference_fasta","text":"regions_gr GRanges object including sequences reference regions included data. can generated get_seq function. output_path directory FASTA file written. Default NULL, write file current working directory.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_reference_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write FASTA file of reference sequences. — write_reference_fasta","text":"Writes FASTA reference file \"reference_output.fasta\". multiple ranges included GRanges object, sequences written single FASTA file. Sequences names seqnames (contig) range.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_reference_fasta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write FASTA file of reference sequences. — write_reference_fasta","text":"Generate arbitrary multi-sequence FASTA file GRanges including reference sequences.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_reference_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write FASTA file of reference sequences. — write_reference_fasta","text":"","code":"if (FALSE) { # \\dontrun{ # Write FASTA files for the 20 genomic target sequences # of TwinStrand's Mouse Mutagenesis Panel. rg <- get_seq(\"TSpanel_mouse\") write_reference_fasta(rg, output_path = NULL) } # }"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_vcf_from_mut.html","id":null,"dir":"Reference","previous_headings":"","what":"Write mutation_data to a VCF file — write_vcf_from_mut","title":"Write mutation_data to a VCF file — write_vcf_from_mut","text":"Export mutation_data VCF file downstream applications.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_vcf_from_mut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write mutation_data to a VCF file — write_vcf_from_mut","text":"","code":"write_vcf_from_mut(mutation_data, output_path = NULL)"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_vcf_from_mut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write mutation_data to a VCF file — write_vcf_from_mut","text":"mutation_data data frame GRanges object containing mutation data. can output import_mut_data, import_vcf_data, filter_mut. Coordinates must 1-based. Required columns \"contig\", \"start\", \"end\", \"ref\", \"alt\", \"sample\", \"alt_depth\", \"total_depth\", \"ref_depth\". Additional columns allowed. output_path directory VCF file written. Default NULL, write file current working directory.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_vcf_from_mut.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write mutation_data to a VCF file — write_vcf_from_mut","text":"Writes VCF file mutations \"mutation_output.vcf\".","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/reference/write_vcf_from_mut.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write mutation_data to a VCF file — write_vcf_from_mut","text":"","code":"if (FALSE) { # \\dontrun{ example_file <- system.file(\"extdata\", \"Example_files\",                             \"example_mutation_data_filtered.rds\",                             package = \"MutSeqR\") example_data <- readRDS(example_file) write_vcf_from_mut(example_data) } # }"},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/news/index.html","id":"mutseqr-0990-2025-06-19","dir":"Changelog","previous_headings":"","what":"MutSeqR 0.99.0 (2025-06-19)","title":"MutSeqR 0.99.0 (2025-06-19)","text":"Initial public version.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/news/index.html","id":"major-changes-0-99-0","dir":"Changelog","previous_headings":"","what":"Major changes","title":"MutSeqR 0.99.0 (2025-06-19)","text":"Added filter_mut() workflow: germline identification via vaf_cutoff, region filtering, depth correction now occur instead import functions. calculate_mut_freq() renamed calculate_mf(). calculate depth mutation data, supply separate depth table, omit depth entirely (mutation counts returned). correct_depth option moved calculate_mf(). plot_spectra(), plot_trinucleotide(), spectra_comparison() now use mf_data instead raw mutations. Output options added: VCF, FASTA, SigProfiler-compatible format, Excel workbook. Example dataset (~44MB) added.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/news/index.html","id":"new-features-0-99-0","dir":"Changelog","previous_headings":"","what":"New features","title":"MutSeqR 0.99.0 (2025-06-19)","text":"render_report() added standardized summary reporting.","code":""},{"path":"https://ehsrb-bsrse-bioinformatics.github.io/MutSeqR/news/index.html","id":"other-0-99-0","dir":"Changelog","previous_headings":"","what":"Other","title":"MutSeqR 0.99.0 (2025-06-19)","text":"Removed custom_regions parameter; replaced generalized regions argument. Public release 🎉 See vignette details.","code":""}]
